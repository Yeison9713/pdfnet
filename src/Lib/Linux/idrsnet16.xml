<?xml version="1.0"?>
<doc>
    <assembly>
        <name>idrsnet16</name>
    </assembly>
    <members>
        <member name="T:IDRSNET.CAdvancedBinarize">
            <summary>
            \class CAdvancedBinarize
            \ingroup module_prepro_adv
            The CAdvancedBinarize class offers enhanced binarization features.
            Besides the algorithms for image binarization, it offers the following features:
            - smooth image: remove image noise
            - contrast level: enhances the image by increasing/decreasing the difference between image elements and their background.
            - brightness: enhances the image by increasing/decreasing the luminosity of the image.
            \req IDRS::IDRS_MODULE_PREPRO with extension IDRS::IDRS_PREPRO_EXTENSION_ADVANCED_PREPRO
            <see cref="F:IDRSNET.IDRS_MODULE.IDRS_MODULE_PREPRO"/> for information about the preprocessing library
            <see cref="F:IDRSNET.IDRS_EXTENSION.IDRS_PREPRO_EXTENSION_ADVANCED_PREPRO"/> for information about advanced preprocessing extension
            <see cref="T:IDRSNET.CBinarize"/> for the standard binarization algorithms.
            </summary>
        </member>
        <member name="M:IDRSNET.CAdvancedBinarize.#ctor(IDRSNET.CIDRS)">
            <summary>
            Creates a new CAdvancedBinarize object
            </summary>
            <param name="argIDRS">The iDRS</param>
            <returns>The newly created CAdvancedBinarize</returns>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CAdvancedBinarize.Finalize">
            <summary>
            Destructor of CAdvancedBinarize.
            </summary>
        </member>
        <member name="M:IDRSNET.CAdvancedBinarize.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CAdvancedBinarize.GetPointer">
            <summary>
            Internal override  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CAdvancedBinarize.SetPointer(System.IntPtr)">
            <summary>
            Internal override  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CAdvancedBinarize object</param>
        </member>
        <member name="M:IDRSNET.CAdvancedBinarize.SetParameters(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Sets the different parameters for advanced binarization.
            </summary>
            <pre>! IsNull ()</pre>
            <param name="ucThreshold">The threshold (0 for automatic threshold computation).</param>
            <param name="ucSmoothingLevel">The smoothing level (0 disables smoothing, higher values smooth more).</param>
            <param name="ucContrast">The contrast (lower values will darker the result).</param>
            <param name="ucBrightness">The brightness (higher values will darker the result).</param>
        </member>
        <member name="M:IDRSNET.CAdvancedBinarize.GetParameters(System.Byte[]@,System.Byte[]@,System.Byte[]@,System.Byte[]@)">
            <summary>
            Gets the different parameters of advanced binarization.
            </summary>
            <pre>! IsNull ()</pre>
            <param name="ucThreshold">Retrieves the threshold.</param>
            <param name="ucSmoothingLevel">Retrieves the smoothing level.</param>
            <param name="ucContrast">Retrieves the contrast.</param>
            <param name="ucBrightness">Retrieves the brightness.</param>
        </member>
        <member name="M:IDRSNET.CAdvancedBinarize.AdaptiveBinarization(IDRSNET.CImage,IDRSNET.CImage)">
            <summary>
            Computes a black and white image with the input color/greyscale image
            - use the smoothing, brightness and contrast levels stored in the instance of this class
            - performs adaptive binarization.
            The adaptive binarization determines local thresholds.
            </summary>
            <pre>! argImageTarget.IsNull ()</pre>
            <param name="argImageTarget">The image that will receive the black and white image.</param>
            <param name="argImageSource">The color/greyscale image to binarize.</param>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CAdvancedBinarize.AdaptiveBinarization(IDRSNET.CImage,IDRSNET.CImage,IDRSNET.IAdvancedBinarizeCallback)">
            <summary>
            Computes a black and white image with the input color/greyscale image, followed by a color dropout
            - use the smoothing, brightness and contrast levels stored in the instance of this class
            - performs adaptive binarization.
            - perform a color dropout using the callback object given in argument
            The adaptive binarization determines local thresholds.
            </summary>
            <pre>! argImageTarget.IsNull ()</pre>
            <param name="argImageTarget">The image that will receive the black and white image.</param>
            <param name="argImageSource">The color/greyscale image to binarize.</param>
            <param name="argAdvancedBinarizeCallback">The callback object indicating which color to drop out.</param>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CAdvancedBinarize.ThresholdBinarization(IDRSNET.CImage,IDRSNET.CImage)">
            <summary>
            Computes a black and white image with the input color/greyscale image
            - use the smoothing, brightness, contrast levels and the threshold stored in the instance of this class
            - apply the fixed threshold for binarization.
            </summary>
            <remarks>If the threshold provided is 0, the image is analyzed to automatically compute a threshold for the whole document.</remarks>
            <pre>! argImageSource.IsNull ()</pre>
            <param name="argImageTarget">The image that will receive the black and white image.</param>
            <param name="argImageSource">The color/greyscale image to binarize.</param>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CAdvancedBinarize.ThresholdBinarization(IDRSNET.CImage,IDRSNET.CImage,IDRSNET.IAdvancedBinarizeCallback)">
            <summary>
            Computes a black and white image with the input color/greyscale image, followed by a color dropout
            - use the smoothing, brightness, contrast levels and the threshold stored in the instance of this class
            - apply the fixed threshold for binarization.
            - perform a color dropout using the callback object given in argument
            </summary>
            <remarks>If the threshold provided is 0, the image is analyzed to automatically compute a threshold for the whole document.</remarks>
            <pre>! argImageTarget.IsNull ()</pre>
            <param name="argImageTarget">The image that will receive the black and white image.</param>
            <param name="argImageSource">The color/greyscale image to binarize.</param>
            <param name="argAdvancedBinarizeCallback">The callback object indicating which color to drop out.</param>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CAdvancedBinarize.AdaptiveBinarization(IDRSNET.CIDRS,IDRSNET.CImage,IDRSNET.CImage,IDRSNET.IAdvancedBinarizeCallback,System.Byte,System.Byte,System.Byte)">
            <summary>
            Computes a black and white image with the input color/greyscale image, followed by a color dropout
            - use the smoothing, brightness and contrast levels given in argument
            - performs adaptive binarization.
            - perform a color dropout using the callback object given in argument
            The adaptive binarization determines local thresholds.
            </summary>
            <pre>! argImageTarget.IsNull ()</pre>
            <param name="argIDRS">The iDRS</param>
            <param name="argImageTarget">The image that will receive the black and white image.</param>
            <param name="argImageSource">The color/greyscale image to binarize.</param>
            <param name="argAdvancedBinarizeCallback">The callback object indicating which color to drop out.</param>
            <param name="ucSmoothingLevel">The smoothing level (0 disables smoothing, higher values smooth more).</param>
            <param name="ucContrast">The contrast (lower values will darker the result).</param>
            <param name="ucBrightness">The brightness (higher values will darker the result).</param>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CAdvancedBinarize.ThresholdBinarization(IDRSNET.CIDRS,IDRSNET.CImage,IDRSNET.CImage,IDRSNET.IAdvancedBinarizeCallback,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Computes a black and white image with the input color/greyscale image, followed by a color dropout
            - use the smoothing, brightness, contrast levels and the threshold given in argument
            - apply the fixed threshold for binarization.
            - perform a color dropout using the callback object given in argument
            </summary>
            <remarks>If the threshold provided is 0, the image is analyzed to automatically compute a threshold for the whole document.</remarks>
            <pre>! argImageTarget.IsNull ()</pre>
            <param name="argIDRS">The iDRS</param>
            <param name="argImageTarget">The image that will receive the black and white image.</param>
            <param name="argImageSource">The color/greyscale image to binarize.</param>
            <param name="argAdvancedBinarizeCallback">The callback object indicating which color to drop out.</param>
            <param name="ucThreshold">The threshold (0 for automatic threshold computation).</param>
            <param name="ucSmoothingLevel">The smoothing level (0 disables smoothing, higher values smooth more).</param>
            <param name="ucContrast">The contrast (lower values will darker the result).</param>
            <param name="ucBrightness">The brightness (higher values will darker the result).</param>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="P:IDRSNET.CAdvancedBinarize.Threshold">
            <summary>
            Sets the threshold for fixed threshold binarization.
            
            </summary>
            <remarks>Default value is IDRS_DFLT_BINARIZATION_THRESH.</remarks>
            <pre> ! IsNull () </pre>
        </member>
        <member name="P:IDRSNET.CAdvancedBinarize.Undithering">
            <summary>
            Get/Set a boolean flag that indicates if the automatic undithering correction will be applied before OCR.
            Dithering is a scanning technique which consists in representing a color or greyscale image using only a limited color palette. This allows to reduce file size while maintaining the general aspect of the image.
            This technique is known to create images more difficult to handle for OCR technology; this is why specific image preprocessing is needed to detect and revert it.
            </summary>
            <remarks>Automatic undithering will be applied only if smoothing is also activated</remarks>
        </member>
        <member name="P:IDRSNET.CAdvancedBinarize.Contrast">
            <summary>
            Sets the contrast for advanced binarization.
            
            </summary>
            <remarks>Default value is IDRS_DFLT_BINARIZATION_CONTRAST.</remarks>
            <pre> ! IsNull () </pre>
        </member>
        <member name="P:IDRSNET.CAdvancedBinarize.SmoothingLevel">
            <summary>
            Sets the level of image smoothing.
            Smoothing may be useful to binarize text with a colored background in order to avoid noisy pixels.
            
            </summary>
            <remarks>Default value is IDRS_DFLT_BINARIZATION_SMOOTH.</remarks>
            <pre> ! IsNull () </pre>
        </member>
        <member name="P:IDRSNET.CAdvancedBinarize.Brightness">
            <summary>
            Sets the brightness for advanced binarization.
            
            </summary>
            <remarks>Default value is IDRS_DFLT_BINARIZATION_BRIGHTNESS.</remarks>
            <pre> ! IsNull () </pre>
        </member>
        <!-- Badly formed XML comment ignored for member "T:IDRSNET.CAdvancedDecision" -->
        <member name="F:IDRSNET.CAdvancedDecision.m_wgInstance">
            <summary>
            Private instance of wrapper glue class WGAdvancedDecision.
            </summary>
        </member>
        <member name="M:IDRSNET.CAdvancedDecision.#ctor">
            <summary>
            Constructor of CAdvancedDecision.
            </summary>
        </member>
        <member name="M:IDRSNET.CAdvancedDecision.Finalize">
            <summary>
            Destructor of CAdvancedDecision.
            </summary>
        </member>
        <member name="M:IDRSNET.CAdvancedDecision.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CAdvancedDecision.GetPointer">
            <summary>
            Internal virtual GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CAdvancedDecision.SetPointer(System.IntPtr)">
            <summary>
            Internal virtual SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another m_wgInstance object</param>
        </member>
        <member name="M:IDRSNET.CAdvancedDecision.ComputeScore(System.UInt32,System.Byte,System.Byte,System.Byte)">
            <summary>
            ComputeScore is a virtual method that allows the integrators to specify the way the best alternative score is computed.
            The default implementation of this function returns the score computed by the OCR engine.
            Please note that the lower value means better accuracy
            </summary>
            <param name="uiOcrEngineTotalScore">Total score computed by default by the OCR engine</param>
            <param name="ucOcrScore">Score obtained by analyzing the shape of the character(s)</param>
            <param name="ucLexiconScore">Score obtained from the linguistic analysis of word solutions</param>
            <param name="ucTypographicScore">Score generated from the typographic analysis of word solutions</param>
            <returns>The new score that iDRS must use as candidate's confidence level.</returns>
        </member>
        <member name="T:IDRSNET.CAdvancedDespeckle">
            <summary>
            The CAdvancedDespeckle class provides advanced image noise reduction features by image despeckle filter.
            \ingroup module_prepro_adv
            The despeckle filter is pro grammatically configurable and it can accept one or more of the following parameters:
            - maximum size for a speckle: the maximum size for the speckles to be remove.
            - dilate
            - callback function: the integrator can supply a custom function for setting the output pixels.
            \req IDRS::IDRS_MODULE_PREPRO with extension IDRS::IDRS_PREPRO_EXTENSION_ADVANCED_PREPRO
            <see cref="F:IDRSNET.IDRS_MODULE.IDRS_MODULE_PREPRO"/> for information about the preprocessing library
            <see cref="F:IDRSNET.IDRS_EXTENSION.IDRS_PREPRO_EXTENSION_ADVANCED_PREPRO"/> for information about advanced preprocessing extension
            <see cref="T:IDRSNET.CDespeckle"/> for the standard despeckle algorithms
            </summary>
        </member>
        <member name="M:IDRSNET.CAdvancedDespeckle.#ctor(IDRSNET.CIDRS)">
            <summary>
            Creates a new CAdvancedDespeckle object.
            </summary>
            <param name="argIDRS">The iDRS</param>
            <returns>The newly created CAdvancedDespeckle object.</returns>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CAdvancedDespeckle.Finalize">
            <summary>
            Destructor of CAdvancedDespeckle.
            </summary>
        </member>
        <member name="M:IDRSNET.CAdvancedDespeckle.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CAdvancedDespeckle.GetPointer">
            <summary>
            Internal override  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CAdvancedDespeckle.SetPointer(System.IntPtr)">
            <summary>
            Internal override  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CAdvancedDespeckle object</param>
        </member>
        <member name="M:IDRSNET.CAdvancedDespeckle.Despeckle(IDRSNET.CImage,System.UInt32,System.UInt32)">
            <summary>
            Despeckle removes all the groups of connected pixels with a number of pixels below the uiSpeckleMaxSize parameter.
            Those connected pixels are not removed if the distance to a larger connected component is below the uiDilate parameter.
            As a result only the isolated pixels get deleted.
            </summary>
            <remarks>Despeckling is only available for black and white images.</remarks>
            <pre>! IsNull ()</pre>
            <pre>! argImage.IsNull ()</pre>
            <pre>argImage.GetColorMode () == CImageProperties::BLACK_AND_WHITE</pre>
            <param name="argImage">The image to despeckle.</param>
            <param name="uiSpeckleMaxSize">The size of the speckles to remove, must be less than 20 pixels.</param>
            <param name="uiDilate">The dilatation, must be less than 20 pixels.</param>
        </member>
        <member name="M:IDRSNET.CAdvancedDespeckle.Despeckle(IDRSNET.CPage,System.UInt32,System.UInt32)">
            <summary>
            Despeckle removes all the groups of connected pixels with a number of pixels below the uiSpeckleMaxSize parameter.
            Those connected pixels are not removed if the distance to a larger connected component is below the uiDilate parameter.
            As a result only the isolated pixels get deleted.
            </summary>
            <remarks>Because despeckling is only available for black and white images, the page must have a black and white image.</remarks>
            <pre>! IsNull ()</pre>
            <pre>! argPage.IsNull ()</pre>
            <pre>argPage.IsBlackAndWhiteImageAvailable ()</pre>
            <param name="argPage">The page to despeckle.</param>
            <param name="uiSpeckleMaxSize">The size of the speckles to remove, must be less than 20 pixels.</param>
            <param name="uiDilate">The dilatation, must be less than 20 pixels.</param>
        </member>
        <member name="M:IDRSNET.CAdvancedDespeckle.Despeckle(IDRSNET.CImage,IDRSNET.IAdvancedDespeckleCallback,System.UInt32)">
            <summary>
            Despeckle removes all the groups of connected pixels selected by the given callback object.
            Those connected pixels are not removed if the distance to a larger connected component is below the uiDilate parameter.
            As a result only the isolated pixels get deleted.
            </summary>
            <remarks>Despeckling is only available for black and white images.</remarks>
            <pre>! IsNull ()</pre>
            <pre>! argImage.IsNull ()</pre>
            <pre>argImage.GetColorMode () == CImageProperties::BLACK_AND_WHITE</pre>
            <param name="argImage">The image to despeckle.</param>
            <param name="argAdvancedDespeckleCallback">The object selecting the pixels to remove.</param>
            <param name="uiDilate">The dilatation, must be less than 20 pixels.</param>
        </member>
        <member name="M:IDRSNET.CAdvancedDespeckle.Despeckle(IDRSNET.CPage,IDRSNET.IAdvancedDespeckleCallback,System.UInt32)">
            <summary>
            Despeckle removes all the groups of connected pixels selected by the given callback object.
            Those connected pixels are not removed if the distance to a larger connected component is below the uiDilate parameter.
            As a result only the isolated pixels get deleted.
            </summary>
            <remarks>Because despeckling is only available for black and white images, the page must have a black and white image.</remarks>
            <pre>! IsNull ()</pre>
            <pre>! argPage.IsNull ()</pre>
            <pre>argPage.IsBlackAndWhiteImageAvailable ()</pre>
            <param name="argPage">The page to despeckle.</param>
            <param name="argAdvancedDespeckleCallback">The object selecting the pixels to remove.</param>
            <param name="uiDilate">The dilatation, must be less than 20 pixels.</param>
        </member>
        <member name="P:IDRSNET.CAdvancedDespeckle.RemoveWhitePixels">
            <summary>
            SetRemoveWhitePixels offers white pixels removal.
            By default, despeckle removes black pixels. If bRemoveWhitePixels is IDRS_TRUE, the despeckle will remove white pixels rather than black pixels.
            
            </summary>
            
        </member>
        <member name="T:IDRSNET.CAttachment">
            <summary>
            CAttachment represent an attachment to add to an output PDF.
            </summary>
        </member>
        <member name="T:IDRSNET.CAttachment.AttachmentType">
            <summary>
            The AttachmentType enum lists the supported Pdf attachments file types.
            </summary>
        </member>
        <member name="F:IDRSNET.CAttachment.AttachmentType.TypeText">
            <summary>
            ! "*.txt" file attachment
            </summary>
        </member>
        <member name="F:IDRSNET.CAttachment.AttachmentType.TypePdf">
            <summary>
            ! "*.pdf" file attachment
            </summary>
        </member>
        <member name="F:IDRSNET.CAttachment.AttachmentType.TypeXml">
            <summary>
            ! "*.xml" file attachment
            </summary>
        </member>
        <member name="F:IDRSNET.CAttachment.AttachmentType.TypeHtml">
            <summary>
            ! "*.html" file attachment
            </summary>
        </member>
        <member name="F:IDRSNET.CAttachment.AttachmentType.TypeRtf">
            <summary>
            ! "*.rtf" file attachment
            </summary>
        </member>
        <member name="F:IDRSNET.CAttachment.AttachmentType.TypeDoc">
            <summary>
            ! "*.doc" file attachment
            </summary>
        </member>
        <member name="F:IDRSNET.CAttachment.AttachmentType.TypeDot">
            <summary>
            ! "*.dot" file attachment
            </summary>
        </member>
        <member name="F:IDRSNET.CAttachment.AttachmentType.TypeDocx">
            <summary>
            ! "*.docx" file attachment
            </summary>
        </member>
        <member name="F:IDRSNET.CAttachment.AttachmentType.TypeDotx">
            <summary>
            ! "*.dotx" file attachment
            </summary>
        </member>
        <member name="F:IDRSNET.CAttachment.AttachmentType.TypeXls">
            <summary>
            ! "*.xls" file attachment
            </summary>
        </member>
        <member name="F:IDRSNET.CAttachment.AttachmentType.TypeXlt">
            <summary>
            ! "*.xlt" file attachment
            </summary>
        </member>
        <member name="F:IDRSNET.CAttachment.AttachmentType.TypeXla">
            <summary>
            ! "*.xla" file attachment
            </summary>
        </member>
        <member name="F:IDRSNET.CAttachment.AttachmentType.TypeXlsx">
            <summary>
            ! "*.xlsx" file attachment
            </summary>
        </member>
        <member name="F:IDRSNET.CAttachment.AttachmentType.TypeXltx">
            <summary>
            ! "*.xltx" file attachment
            </summary>
        </member>
        <member name="F:IDRSNET.CAttachment.AttachmentType.TypeCsv">
            <summary>
            ! "*.csv" file attachment
            </summary>
        </member>
        <member name="F:IDRSNET.CAttachment.AttachmentType.TypePpt">
            <summary>
            ! "*.ppt" file attachment
            </summary>
        </member>
        <member name="F:IDRSNET.CAttachment.AttachmentType.TypePptx">
            <summary>
            ! "*.pptx" file attachment
            </summary>
        </member>
        <member name="F:IDRSNET.CAttachment.AttachmentType.TypePot">
            <summary>
            ! "*.pot" file attachment
            </summary>
        </member>
        <member name="F:IDRSNET.CAttachment.AttachmentType.TypePotx">
            <summary>
            ! "*.potx" file attachment
            </summary>
        </member>
        <member name="F:IDRSNET.CAttachment.AttachmentType.TypePps">
            <summary>
            ! "*.pps" file attachment
            </summary>
        </member>
        <member name="F:IDRSNET.CAttachment.AttachmentType.TypePpa">
            <summary>
            ! "*.ppa" file attachment
            </summary>
        </member>
        <member name="F:IDRSNET.CAttachment.AttachmentType.TypeJpeg">
            <summary>
            ! "*.jpg" file attachment
            </summary>
        </member>
        <member name="F:IDRSNET.CAttachment.AttachmentType.TypePng">
            <summary>
            ! "*.png" file attachment
            </summary>
        </member>
        <member name="F:IDRSNET.CAttachment.AttachmentType.TypeTiff">
            <summary>
            ! "*.tif" and "*.tiff" file attachment
            </summary>
        </member>
        <member name="F:IDRSNET.CAttachment.AttachmentType.TypeGif">
            <summary>
            ! "*.gif" file attachment
            </summary>
        </member>
        <member name="F:IDRSNET.CAttachment.AttachmentType.TypeAppSpecific">
            <summary>
            ! Non-standard application specific attachment
            </summary>
        </member>
        <member name="M:IDRSNET.CAttachment.#ctor(System.String,IDRSNET.CAttachment.AttachmentType,System.String,System.Boolean)">
            <summary>
            Create a CAttachment object from a file path.
            </summary>
            <param name="strAttachFileName">The name of the file to attach, as it will appear in the output PDF.</param>
            <remarks>A period should be used to separate the base file name from the file extension.</remarks>
            <param name="evAttachmentType">The type of the attachment</param>
            <param name="strFilePath">Path to the file to attach</param>
            <param name="bCopyContent">If true, the file's content will be copied at object's creation; otherwise it will be</param>
            <remarks>read only during the call to CDocumentOutput::Save().</remarks>
        </member>
        <member name="M:IDRSNET.CAttachment.#ctor(System.String,IDRSNET.CAttachment.AttachmentType,System.IO.Stream,System.Boolean)">
            <summary>
            Create a CAttachment object from a stream.
            </summary>
            <param name="strAttachFileName">The name of the file to attach, as it will appear in the output PDF.</param>
            <remarks>A period should be used to separate the base file name from the file extension.</remarks>
            <param name="evAttachmentType">The type of the attachment</param>
            <param name="argStream">The content of the file to attach</param>
            <param name="bCopyContent">If true, the stream's content will be copied at object's creation; otherwise it will be</param>
            <remarks>read only during the call to CDocumentOutput::Save().</remarks>
        </member>
        <member name="M:IDRSNET.CAttachment.Finalize">
            <summary>
            Destructor of CAttachment.
            </summary>
        </member>
        <member name="M:IDRSNET.CAttachment.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CAttachment.GetPointer">
            <summary>
            Internal virtual  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CAttachment.SetPointer(System.IntPtr)">
            <summary>
            Internal virtual  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CAttachment object</param>
        </member>
        <member name="T:IDRSNET.CAttachmentsList">
            <summary>
            CAttachmentsList groups all attachments that should be added to an output document.
            </summary>
        </member>
        <member name="M:IDRSNET.CAttachmentsList.#ctor">
            <summary>
            Create Creates a CAttachmentsList object.
            </summary>
        </member>
        <member name="M:IDRSNET.CAttachmentsList.Finalize">
            <summary>
            Destructor of CAttachmentsList.
            </summary>
        </member>
        <member name="M:IDRSNET.CAttachmentsList.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CAttachmentsList.GetPointer">
            <summary>
            Internal virtual  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CAttachmentsList.SetPointer(System.IntPtr)">
            <summary>
            Internal virtual  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CAttachmentsList object</param>
        </member>
        <member name="M:IDRSNET.CAttachmentsList.Add(IDRSNET.CAttachment)">
            <summary>
            Add an attachment to the list.
            </summary>
            <param name="argAttachment">The attachment to add.</param>
        </member>
        <member name="M:IDRSNET.CAttachmentsList.GetAt(System.UInt32)">
            <summary>
            GetAt returns the attachment stored at the provided index.
            </summary>
            <param name="uiIndex">The index of the attachment to return</param>
            <returns>The attachment</returns>
        </member>
        <member name="M:IDRSNET.CAttachmentsList.RemoveAt(System.UInt32)">
            <summary>
            RemoveAt removes from the list the attachment at the provided index.
            </summary>
            <param name="uiIndex">The index of the attachment to remove</param>
        </member>
        <member name="M:IDRSNET.CAttachmentsList.RemoveAll">
            <summary>
            RemoveAll removes all attachments from the list
            </summary>
        </member>
        <member name="P:IDRSNET.CAttachmentsList.Count">
            <summary>
            GetCount returns the number of attachments stored in the list.
            
            </summary>
            
        </member>
        <member name="T:IDRSNET.CBarcodeContext">
            <summary>
            The CBarcodeContext class manages a barcode recognition context.
            \ingroup module_barcode
            A barcode recognition context is a set of parameters used by the barcode engine to process images:
            - global processing flag,
            - work depth,
            - minimum and maximum barcode height,
            - slanted barcode detection,
            - the barcode types to look for.
            The global processing flag must be set to:
            - IDRS_TRUE for flatbed scanners,
            - IDRS_FALSE for pen canners (such as the IRISPen).
            The work depth depends on the document quality:
            - 0 means faster processing of well-printed (and scanned) barcodes,
            - 100 means slower processing of low-quality barcodes.
            Barcode size limits help to:
            - avoid invalid barcode detection.
            - decrease processing time.
            If the slanted barcode detection is enable, iDRS tries to detected slanted barcodes.
            Because this detection is time consuming, the default value is IDRS_FALSE.
            iDRS also accepts advanced barcode parameters. They can be set barcode type per barcode type:
            - minimum and maximum number of symbols,
            - barcode directions,
            - partial barcode detection.
            If the partial barcode detection flag is set, iDRS also retrieves partial barcodes.
            When more than one barcode type is enable and a barcode may be recognized by different algorithms (with possible different solutions),
            the barcode is rejected except when:
            - If it is recognized as EAN 13 and UPC-A: the UPC-A is output
            - If it is recognized as code 128 and UCC 128: the UCC 128 is output
            - If it is recognized as MSI and MSIPH: the MSIPH is output
            - If it is recognized as code 39 and code 39 extended: the code 39 extended is output
            - If it is recognized as code 39 HIBC and code 39 or code 39 extended: the code 39 HIBC is output
            - If it is recognized as UPC-E and UPC-E extended: the UPC-E is output
            \req IDRS::IDRS_MODULE_BARCODE
            <see cref="T:IDRSNET.IDRS_BARCODE_TYPE"/> The barcode types supported by iDRS.
            The default recognition parameters.
            <see cref="T:IDRSNET.IDRS_BARCODE_DIRECTION"/> iDRS barcode detection direction flags.
            <see cref="F:IDRSNET.IDRS_MODULE.IDRS_MODULE_BARCODE"/> 
            </summary>
        </member>
        <member name="M:IDRSNET.CBarcodeContext.#ctor">
            <summary>
            Create creates a barcode recognition context.
            The context is initialized to detect all recommended barcode types allowed by the licenses,
            appart from QR code and datamatrix types which are not enabled by default.
            </summary>
        </member>
        <member name="M:IDRSNET.CBarcodeContext.#ctor(IDRSNET.IDRS_BARCODE_TYPE)">
            <summary>
            Create creates a barcode recognition context to recognize the given barcode type.
            For custom barcode types please use the Create method that receives IDRS_CUSTOM_BARCODE_TYPE as parameter
            </summary>
            <pre>evBarcodeType &lt; IDRS_BARCODE_COUNT</pre>
            <param name="evBarcodeType">The barcode type to recognize.</param>
            iDRS barcode types.
            <remarks>
            If a non-valid barcode type is provided, it will not be set in the context. IDRS_BARCODE_NONE
            and IDRS_BARCODE_COUNT are not considered as valid barcode types.
            </remarks>
        </member>
        <member name="M:IDRSNET.CBarcodeContext.#ctor(IDRSNET.IDRS_BARCODE_TYPE,System.UInt32)">
            <summary>
            Create creates a barcode recognition context to recognize the given barcode type.
            </summary>
            <param name="evBarcodeType">The barcode type to recognize.</param>
            <param name="uiCustomBarcodeType">Custom barcode type. Valid only if btBarcodeType is set to IDRS_BARCODE_CUSTOM</param>
            <pre>evBarcodeType != IDRS_BARCODE_CUSTOM || uiCustomBarcodeType != IDRS_CUSTOM_BARCODE_TYPE_RESERVED</pre>
            iDRS barcode types.
            <remarks>
            Please note that custom barcode types are only implemented by custom barcode engine.
            Make sure that such an engine is registered in CBarcodeEngineManager and it is also enabled in detailed barcode parameters.
            </remarks>
        </member>
        <member name="M:IDRSNET.CBarcodeContext.#ctor(IDRSNET.IDRS_BARCODE_TYPE[])">
            <summary>
            Create creates a barcode recognition context to recognize the given barcode types.
            </summary>
            <pre>uiBarcodeTypesCount > 0</pre>
            <param name="xuiBarcodeTypes">An array containing the barcode types to recognize.</param>
            iDRS barcode types.
            <remarks>
            If a non-valid barcode type is present in the array, it will not be set in the context. IDRS_BARCODE_NONE
            and IDRS_BARCODE_COUNT are not considered as valid barcode types.
            </remarks>
        </member>
        <member name="M:IDRSNET.CBarcodeContext.Finalize">
            <summary>
            Destructor of CBarcodeContext.
            </summary>
        </member>
        <member name="M:IDRSNET.CBarcodeContext.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CBarcodeContext.GetPointer">
            <summary>
            Internal override  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CBarcodeContext.SetPointer(System.IntPtr)">
            <summary>
            Internal override  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CBarcodeContext object</param>
        </member>
        <member name="M:IDRSNET.CBarcodeContext.SetBarcodeType(IDRSNET.IDRS_BARCODE_TYPE,System.UInt32)">
            <summary>
            SetBarcodeType sets the barcode type to look for. The function also allows setting a custom barcode type.
            In order to set a custom barcode type, parameter evBarcodeType must be set to IDRS_BARCODE_CUSTOM.
            </summary>
            <pre>! IsNull ()</pre>
            <pre>evBarcodeType &lt; IDRS_BARCODE_COUNT</pre>
            <param name="evBarcodeType">The barcode type to recognize.</param>
            <param name="uiCustomBarcodeType">The barcode custom type to recognize. Valid only when evBarcodeType is set to IDRS_BARCODE_CUSTOM</param>
            <pre>evBarcodeType != IDRS_BARCODE_CUSTOM || uiCustomBarcodeType != IDRS_CUSTOM_BARCODE_TYPE_RESERVED</pre>
            iDRS barcode types.
            <remarks>
            If the provided value is IDRS_BARCODE_NONE, all recommended barcode types allowed by the licenses,
            apart from QR Code and Datamatrix types, are set for recognition.
            </remarks>
        </member>
        <member name="M:IDRSNET.CBarcodeContext.SetBarcodeSize(System.UInt32,System.UInt32)">
            <summary>
            Sets the barcode size limits.
            Barcode size limits helps to:
            - avoid invalid barcode detection.
            - decrease processing time.
            </summary>
            <pre>! IsNull ()</pre>
            <pre>uiMinHeight &lt;= uiMaxHeight</pre>
            <param name="uiMinHeight">The minimum barcode height (in pixels), 0 for automatic.</param>
            <param name="uiMaxHeight">The maximum barcode height (in pixels), 0 for automatic.</param>
        </member>
        <member name="M:IDRSNET.CBarcodeContext.SetTypeParameters(IDRSNET.IDRS_BARCODE_TYPE,IDRSNET.CIDRSBarcodeAdvancedParameters)">
            <summary>
            SetTypeParameters sets advanced parameters for the given barcode type.
            </summary>
            <remarks>The given barcode type must have been enabled before.</remarks>
            <pre>! IsNull ()</pre>
            <param name="uiBarcodeType">The barcode type.</param>
            <param name="argBarcodeAdvancedParameters">The parameters.</param>
            The default barcode recognition parameters.
            <remarks>
            If the provided barcode type is IDRS_BARCODE_NONE, the advanced parameters are set for all barcode
            types currently enabled.
            </remarks>
        </member>
        <member name="M:IDRSNET.CBarcodeContext.SetTypeParameters(IDRSNET.IDRS_BARCODE_TYPE,System.UInt32,IDRSNET.CIDRSBarcodeAdvancedParameters)">
            <summary>
            SetTypeParameters sets advanced parameters for the given barcode type.
            </summary>
            <remarks>The given barcode type must have been enabled before.</remarks>
            <pre>! IsNull ()</pre>
            <param name="evBarcodeType">The barcode type.</param>
            <param name="uiCustomBarcodeType">The custom barcode type to recognize. Valid only when evBarcodeType is set to IDRS_BARCODE_CUSTOM</param>
            <param name="argBarcodeAdvancedParameters">The parameters.</param>
            The default barcode recognition parameters.
            <remarks>
            If the provided barcode type is IDRS_BARCODE_NONE, the advanced parameters are set for all barcode
            types currently enabled.
            </remarks>
        </member>
        <member name="M:IDRSNET.CBarcodeContext.GetBarcodeSize(System.UInt32@,System.UInt32@)">
            <summary>
            GetBarcodeSize outputs the minimum and maximum size of the barcodes that are taken into account by the barcode recognition engine
            </summary>
            <param name="refuiMinHeight">Reference to the minimum height of the barcode</param>
            <param name="refuiMaxHeight">Reference to the maximum height of the barcode</param>
        </member>
        <member name="M:IDRSNET.CBarcodeContext.GetTypeParameters(IDRSNET.IDRS_BARCODE_TYPE,IDRSNET.CIDRSBarcodeAdvancedParameters)">
            <summary>
            GetTypeParameters outputs the advanced parameters set for a specific barcode type
            </summary>
            <param name="uiBarcodeType">The barcode type for which the advanced recognition parameters should be returned</param>
            <param name="argBarcodeAdvancedParameters">Reference to a IDRS_BARCODE_ADVANCED_PARAMETERS structure that will</param>
            <remarks>be filled with the advanced recognition parameters information</remarks>
            <returns>IDRS_TRUE if the advanced recognition parameters have been retrieved, IDRS_FALSE otherwise (if the</returns>
            <remarks>provided barcode type is not valid or if it is not enabled)</remarks>
        </member>
        <member name="M:IDRSNET.CBarcodeContext.GetTypeParameters(IDRSNET.IDRS_BARCODE_TYPE,System.UInt32,IDRSNET.CIDRSBarcodeAdvancedParameters)">
            <summary>
            GetTypeParameters outputs the advanced parameters set for a specific barcode type
            </summary>
            <param name="evBarcodeType">The barcode type for which the advanced recognition parameters should be returned</param>
            <param name="uiCustomBarcodeType">The custom barcode type to recognize. Valid only when evBarcodeType is set to IDRS_BARCODE_CUSTOM</param>
            <param name="argBarcodeAdvancedParameters">Reference to a IDRS_BARCODE_ADVANCED_PARAMETERS structure that will</param>
            <remarks>be filled with the advanced recognition parameters information</remarks>
            <returns>IDRS_TRUE if the advanced recognition parameters have been retrieved, IDRS_FALSE otherwise (if the</returns>
            <remarks>provided barcode type is not valid or if it is not enabled)</remarks>
        </member>
        <member name="M:IDRSNET.CBarcodeContext.GetDefaultAdvancedParameters(IDRSNET.CIDRSBarcodeAdvancedParameters)">
            <summary>
            GetDefaultAdvancedParameters initializes the given advanced parameters structure to the default values.
            </summary>
            <param name="argBarcodeAdvancedParameters">The structure to initialize.</param>
        </member>
        <member name="M:IDRSNET.CBarcodeContext.Clone">
            <summary>
            Clone creates an identical CBarcodeContext object
            It preforms a deep copy of all the information in the supplied CBarcodeContext to internal structures
            </summary>
        </member>
        <member name="M:IDRSNET.CBarcodeContext.GetInternalParameters(System.IntPtr)">
            <summary>
            Gets the internal parameters for barcode processing.
            </summary>
            <remarks>Internal use only</remarks>
            <param name="pvInternalParameters">Pointer to the internal parameters.</param>
        </member>
        <member name="M:IDRSNET.CBarcodeContext.GetRecommendedBarcodeTypes">
            <summary>
            Gets a CBarcodeSet object populated with the barcode types recommended
            for most barcode recognition workflows.
            </summary>
            <returns>The set of recommended barcode types.</returns>
        </member>
        <member name="P:IDRSNET.CBarcodeContext.BarcodeType">
            <summary>
            SetBarcodeType sets the barcode types to look for.
            
            </summary>
            <remarks>
            If the provided value is IDRS_BARCODE_NONE, all recommended barcode types allowed by the licenses,
            apart from QR Code and Datamatrix types, are set for recognition.
            </remarks>
            <pre> ! IsNull ()
            uiBarcodeType &lt; IDRS_BARCODE_COUNT </pre>
        </member>
        <member name="P:IDRSNET.CBarcodeContext.BarcodeTypes">
            <summary>
            SetBarcodeTypes sets the barcode types to look for.
            
            </summary>
            <remarks>
            If a non-valid barcode type is present in the array, it will not be set in the context. IDRS_BARCODE_NONE
            and IDRS_BARCODE_COUNT are not considered as valid barcode types.
            </remarks>
            <pre> ! IsNull ()
            uiBarcodeTypesCount > 0 </pre>
        </member>
        <member name="P:IDRSNET.CBarcodeContext.InternalParameters">
            <summary>
            Sets the internal parameters for barcode processing.
            
            </summary>
            <remarks>Internal use only</remarks>
        </member>
        <member name="P:IDRSNET.CBarcodeContext.DetailedBarcodeParameters">
            <summary>
            Get/Set the fine grained barcode parameters for barcode recognition process
            The parameters that can be set using this class are:
            - enabled engines
            - engine priority
            - enabled barcode types for each engine
            - confidence threshold values for each engine
            - workdepth range for each engine
            </summary>
            <remarks>
            Please note that the returned object is still referencing the internal settings.
            Changing the returned object will have an impact on the CBarcodeContext and the barcode recognition process it is used for.
            </remarks>
        </member>
        <member name="P:IDRSNET.CBarcodeContext.DetectSlantedBarcodes">
            <summary>
            Get/Set the slanted barcode detection on or off.
            If the slanted barcode detection is enable, iDRS also looks for slanted barcode, increasing the processing time.
            </summary>
            <remarks>Default value is IDRS_FALSE.</remarks>
            <pre> ! IsNull () </pre>
        </member>
        <member name="P:IDRSNET.CBarcodeContext.GlobalProcessing">
            <summary>
            Get/Set the global processing flag.
            </summary>
            <remarks>
            The global processing flag must be set to:
            - IDRS_TRUE for flatbed scanners,
            - IDRS_FALSE for pen canners (such as the IRISPen).
            </remarks>
            <pre> ! IsNull () </pre>
        </member>
        <member name="P:IDRSNET.CBarcodeContext.BarcodeSet">
            <summary>
            Get/Set the provided barcode set, creating a copy into the current barcode set
            </summary>
            
        </member>
        <member name="P:IDRSNET.CBarcodeContext.WorkDepth">
            <summary>
            Sets the barcode recognition processing work depth
            
            </summary>
            <remarks>
            - 0 means faster processing of well-printed (and scanned) barcodes,
            - 100 means slower processing of low-quality barcodes.
            Providing a value larger than 100 would set the work depth to the maximum value (100).
            </remarks>
        </member>
        <member name="T:IDRSNET.IDRS_BARCODE_ENGINE_PRIORITY_CHANGE">
            <summary>
            Enumeration allowing to modify priority of the barcode recognition engines
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_BARCODE_ENGINE_PRIORITY_CHANGE.IDRS_BARCODE_ENGINE_PRIORITY_INCREASE">
            <summary>
            ! Increase priority - the engine will be used with higher priority than others
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_BARCODE_ENGINE_PRIORITY_CHANGE.IDRS_BARCODE_ENGINE_PRIORITY_DECREASE">
            <summary>
            ! Decrease priority - the engine will be used with lower priority than others
            </summary>
        </member>
        <member name="T:IDRSNET.IDRS_BARCODE_ENGINE_ON_ERROR_BEHAVIOUR">
            <summary>
            Enumeration allowing to set the behaviour in case of error during barcode recognition
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_BARCODE_ENGINE_ON_ERROR_BEHAVIOUR.IDRS_BARCODE_ENGINE_ON_ERROR_IGNORE">
            <summary>
            ! On error in a specific barcode engine, keep the results, ignore the error.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_BARCODE_ENGINE_ON_ERROR_BEHAVIOUR.IDRS_BARCODE_ENGINE_ON_ERROR_RAISE_EXCEPTION">
            <summary>
            ! On error in a specific barcode engine, raise an exception and abort.
            </summary>
        </member>
        <member name="T:IDRSNET.IDRS_BARCODE_AUTOMATIC_ENCODING_DETECTION">
            <summary>
            Enumeration defining different types of encoding to be automatically detected
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_BARCODE_AUTOMATIC_ENCODING_DETECTION.IDRS_BARCODE_AUTOMATIC_ENCODING_DETECTION_UTF8">
            <summary>
            ! Automatically detect UTF-8 encoding
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_BARCODE_AUTOMATIC_ENCODING_DETECTION.IDRS_BARCODE_AUTOMATIC_ENCODING_DETECTION_SJIS">
            <summary>
            ! Automatically detect SJIS encoding
            </summary>
        </member>
        <member name="T:IDRSNET.CBarcodeDetailedParameters">
            <summary>
            CBarcodeDetailedParameters contains the advanced parameters for the barcode recognition process.
            The parameters are:
            - enabled engines
            - engine priority
            - enabled barcode types for each engine
            - confidence threshold values for each engine
            - workdepth range for each engine
            - behaviour in case of error
            </summary>
        </member>
        <member name="M:IDRSNET.CBarcodeDetailedParameters.#ctor">
            <summary>
            Create instantiates a new object of type CBarcodeDetailedParameters and initializes it with the default parameters
            </summary>
            <returns>the newly created object</returns>
        </member>
        <member name="M:IDRSNET.CBarcodeDetailedParameters.Finalize">
            <summary>
            Destructor of CBarcodeDetailedParameters.
            </summary>
        </member>
        <member name="M:IDRSNET.CBarcodeDetailedParameters.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CBarcodeDetailedParameters.GetPointer">
            <summary>
            Internal virtual  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CBarcodeDetailedParameters.SetPointer(System.IntPtr)">
            <summary>
            Internal virtual  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CBarcodeDetailedParameters object</param>
        </member>
        <member name="M:IDRSNET.CBarcodeDetailedParameters.EnableBarcodeEngine(System.UInt32,System.Boolean)">
            <summary>
            EnableBarcodeEngine enables or disables a barcode engine
            </summary>
            <param name="uiBarcodeEngine">Barcode engine identifier</param>
            <param name="bEnable">Boolean flag specifying whether to enable or disable a barcode engine</param>
        </member>
        <member name="M:IDRSNET.CBarcodeDetailedParameters.IsBarcodeEngineEnabled(System.UInt32)">
            <summary>
            IsBarcodeEngineEnabled verifies if the supplied barcode engine is enabled or not
            </summary>
            <param name="uiBarcodeEngine">Barcode engine</param>
            <returns>IDRS_TRUE if the barcode engine is enabled, IDRS_FALSE otherwise</returns>
        </member>
        <member name="M:IDRSNET.CBarcodeDetailedParameters.SetWorkDepthRange(System.UInt32,System.Byte,System.Byte)">
            <summary>
            Sets the work depth range for which the engine will be working.
            The range of accepted values is [0, 100]. Any value larger than 100 will be truncated to 100.
            The values are inclusive.
            </summary>
            <param name="uiBarcodeEngine">Barcode engine unique identifier</param>
            <param name="ucMinWorkDepth">Minimun work depth</param>
            <param name="ucMaxWorkDepth">Maximum work depth</param>
        </member>
        <member name="M:IDRSNET.CBarcodeDetailedParameters.GetWorkDepthRange(System.UInt32,System.Byte@,System.Byte@)">
            <summary>
            Gets the work depth range for the specified engine.
            </summary>
            <param name="uiBarcodeEngine">Barcode engine unique identifier</param>
            <param name="rucMinWorkDepth">Minimun work depth</param>
            <param name="rucMaxWorkDepth">Maximum work depth</param>
        </member>
        <member name="M:IDRSNET.CBarcodeDetailedParameters.SetSpecificWorkDepth(System.UInt32,System.Byte)">
            <summary>
            Sets a specific work depth for an engine.
            In case the specific work depth for a barcode engine needs to be disabled, a call with IDRS_BARCODE_SPECIFIC_WORKDEPTH_DISABLED as new work depth
            would disable it for the specified barcode engine
            This feature is expected to be used when a barcode engine needs to have a different work depth than the others.
            Ex: a barcode engine might take too long to process images when using the maximum work depth.
            Setting a lower work depth only for this specific engine might cause other engines to recognize less barcodes.
            This feature allows to set a specific work depth for the slow barcode engine, while all the others use the one provided by CBarcodeContext
            </summary>
            <param name="uiBarcodeEngine">Barcode engine identifier</param>
            <param name="ucWorkDepth">Specific work depth value</param>
        </member>
        <member name="M:IDRSNET.CBarcodeDetailedParameters.GetSpecificWorkDepth(System.UInt32)">
            <summary>
            Gets the specific work depth set for a barcode engine.
            If the specific work depth has not been set for an engine, the default value IDRS_BARCODE_SPECIFIC_WORKDEPTH_DISABLED will be returned
            </summary>
            <param name="uiBarcodeEngine">Barcode engine identifier</param>
            <returns>Specific work depth value, if set.</returns>
            <returns>IDRS_BARCODE_SPECIFIC_WORKDEPTH_DISABLED if no specific value is set</returns>
        </member>
        <member name="M:IDRSNET.CBarcodeDetailedParameters.HasSpecificWorkDepth(System.UInt32)">
            <summary>
            HasSpecificWorkDepth checks if a specific work depth value has been set for an engine
            </summary>
            <param name="uiBarcodeEngine">Barcode engine identifier</param>
            <returns>IDRS_TRUE if a specific work depth has been set</returns>
            <returns>IDRS_FALSE if a specific work depth has not been set</returns>
        </member>
        <member name="M:IDRSNET.CBarcodeDetailedParameters.ModifyEnginePriority(System.UInt32,IDRSNET.IDRS_BARCODE_ENGINE_PRIORITY_CHANGE)">
            <summary>
            Increases or decreases the barcode recognition engine priority.
            Changing the priority of an engine will affect the others' engine priority.
            </summary>
            <param name="uiBarcodeEngine">Barcode recognition engine identifier</param>
            <param name="bepPriorityChange">Priority change</param>
        </member>
        <member name="M:IDRSNET.CBarcodeDetailedParameters.GetEnginePriority(System.UInt32)">
            <summary>
            Gets the engine priority level.
            </summary>
            <param name="uiBarcodeEngine">Barcode recognition engine identifier</param>
            <returns>The engine priority</returns>
        </member>
        <member name="M:IDRSNET.CBarcodeDetailedParameters.EnableBarcodeTypeForEngine(System.UInt32,IDRSNET.IDRS_BARCODE_TYPE,System.UInt32,System.Boolean)">
            <summary>
            EnableBarcodeTypeForEngine enables a barcode type for an engine
            If the barcode recognition engine does not support the supplied barcode type, there won't be any modification
            </summary>
            <param name="uiBarcodeEngine">Barcode recognition engine identifier</param>
            <param name="evBarcodeType">Barcode type</param>
            <param name="uiCustomBarcodeType">Custom barcode type. Valid only if evBarcodeType is IDRS_BARCODE_CUSTOM</param>
            <param name="bEnabled">Boolean flag specifying whether the barcode type should be enabled or not</param>
        </member>
        <member name="M:IDRSNET.CBarcodeDetailedParameters.IsBarcodeTypeForEngineEnabled(System.UInt32,IDRSNET.IDRS_BARCODE_TYPE,System.UInt32)">
            <summary>
            IsBarcodeTypeForEngineEnabled checks if a barcode type is enabled for an engine
            </summary>
            <param name="uiBarcodeEngine">Barcode recognition engine identifier</param>
            <param name="evBarcodeType">Barcode type</param>
            <param name="uiCustomBarcodeType">Custom barcode type. Valid only if evBarcodeType is IDRS_BARCODE_CUSTOM</param>
            <returns>IDRS_TRUE if the supplied barcode type is enabled,</returns>
            <remarks>If the barcode recognition engine does not support the supplied barcode type, the result will be IDRS_FALSE</remarks>
        </member>
        <member name="M:IDRSNET.CBarcodeDetailedParameters.SetEngineConfidenceThresholdForBarcodeType(System.UInt32,IDRSNET.IDRS_BARCODE_TYPE,System.UInt32,System.Byte)">
            <summary>
            Sets the minimum confidence level for which a barcode type is recognized with an engine.
            If the barcode recognition engine does not support the supplied barcode type, there won't be any modification
            </summary>
            <param name="uiBarcodeEngine">Barcode recognition engine identifier</param>
            <param name="evBarcodeType">Barcode type</param>
            <param name="uiCustomBarcodeType">Custom barcode type. Valid only if evBarcodeType is IDRS_BARCODE_CUSTOM</param>
            <param name="ucThreshold">Value containing the threshold confidence level</param>
        </member>
        <member name="M:IDRSNET.CBarcodeDetailedParameters.GetEngineConfidenceThresholdForBarcodeType(System.UInt32,IDRSNET.IDRS_BARCODE_TYPE,System.UInt32)">
            <summary>
            Gets the confidence threshold level for a barcode type on a barcode engine.
            </summary>
            <param name="uiBarcodeEngine">Barcode recognition engine identifier</param>
            <param name="evBarcodeType">Barcode type</param>
            <param name="uiCustomBarcodeType">Custom barcode type. Valid only if evBarcodeType is IDRS_BARCODE_CUSTOM</param>
            <returns>the threshold value for the supplied engine and barcode type</returns>
            <remarks>If the barcode recognition engine does not support the supplied barcode type, the result will be 0</remarks>
        </member>
        <member name="M:IDRSNET.CBarcodeDetailedParameters.CompareEnginePriorities(System.UInt32,System.UInt32)">
            <summary>
            CompareEnginePriorities compares 2 engine by priority
            </summary>
            <param name="eLeftEngine">Engine 1</param>
            <param name="eRightEngine">Engine 2</param>
            <returns>IDRS_TRUE if priority of eLeftEngine is higher than eRightEngine, IDRS_FALSE otherwise</returns>
            <remarks>Note: higher priority => lower priority value</remarks>
        </member>
        <member name="M:IDRSNET.CBarcodeDetailedParameters.Clone">
            <summary>
            Clone creates an identical CBarcodeDetailedParameters object.
            It preforms a deep copy of all the information in the supplied CBarcodeDetailedParameters to internal structures.
            </summary>
        </member>
        <member name="M:IDRSNET.CBarcodeDetailedParameters.IsEngineUsedForRecognition(System.UInt32,IDRSNET.CBarcodeContext)">
            <summary>
            UseEngineForRecognition performs the necessary verifications to see if an barcode engine should be used for recognition in the current context
            The method performs the following verifications:
            - barcode engine is enabled
            - barcode extension is enabled, if the barcode engine requires a particular extension to run
            - work depth
            - at least on of the enabled barcode types is valid for the barcode engine
            </summary>
            <param name="uiBarcodeEngine">Barcode engine identifier</param>
            <param name="argBarcodeContext">Barcode context</param>
            <returns>IDRS_TRUE if the barcode engine can be used, IDRS_FALSE otherwise</returns>
        </member>
        <member name="M:IDRSNET.CBarcodeDetailedParameters.GetEngineWithPriorityIndex(System.UInt32)">
            <summary>
            Gets the IDRS_BARCODE_ENGINE_IDENTIFIER which matched the supplied priority index.
            This function takes into consideration the fact that some barcode engines might be disabled.
            The function orders the barcode engines based on priority and returns the one with the supplied index
            If no engine is found with the supplied priority, an exception is raised
            </summary>
            <param name="uiEnginePriority">Engine priority</param>
            <returns>barcode engine identifier</returns>
        </member>
        <member name="M:IDRSNET.CBarcodeDetailedParameters.SetEngineExtraOperations(System.UInt32,IDRSNET.CBarcodeEngineExtraOperationsSet)">
            <summary>
            Sets the extra engine operations for a barcode engine.
            The operations are of 2 types:
            - preprocessing: will be executed before any recognition. These operations can change the input image
            - postprocessing: will be executed after recognition. These operations can change the output results
            </summary>
            <param name="uiBarcodeEngine">Barcode engine identifier</param>
            <param name="argBarcodeExtraOperations">Object containing the extra operations</param>
        </member>
        <member name="M:IDRSNET.CBarcodeDetailedParameters.GetEngineExtraOperations(System.UInt32,IDRSNET.CBarcodeEngineExtraOperationsSet)">
            <summary>
            Gets the object containing the extra operations to be applied for a barcode engine.
            </summary>
            <param name="uiBarcodeEngine">Barcode engine identifier</param>
            <param name="rargBarcodeExtraOperations">Reference to an CBarcodeEngineExtraOperationsSet object that will be updated</param>
            <returns>IDRS_TRUE if there are some extra operations set for the specified barcode engine, IDRS_FALSE otherwise</returns>
        </member>
        <member name="M:IDRSNET.CBarcodeDetailedParameters.SetProcessingTimeoutForEngine(System.UInt32,System.UInt32)">
            <summary>
            Sets the processing timeout for an engine.
            When the timeout interval expires, the processing is interrupted.
            If the engine reported any barcode result until the processing was interrupted, the results will be reported in the output results
            By default each engine has a timeout set to IDRS_DEFAULT_BARCODE_PROCESSING_TIMEOUT_MILLISECONDS (unlimited)
            </summary>
            <param name="uiBarcodeEngine">Barcode engine identifier</param>
            <param name="uiTimeoutMilliseconds">Number of milliseconds for the timeout</param>
        </member>
        <member name="M:IDRSNET.CBarcodeDetailedParameters.GetProcessingTimeoutForEngine(System.UInt32)">
            <summary>
            Gets the processing timeout for an engine.
            </summary>
            <param name="uiBarcodeEngine">Barcode engine identifier</param>
            <returns>Number of milliseconds used for timeout. Please note that value 0 is representing unlimited timeout (IDRS_BARCODE_PROCESSING_TIMEOUT_UNLIMITED)</returns>
        </member>
        <member name="M:IDRSNET.CBarcodeDetailedParameters.SetEngineBarcodesSpecificOptions(System.UInt32,IDRSNET.CBarcodeSpecificOptions)">
            <summary>
            Sets specific options for a given engine.
            </summary>
            <param name="uiBarcodeEngine">Barcode engine identifier</param>
            <param name="argBarcodeSpecificOptions">specific options object</param>
        </member>
        <member name="M:IDRSNET.CBarcodeDetailedParameters.RemoveAllEngineBarcodesSpecificOptions(System.UInt32)">
            <summary>
            RemoveAllEngineBarcodesSpecificOptions removes all specific options for a given engine
            </summary>
            <param name="uiBarcodeEngine">Barcode engine identifier</param>
            <returns>IDRS_TRUE when success, IDRS_FALSE if the engine doesn't have specific options</returns>
        </member>
        <member name="M:IDRSNET.CBarcodeDetailedParameters.GetEngineBarcodeSpecificOptionsCount(System.UInt32)">
            <summary>
            Gets specific options count for the given barcode engine.
            </summary>
            <param name="uiBarcodeEngine">Barcode engine identifier</param>
            <returns>specific options count for the given barcode engine</returns>
        </member>
        <member name="M:IDRSNET.CBarcodeDetailedParameters.GetEngineBarcodeSpecificOptionsAt(System.UInt32,System.UInt32)">
            <summary>
            Gets a specific options for the given barcode engine at a given index.
            </summary>
            <param name="uiBarcodeEngine">Barcode engine identifier</param>
            <param name="uiIndex">index</param>
            <returns>specific options for the given barcode engine at the given index if it exist otherwise it returns NULL</returns>
        </member>
        <member name="M:IDRSNET.CBarcodeDetailedParameters.SetAutomaticEncodingDetection(IDRSNET.IDRS_BARCODE_AUTOMATIC_ENCODING_DETECTION,System.Boolean)">
            <summary>
            Sets an encoding type automatic detection status.
            By default utf8 is set to IDRS_TRUE, SJIS to IDRS_FALSE
            </summary>
            <param name="eEncodingType">encoding type</param>
            <param name="bEnable">enable value</param>
        </member>
        <member name="M:IDRSNET.CBarcodeDetailedParameters.GetAutomaticEncodingDetectionStatus(IDRSNET.IDRS_BARCODE_AUTOMATIC_ENCODING_DETECTION)">
            <summary>
            Gets the given encoding type automatic detection status.
            </summary>
            <param name="eEncodingType">encoding type</param>
            <returns>the encoding type automatic detection status</returns>
        </member>
        <member name="P:IDRSNET.CBarcodeDetailedParameters.BehaviourOnError">
            <summary>
            Get/Set the behaviour in case of error during barcode recognition.
            This setting sets the behaviour in case of error occuring in a specific engine. The results of
            other engines can either be silently kept or discarded with an exception in case of error.
            </summary>
            
        </member>
        <member name="P:IDRSNET.CBarcodeDetailedParameters.CurrentBarcodeEngineSet">
            <summary>
            Gets the list of current barcode engines.
            Please note that the list includes all engines added to this object, including the ones which are disabled
            
            </summary>
            
        </member>
        <member name="T:IDRSNET.CBarcodeEngineExtraOperationsSet">
            <summary>
            CBarcodeEngineExtraOperationsSet represents a container for extra operations that are applied to barcode engines.
            - preprocessing operations: affect the image before it is supplied to the barcode engine
            - postprocess the barcode results
            </summary>
        </member>
        <member name="M:IDRSNET.CBarcodeEngineExtraOperationsSet.#ctor">
            <summary>
            Creates a new CBarcodeEngineExtraOperationsSet object
            </summary>
            <returns>The newly created CBarcodeEngineExtraOperationsSet</returns>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CBarcodeEngineExtraOperationsSet.#ctor(IDRSNET.IBarcodeEnginePreprocess)">
            <summary>
            Create a new CBarcodeEngineExtraOperationsSet object initialized with a preprocessing operation
            </summary>
            <param name="argPreprocessingOperation">Preprocessing operation object</param>
            <returns>The newly created CBarcodeEngineExtraOperationsSet</returns>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CBarcodeEngineExtraOperationsSet.#ctor(IDRSNET.IBarcodeEnginePostprocess)">
            <summary>
            Create a new CBarcodeEngineExtraOperationsSet object initialized with a postprocess operation
            </summary>
            <param name="argPostprocessingOperation">Postprocess operation object</param>
            <returns>The newly created CBarcodeEngineExtraOperationsSet</returns>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CBarcodeEngineExtraOperationsSet.#ctor(IDRSNET.IBarcodeEnginePreprocess,IDRSNET.IBarcodeEnginePostprocess)">
            <summary>
            Create a new CBarcodeEngineExtraOperationsSet object initialized with a preprocessing and postprocess operation
            </summary>
            <param name="argPreprocessingOperation">Preprocessing operation object</param>
            <param name="argPostprocessingOperation">Postprocess operation object</param>
            <returns>The newly created CBarcodeEngineExtraOperationsSet</returns>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CBarcodeEngineExtraOperationsSet.Finalize">
            <summary>
            Destructor of CBarcodeEngineExtraOperationsSet.
            </summary>
        </member>
        <member name="M:IDRSNET.CBarcodeEngineExtraOperationsSet.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CBarcodeEngineExtraOperationsSet.GetPointer">
            <summary>
            Internal virtual  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CBarcodeEngineExtraOperationsSet.SetPointer(System.IntPtr)">
            <summary>
            Internal virtual  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CBarcodeEngineExtraOperationsSet object</param>
        </member>
        <member name="M:IDRSNET.CBarcodeEngineExtraOperationsSet.AddPreprocessingOperation(IDRSNET.IBarcodeEnginePreprocess)">
            <summary>
            AddPreprocessinOperation adds a preprocessing operation to the extra operations set.
            Please note that iDRS stores a pointer to this object. Please make sure that the object is not released before barcode recognition is complete
            </summary>
            <param name="argPreprocessingOperation">Preprocessing operation</param>
        </member>
        <member name="M:IDRSNET.CBarcodeEngineExtraOperationsSet.GetPreprocessingOperationAt(System.UInt32)">
            <summary>
            GetPreprocessinOperationAt retrieves a pointer to an existing preprocessing operation
            </summary>
            <param name="uiIndex">Index for the preprocessing operation. If the index is out of bounds, an exception will be thrown</param>
            <returns>Pointer to an existing preprocessing operation.</returns>
        </member>
        <member name="M:IDRSNET.CBarcodeEngineExtraOperationsSet.RemovePreprocessingOperationAt(System.UInt32)">
            <summary>
            RemovePreprocessingOperationAt removes a preprocessing operation at a specified index
            </summary>
            <param name="uiIndex">Index for the preprocessing operation to remove. If the index is out of bounds, an exception will be thrown</param>
        </member>
        <member name="M:IDRSNET.CBarcodeEngineExtraOperationsSet.RemoveAllPreprocessingOperations">
            <summary>
            RemoveAllPreprocessinOperations removes all preprocessing operations from the set
            </summary>
        </member>
        <member name="M:IDRSNET.CBarcodeEngineExtraOperationsSet.AddPostprocessingOperation(IDRSNET.IBarcodeEnginePostprocess)">
            <summary>
            AddPostprocessingOperation adds a postprocessing operation to the extra operations set.
            Please note that iDRS stores a pointer to this object. Please make sure that the object is not released before barcode recognition is complete
            </summary>
            <param name="argPostrocessingOperation">Postrocessing operation</param>
        </member>
        <member name="M:IDRSNET.CBarcodeEngineExtraOperationsSet.GetPostprocessingOperationAt(System.UInt32)">
            <summary>
            GetPostprocessinOperationAt retrieves a pointer to an existing postprocessing operation
            </summary>
            <param name="uiIndex">Index for the postprocessing operation. If the index is out of bounds, an exception will be thrown</param>
            <returns>Pointer to an existing postprocessing operation.</returns>
        </member>
        <member name="M:IDRSNET.CBarcodeEngineExtraOperationsSet.RemovePostprocessingOperationAt(System.UInt32)">
            <summary>
            RemovePostprocessinOperationAt removes a postprocessing operation at a specified index
            </summary>
            <param name="uiIndex">Index for the postprocessing operation to remove. If the index is out of bounds, an exception will be thrown</param>
        </member>
        <member name="M:IDRSNET.CBarcodeEngineExtraOperationsSet.RemoveAllPostprocessingOperations">
            <summary>
            RemoveAllPostprocessinOperations removes all postprocessing operations from the set
            </summary>
        </member>
        <member name="M:IDRSNET.CBarcodeEngineExtraOperationsSet.Preprocess(IDRSNET.CImage)">
            <summary>
            Preprocess runs all preprocessing operations on the supplied image
            The order in which the preprocessing operations are executed is the order in which they are added to this set.
            If any of the operation returns anything than IDRS_SUCCESS, the preprocessing will stop and the error code will be returned.
            The method do not catch any exception, so, if any exception occurs, it will be propagated to the calling code
            </summary>
            <param name="argImage">Image to preprocess</param>
            <returns>IDRS_SUCCESS if preprocessing was successful, error code otherwise</returns>
        </member>
        <member name="M:IDRSNET.CBarcodeEngineExtraOperationsSet.Postprocess(IDRSNET.CBarcodeResultSet,System.UInt32)">
            <summary>
            Postprocess runs all postprocessing operations on the supplied barcode results
            The order in which the postprocessing operations are executed is the order in which they are added to this set.
            If any of the operation returns anything than IDRS_SUCCESS, the postprocessing will stop and the error code will be returned.
            The method do not catch any exception, so, if any exception occurs, it will be propagated to the calling code
            </summary>
            <param name="argResults">Object containing the barcode results</param>
            <param name="uiSourceEngine">Source engine</param>
            <returns>IDRS_SUCCESS if postprocessing was successful, error code otherwise</returns>
        </member>
        <member name="P:IDRSNET.CBarcodeEngineExtraOperationsSet.PostprocessingOperationsCount">
            <summary>
            GetPostprocessinOperationsCount retrieves the number of postprocessing operations already added
            
            </summary>
            
        </member>
        <member name="P:IDRSNET.CBarcodeEngineExtraOperationsSet.PreprocessingOperationsCount">
            <summary>
            GetPreprocessinOperationsCount retrieves the number of preprocessing operations already added
            
            </summary>
            
        </member>
        <member name="T:IDRSNET.CBarcodeEngineManager">
            <summary>
            CBarcodeEngineManager class contains the registry for all barcode engines available in iDRS SDK.
            The class allows easy integration of 3rd party barcode engines
            The class provides static methods for dealing with the barcode registration registration. It is not expected to be instantiated.
            The class will maintain a list with references to the available barcode engines.
            </summary>
        </member>
        <member name="M:IDRSNET.CBarcodeEngineManager.RegisterBarcodeEngine(IDRSNET.IBarcodeEngine)">
            <summary>
            RegisterBarcodeEngine adds a barcode engine to the barcode engines available for recognition
            Please note that the barcode engine is added by reference. iDRS SDK will store the pointers internally.
            It is integrator's responsability to ensure that the reference stays valid until the barcode engine is unregistered from the CBarcodeEngineManager
            </summary>
            <param name="argBarcodeEngine">Reference to the barcode engine object to register</param>
            <returns>IDRS_SUCCESS if the barcode engine was successfully registered</returns>
            <returns>IDRS_ERROR_BARCODE_ENGINE_ALREADY_REGISTERED if the barcode engine is already registered</returns>
        </member>
        <member name="M:IDRSNET.CBarcodeEngineManager.UnregisterBarcodeEngine(System.UInt32)">
            <summary>
            UnregisterBarcodeEngine removes a barcode engine from the barcode engines available for recognition.
            Please note that iDRS SDK will not try to delete or cleanup the removed object.
            It is integrator's responsability to cleanup any memory used by the barcode engine.
            Once unregistered, the concerned engine won't be taken into consideration anymore for barcode recognition.
            Please note that iDRS SDK internal barcode engines cannot be removed from the registry.
            If you do not want to use a specific engine, you can instead disable it. See <see cref="T:IDRSNET.CBarcodeContext"/> for details
            </summary>
            <param name="uiBarcodeUID">Barcode engine unique identifier</param>
            <returns>IDRS_SUCCESS if the barcode engine was successfully unregistered, another error code otherwise</returns>
        </member>
        <member name="M:IDRSNET.CBarcodeEngineManager.GetAt(System.UInt32)">
            <summary>
            GetAt returns a pointer to a barcode engine already added
            </summary>
            <param name="uiIndex">Index of the barcode engine to be returned</param>
            <returns>Pointer to the barcode engine stored at specified index</returns>
        </member>
        <member name="M:IDRSNET.CBarcodeEngineManager.IsBarcodeEngineRegistered(System.UInt32)">
            <summary>
            IsBarcodeEngineRegistered verifies if a specified barcode engine identifier is registered or not
            </summary>
            <param name="uiBarcodeUID">Barcode engine unique identifier</param>
            <returns>IDRS_TRUE if the barcode engine has been found, IDRS_FALSE otherwise</returns>
        </member>
        <member name="M:IDRSNET.CBarcodeEngineManager.GetEngineByUniqueIdentifier(System.UInt32)">
            <summary>
            GetEngineByUniqueIdentifier retrieves a barcode engine by it's unique identifier.
            If there is no barcode engine having the supplied identifier, the function will return NULL
            </summary>
            <param name="uiBarcodeUID">Barcode engine unique identifier</param>
            <returns>Pointer to the barcode engine if it has been found, NULL otherwise</returns>
        </member>
        <member name="P:IDRSNET.CBarcodeEngineManager.BarcodeEngineCount">
            <summary>
            Returns the number of barcode engines currently registered.
            Please note that iDRS barcode engines are also included in the count returned.
            
            </summary>
            
        </member>
        <member name="T:IDRSNET.CBarcodeEnginePreprocessDitherRemoval">
            <summary>
            CBarcodeEnginePreprocessDitherRemoval represents the an implementation of CBarcodeEnginePreprocess that offers dither removal
            </summary>
        </member>
        <member name="M:IDRSNET.CBarcodeEnginePreprocessDitherRemoval.#ctor">
            <summary>
            CBarcodeEnginePreprocessDitherRemoval represents the an implementation of CBarcodeEnginePreprocess that offers dither removal
            </summary>
        </member>
        <member name="M:IDRSNET.CBarcodeEnginePreprocessDitherRemoval.Finalize">
            <summary>
            Destructor of CBarcodeEnginePreprocessDitherRemoval.
            </summary>
        </member>
        <member name="M:IDRSNET.CBarcodeEnginePreprocessDitherRemoval.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CBarcodeEnginePreprocessDitherRemoval.GetPointer">
            <summary>
            Internal GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CBarcodeEnginePreprocessDitherRemoval.SetPointer(System.IntPtr)">
            <summary>
            Internal SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CBarcodeEnginePreprocessDitherRemoval object</param>
        </member>
        <member name="M:IDRSNET.CBarcodeEnginePreprocessDitherRemoval.Preprocess(IDRSNET.CImage)">
            <summary>
            Preprocess runs the image preprocessing on the image provided as argument.
            </summary>
            <param name="argImage">Image to modify.</param>
            <returns>IDRS_SUCCESS if everything is OK, error code otherwise</returns>
        </member>
        <member name="T:IDRSNET.CBarcodeEnginePreprocessWhitePixelsRemoval">
            <summary>
            CBarcodeEnginePreprocessWhitePixelRemoval represents the an implementation of CBarcodeEnginePreprocess that offers white pixels removal
            This preprocessing operation will use the same operations as CAdvancedDespeckle
            </summary>
        </member>
        <member name="M:IDRSNET.CBarcodeEnginePreprocessWhitePixelsRemoval.#ctor">
            <summary>
            CBarcodeEnginePreprocessWhitePixelRemoval represents the an implementation of CBarcodeEnginePreprocess that offers white pixels removal
            This preprocessing operation will use the same operations as CAdvancedDespeckle
            </summary>
        </member>
        <member name="M:IDRSNET.CBarcodeEnginePreprocessWhitePixelsRemoval.Finalize">
            <summary>
            Destructor of CBarcodeEnginePreprocessWhitePixelsRemoval.
            </summary>
        </member>
        <member name="M:IDRSNET.CBarcodeEnginePreprocessWhitePixelsRemoval.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CBarcodeEnginePreprocessWhitePixelsRemoval.GetPointer">
            <summary>
            Internal GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CBarcodeEnginePreprocessWhitePixelsRemoval.SetPointer(System.IntPtr)">
            <summary>
            Internal SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CBarcodeEnginePreprocessWhitePixelsRemoval object</param>
        </member>
        <member name="M:IDRSNET.CBarcodeEnginePreprocessWhitePixelsRemoval.Preprocess(IDRSNET.CImage)">
            <summary>
            Preprocess runs the image preprocessing on the image provided as argument.
            </summary>
            <param name="argImage">Image to modify.</param>
            <returns>IDRS_SUUCESS if everything is OK, error code otherwise</returns>
        </member>
        <member name="T:IDRSNET.CBarcodeEngineSet">
            <summary>
            The class CBarcodeEngineSet allows to store barcode engine identifiers.
            </summary>
        </member>
        <member name="M:IDRSNET.CBarcodeEngineSet.#ctor">
            <summary>
            Creates a new CBarcodeEngineSet object
            </summary>
            <returns>The newly created CBarcodeEngineSet</returns>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CBarcodeEngineSet.Finalize">
            <summary>
            Destructor of CBarcodeEngineSet.
            </summary>
        </member>
        <member name="M:IDRSNET.CBarcodeEngineSet.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CBarcodeEngineSet.GetPointer">
            <summary>
            Internal virtual  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CBarcodeEngineSet.SetPointer(System.IntPtr)">
            <summary>
            Internal virtual  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CBarcodeEngineSet object</param>
        </member>
        <member name="M:IDRSNET.CBarcodeEngineSet.Add(System.UInt32)">
            <summary>
            Add appends a CBarcodeEngine identifier to the set.
            </summary>
            <param name="uiBarcodeEngineIdentifier">The barcode engine identifier.</param>
        </member>
        <member name="M:IDRSNET.CBarcodeEngineSet.GetAt(System.UInt32)">
            <summary>
            GetAt returns the barcode engine identifier at the specified index in the set.
            </summary>
            <param name="uiIndex">The index for the barcode engine identifier to be retrieved</param>
            <exception>CIDRSException if an error occurs (ex: index out of bounds)</exception>
        </member>
        <member name="M:IDRSNET.CBarcodeEngineSet.RemoveAt(System.UInt32)">
            <summary>
            RemoveAt removes the barcode engine identifier at the specified index
            </summary>
            <param name="uiIndex">The index where to remove the identifier</param>
            <exception>CIDRSException if an error occurs (ex: index out of bounds)</exception>
        </member>
        <member name="M:IDRSNET.CBarcodeEngineSet.RemoveAll">
            <summary>
            RemoveAll removes all the barcode engine identifiers from the list
            </summary>
        </member>
        <member name="P:IDRSNET.CBarcodeEngineSet.Count">
            <summary>
            GetCount returns the number of identifers already added
            
            </summary>
            
        </member>
        <member name="T:IDRSNET.CBarcodeResult">
            <summary>
            CBarcodeResult class manages a barcode result
            The barcode result store:
            - value (a Unicode string)
            - confidence level
            - barcode type
            - barcode orientation
            - barcode coordinates
            - barcode engine that recognized it
            </summary>
        </member>
        <member name="M:IDRSNET.CBarcodeResult.#ctor">
            <summary>
            Creates an empty CBarcodeResult object.
            </summary>
        </member>
        <member name="M:IDRSNET.CBarcodeResult.#ctor(System.String,System.Byte,IDRSNET.IDRS_BARCODE_TYPE,System.UInt32,System.UInt32,IDRSNET.CIDRSRect,System.UInt32)">
            <summary>
            Creates a CBarcodeResult object.
            </summary>
            <pre>* wstrValue != 0</pre>
            <pre>rcCoordinates.uiTop &lt; rcCoordinates.uiBottom</pre>
            <pre>rcCoordinates.uiLeft &lt; rcCoordinates.uiRight</pre>
            <param name="argBarcodeValue">The value for the barcode.</param>
            <param name="ucConfidence">The confidence level</param>
            <param name="evBarcodeType">The barcode type.</param>
            <param name="uiCustomBarcodeType">The custom barcode type. Valid only if evBarcodeType is set to IDRS_BARCODE_CUSTOM</param>
            <param name="uiOrientation">The barcode orientation.</param>
            <param name="rcCoordinates">The coordinates of the meaning element in the image.</param>
            <param name="uiBarcodeEngine">The barcode recognition engine used to generate this result</param>
            <remarks>The newly created object</remarks>
        </member>
        <member name="M:IDRSNET.CBarcodeResult.Finalize">
            <summary>
            Destructor of CBarcodeResult.
            </summary>
        </member>
        <member name="M:IDRSNET.CBarcodeResult.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CBarcodeResult.GetPointer">
            <summary>
            Internal override  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CBarcodeResult.SetPointer(System.IntPtr)">
            <summary>
            Internal override  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CBarcodeResult object</param>
        </member>
        <member name="P:IDRSNET.CBarcodeResult.CustomBarcodeType">
            <summary>
            Get/Set the custom barcode type value.
            The custom barcode type should be set only when the standard barcode type is set to IDRS_BARCODE_CUSTOM     /// This value should be set only if barcode type is IDRS_BARCODE_CUSTOM
            </summary>
            
        </member>
        <member name="P:IDRSNET.CBarcodeResult.BarcodeValue">
            <summary>
            Get/Set the barcode solution
            </summary>
            
        </member>
        <member name="P:IDRSNET.CBarcodeResult.Orientation">
            <summary>
            Get/Set the orientation for the detected barcode type
            </summary>
            
        </member>
        <member name="P:IDRSNET.CBarcodeResult.Coordinates">
            <summary>
            Get/Set the barcode result coordinates
            </summary>
            
        </member>
        <member name="P:IDRSNET.CBarcodeResult.BarcodeType">
            <summary>
            Get/Set the barcode type for the result
            If the barcode type is a custom one, please use IDRS_BARCODE_CUSTOM and set the
            custom barcode type value to the correct value.
            </summary>
            
        </member>
        <member name="P:IDRSNET.CBarcodeResult.ConfidenceLevel">
            <summary>
            Get/Set the confidence level for the barcode value
            </summary>
            
        </member>
        <member name="P:IDRSNET.CBarcodeResult.BarcodeEngine">
            <summary>
            Get/Set the identifier of the barcode engine identifier used to recognize the barcode
            </summary>
            
        </member>
        <member name="T:IDRSNET.CBarcodeResultSet">
            <summary>
            CBarcodeResultSet stores barcode results information.
            The methods in this class are thread-safe.
            </summary>
        </member>
        <member name="M:IDRSNET.CBarcodeResultSet.#ctor">
            <summary>
            Creates a new CBarcodeResultSet object
            </summary>
            <returns>The newly created CBarcodeResultSet</returns>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CBarcodeResultSet.Finalize">
            <summary>
            Destructor of CBarcodeResultSet.
            </summary>
        </member>
        <member name="M:IDRSNET.CBarcodeResultSet.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CBarcodeResultSet.GetPointer">
            <summary>
            Internal virtual  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CBarcodeResultSet.SetPointer(System.IntPtr)">
            <summary>
            Internal virtual  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CBarcodeResultSet object</param>
        </member>
        <member name="M:IDRSNET.CBarcodeResultSet.Add(IDRSNET.CBarcodeResult)">
            <summary>
            Add appends a CBarcodeResult to the list of barcode results
            </summary>
            <param name="argBarcodeResult">The barcode result</param>
        </member>
        <member name="M:IDRSNET.CBarcodeResultSet.Add(IDRSNET.CBarcodeResult[])">
            <summary>
            Add appends the provided barcode results to the list
            </summary>
            <param name="xBarcodeResults">The vector containing the recognition zones to be added</param>
        </member>
        <member name="M:IDRSNET.CBarcodeResultSet.Add(IDRSNET.CBarcodeResultSet)">
            <summary>
            Add appends the provided barcode results to the list
            </summary>
            <param name="argBarcodeResults">CBarcodeResultSet object containing the recognition zones to be added</param>
        </member>
        <member name="M:IDRSNET.CBarcodeResultSet.GetAt(System.UInt32)">
            <summary>
            GetAt returns the barcode result at the specified index
            </summary>
            <param name="uiIndex">The index for the barcode result to be retrieved</param>
            <exception>CIDRSException if an error occurs (ex: index out of bounds)</exception>
        </member>
        <member name="M:IDRSNET.CBarcodeResultSet.RemoveAt(System.UInt32)">
            <summary>
            RemoveAt removes the barcode result at the specified index
            </summary>
            <param name="uiIndex">The index where to remove the barcode result</param>
            <exception>CIDRSException if an error occurs (ex: index out of bounds)</exception>
        </member>
        <member name="M:IDRSNET.CBarcodeResultSet.RemoveAll">
            <summary>
            RemoveAll removes all the recognition zones from the list
            </summary>
        </member>
        <member name="P:IDRSNET.CBarcodeResultSet.Count">
            <summary>
            GetCount returns the number of barcode results already added
            
            </summary>
            
        </member>
        <member name="T:IDRSNET.IDRS_BARCODE_TYPE">
            <summary>
            @{
            The iDRS barcode types.
            The iDRS is able to recognize many barcode types, even if some out of specs ones.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_BARCODE_TYPE.IDRS_BARCODE_NONE">
            <summary>
            Marker for "no barcode".
            In class CBarcodeSet, this enum value is ignored by Create() and Add() methods.
            However, in class CBarcodeContext this enum value is interpreted as "all recommended barcode types allowed by the licenses"
            by Create(), SetBarcodeType() and SetTypeParameters() methods.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_BARCODE_TYPE.IDRS_BARCODE_EAN_13">
            <summary>
            EAN13, EAN encoding 13 digits.
            EAN-13 is a numeric, fixed-length barcode for 13 characters. The barcodes are composed of two characters for the country
            digit, followed by ten data characters and a check digit. (The user encodes 12 digits.)
            EAN-13 - EAN stands for "European Article Number" - is the standard of the publishing industry for the ISBN numbers on
            books and publications. EAN-13 is actually a European version of UPC-A.
            \image html barcode_ean13.jpg
            \image rtf barcode_ean13.jpg
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_BARCODE_TYPE.IDRS_BARCODE_EAN_8">
            <summary>
            EAN8, EAN encoding 8 digits.
            EAN-8 is a numeric, fixed-length barcode for eight characters. The barcodes are composed of two characters for the
            country code, followed by five data characters and a check digit. (The user encodes seven digits.)
            EAN stands for "European Article Number" - is used for products where the origin country must be encoded. It is actually
            a European version of UPC-A.
            \image html barcode_ean8.png
            \image rtf barcode_ean8.png
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_BARCODE_TYPE.IDRS_BARCODE_MSI">
            <summary>
            MSI Plessey.
            MSI - also called "Plessey" in some literature - is a variable-length, numeric barcode that allows to encode up to 13
            characters.
            Historically speaking, MSI was one of the first symbologies ever to be developed. Nowadays, MSI is used mainly in the
            grocery industry for shelf labels and inventory control. This is no surprise, because it is a "robust" barcode that
            stands up to well to "tear and wear".
            Each character of the barcodes consists of 8 elements - 4 bars and 4 spaces. MSI barcodes are not self-checking, the use
            of a check digit is therefore highly recommended.
            \image html barcode_msi.png
            \image rtf barcode_msi.png
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_BARCODE_TYPE.IDRS_BARCODE_MSIPH">
            <summary>
            MSI Pharma.
            A variation of MSI with a double check digit that is used by pharmaceutical companies.
            \image html barcode_msi.png
            \image rtf barcode_msi.png
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_BARCODE_TYPE.IDRS_BARCODE_UPCA">
            <summary>
            UPC-A
            UPC is a coding system as well as a symbology; it is designed to uniquely identify a product and its manufacturer.
            UPC-A is a fixed-length, numeric barcode that allows to encode 12 characters.
            The barcodes are composed of a number system digit (encoded in odd parity), the manufacturer�s code (encoded in odd
            parity), the product code and a check digit. (The user encodes 11 digits.)
            The check digit is verified but filtered from the reading result when the option "Verify and Erase Check Digit" is
            enabled, otherwise, it is read and included in the output. Disable this option to support the variation of UPC which does
            not contain a check digit.
            Apart from the check digit, there is a left, center and right guard pattern. The first half of the barcodes uses odd
            parity digits, the second half uses even parity digits.
            UPC stands for "Universal Product Code" - has been designed to uniquely identify a product and its manufacturer.
            \image html barcode_upca.jpg
            \image rtf barcode_upca.jpg
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_BARCODE_TYPE.IDRS_BARCODE_UPCE">
            <summary>
            UPC-E
            UPC-E is a variation of the UPC-A symbol.
            UPC-E, is restricted to 6 digits and "zero suppressed" - UPC-E compresses the 12 digit UPC codes into six digits by
            suppressing the number system digit, trailing zeros in the manufacturer's code and leading zeros in the product code.
            \image html barcode_upce.png
            \image rtf barcode_upce.png
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_BARCODE_TYPE.IDRS_BARCODE_CODABAR">
            <summary>
            Codabar
            Codabar is a primarily numeric, self-checking and variable-length barcode for up to 16 data characters. There is a
            leading and trailing quiet zone and a start and stop character (A B C D).
            This standard is used primarily for numeric applications; you can encode the digits and six special characters
            (- . $ / + :).
            The digits and the $ and - symbol are printed with one wide bar and one space. The start and stop characters (A, B, C
            and D) are printed with one wide bar and two white spaces.
            \image html barcode_codabar.png
            \image rtf barcode_codabar.png
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_BARCODE_TYPE.IDRS_BARCODE_I2OF5">
            <summary>
            Interleaved 2 of 5
            Interleaved 2 of 5 is a numeric, self-checking, variable-length and highly compact barcode. A character is defined by
            five black bars and five spaces; two black and two white bars are wide, all others bars are white. There is a leading and
            trailing quiet zone, a start and stop character and an optional check character.
            The encoding is "interleaved" as the odd position numbers are encoded in the bars and the numbers in even positions in the
            spaces. These barcodes must by necessity contain an even number of digits. (The length is often used as a check in
            itself.)
            \image html barcode_i2of5.png
            \image rtf barcode_i2of5.png
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_BARCODE_TYPE.IDRS_BARCODE_CODE_39">
            <summary>
            Code 39
            Code 39 is an alphanumeric, self-checking, variable-length barcode. A character is defined by five black bars and four
            spaces; three elements are wide, six are narrow. There is a leading and trailing quiet zone, a start and stop character
            (the asterisk), an optional check character and a gap between the data characters.
            This symbology is sometimes called "3 of 9 code". It is primarily used where alphabetic characters are mandatory as you
            can not only encode the digits, but also the uppercase letters and seven special characters (- . $ / + % and a space).
            Code 39 is a widely used industrial barcode and is mandated for some automotive industry and Department of Defense
            labels, because of its ability to represent alphanumeric data.
            \image html barcode_code39.png
            \image rtf barcode_code39.png
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_BARCODE_TYPE.IDRS_BARCODE_CODE_39_EXT">
            <summary>
            Code 39 extended
            This is an extended version of Code 39 that supports the ASCII character set.
            So with Code 39 Extended you can also code the 26 lower letters (a-z) and the special characters you have on your
            keyboard.
            It's an extended version of Code 39 allows to encode the full 128 ASCII character set. The "full" ASCII set refers to all
            characters up to character 128 in the ASCII table set, the "special" and accentuated symbols from 128 onwards such as �
            and � are not included.
            \image html barcode_code39_ext.png
            \image rtf barcode_code39_ext.png
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_BARCODE_TYPE.IDRS_BARCODE_CODE_39_HIBC">
            <summary>
            Code 39 HIBC
            Code 39 HIBC ("Health Industry Barcode") is a Code 39 barcode with a check character.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_BARCODE_TYPE.IDRS_BARCODE_CODE_93">
            <summary>
            Code 93
            Code 93 is a alphanumeric, self-checking, variable-length barcode. Every character is composed of nine elements arranged
            in three bars with adjacent spaces.
            A character is defined by five black bars and four spaces; three elements are wide, six are narrow. There is a leading and
            trailing quiet zone, a start and stop character, a termination bar and two check characters. The check characters are
            verified but filtered from the output.
            Code 93 is an extended version of Code 39 that allows to encode the full 128 ASCII character set. The "full" ASCII set
            refers to all characters up to character 128 in the ASCII table set, the "special" and accentuated symbols from 128
            onwards such as � and � are not included. Code 93 is also slightly more compact than Code 39.
            This standard is used in an alphanumeric context as you can define the complete 128 ASCII character set.
            Code 93 is specifically designed to provide a more compact version of Code 39 due to its high-density complement.
            \image html barcode_code93.png
            \image rtf barcode_code93.png
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_BARCODE_TYPE.IDRS_BARCODE_CODE_128">
            <summary>
            Code 128
            Code 128 is a very high-density alphanumeric symbology.
            The Code 128 character set includes the digits 0-9, the letters A-Z (upper and lower cases), and all standard ASCII
            symbols and control codes.
            It's a specialized barcode symbology for the banking world,
            \image html barcode_code128.png
            \image rtf barcode_code128.png
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_BARCODE_TYPE.IDRS_BARCODE_PDF417">
            <summary>
            PDF 417
            PDF417 is a two-dimensional, stacked, public-domain barcode . ("PDF" stands for "Portable Data File". )
            It is a multi-row, continuous, variable length symbology that has high data capacity of storing up to about 1,800
            printable ASCII characters or 1,100 binary character per symbol.
            The symbol is rectangular; the shape of the symbol can be adjusted to some extent by setting the width and allowing
            the height to grow with the data.
            It is also possible to break large number of data into several PDF417 symbols that can logically linked.
            See <a href="page3.html">page3</a> Two-dimensional barcodes (PDF-417 symbology)
            \image html barcode_pdf417.png
            \image rtf barcode_pdf417.png
            </summary>
            <remarks>Requires PDF417 Barcode extension.</remarks>
        </member>
        <member name="F:IDRSNET.IDRS_BARCODE_TYPE.IDRS_BARCODE_POSTNET">
            <summary>
            Postnet.
            The US postal barcode.
            PostNet is a numeric barcode for 5, 9 or 11 characters. PostNet is different from the other symbologies, as the data is
            encoded in the height of the bars, not in the width of the bars and spaces, therefore few barcode reader can decode
            PostNet barcodes. (This allows great flexibility: successful decoding is hardly dependent on brightness.)
            \image html barcode_postnet.png
            \image rtf barcode_postnet.png
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_BARCODE_TYPE.IDRS_BARCODE_POSTNET_32">
            <summary>
            Postnet 32 represents a 5 digit (plus check digit) barcode, usually containing the basic ZIP Code.
            It is referred to as the "A" code and it contains 32 bars
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_BARCODE_TYPE.IDRS_BARCODE_POSTNET_52">
            <summary>
            Postnet 52 represents a 9 digit (plus check digit) barcode
            It referred to as the "C" code and it contains 52 bars.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_BARCODE_TYPE.IDRS_BARCODE_POSTNET_62">
            <summary>
            Postnet 62 represents a 11 digit (plus check digit) barcode
            It referred to as the DPBC code and it contains 62 bars.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_BARCODE_TYPE.IDRS_BARCODE_PATCHCODE">
            <summary>
            Patchcode are a set of 6 barcodes that are used to separate documents during scanning.
            A patch code is a pattern of parallel, alternating black bars and spaces that is printed on a document.
            The patch code doesn't actually contain data; it is just a code which provides information to document processing.
            The scanners which can understand patch codes can automatically switch through different modes, saving this way a lot of time during scanning.
            \image html barcode_patchcode.png
            \image rtf barcode_patchcode.png
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_BARCODE_TYPE.IDRS_BARCODE_UCC_128">
            <summary>
            UCC 128, also known as GS1-128 is an application standard of the GS1 implementation using the Code 128 barcode specification.
            \image html barcode_ucc128.png
            \image rtf barcode_ucc128.png
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_BARCODE_TYPE.IDRS_BARCODE_QR_CODE">
            <summary>
            QR code (abbreviated from Quick Response Code) is a type of matrix barcode widely used across different industries due to its fast readability and greater storage capacity.
            The information encoded by a QR code may be made up of four standardized types ("modes") of data (numeric, alphanumeric, byte / binary, Kanji) or, through supported extensions, virtually any type of data
            \image html barcode_qrcode.png
            \image rtf barcode_qrcode.png
            </summary>
            <remarks>Requires QRCode Barcode extension.</remarks>
        </member>
        <member name="F:IDRSNET.IDRS_BARCODE_TYPE.IDRS_BARCODE_DATAMATRIX">
            <summary>
            DataMatrix.
            DataMatrix is a high density 2D symbology that can encode up to 3116 characters from the entire 256 byte ASCII character set.
            \image html barcode_datamatrix.png
            \image rtf barcode_datamatrix.png
            </summary>
            <remarks>Requires DataMatrix Barcode extension.</remarks>
        </member>
        <member name="F:IDRSNET.IDRS_BARCODE_TYPE.IDRS_BARCODE_AZTEC">
            <summary>
            Aztec Code
            Aztec Code is a type of 2D barcode that has the potential to use less space than other matrix barcodes because it does not require a surrounding quiet zone.
            </summary>
            <remarks>Requires QRCode Barcode extension.</remarks>
        </member>
        <member name="F:IDRSNET.IDRS_BARCODE_TYPE.IDRS_BARCODE_CUSTOM">
            <summary>
            Custom barcode type
            The custom barcode type allows integrators to use other barcode types than the ones provided by iDRS SDK.
            Recognizing custom barcode types can be accomplished only with custom barcode engines - CBarcodeEngine
            </summary>
        </member>
        <member name="T:IDRSNET.IDRS_BARCODE_DIRECTION">
            <summary>
            The iDRS barcode detection direction flags.
            These flags specify the directions to look for a barcode. More than one direction can be specified using a bitwise OR.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_BARCODE_DIRECTION.IDRS_BARCODE_LEFT_RIGHT">
            <summary>
            Left to right. 
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_BARCODE_DIRECTION.IDRS_BARCODE_RIGHT_LEFT">
            <summary>
            Right to left. 
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_BARCODE_DIRECTION.IDRS_BARCODE_TOP_BOTTOM">
            <summary>
            Top to bottom. 
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_BARCODE_DIRECTION.IDRS_BARCODE_BOTTOM_TOP">
            <summary>
            Bottom to top. 
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_BARCODE_DIRECTION.IDRS_BARCODE_DIRECTION_ANY">
            <summary>
            Any directions. 
            </summary>
        </member>
        <member name="T:IDRSNET.CBarcodeSet">
            <summary>
            The CBarcodeSet class manages the set of barcodes types used for barcode recognition
            \ingroup module_barcode
            The class holds the subset of barcode types used for barcode recognition. 
            
            The class can store both standard barcode types (see <see cref="T:IDRSNET.IDRS_BARCODE_TYPE"/> as well as custom barcode types.
            A custom barcode type has a standard value set to IDRS_BARCODE_CUSTOM and a user defined value - IDRS_CUSTOM_BARCODE_TYPE.
            - when adding a custom barcode type, IDRS_BARCODE_CUSTOM standard value is implied.
            - when retrieving a barcode type (using GetAt function) the return value for custom barcodes will be IDRS_BARCODE_CUSTOM. In order
            to know the user defined value, a subsequent call to GetCustomAt will be required.
            - if GetCustomAt is called for a standard barcode type, the return will be IDRS_CUSTOM_BARCODE_TYPE_RESERVED (0).
            Standard barcode types and custom barcode types are stored in the same internal array.
            \req IDRS::IDRS_MODULE_BARCODE
            </summary>
        </member>
        <member name="M:IDRSNET.CBarcodeSet.#ctor(IDRSNET.IDRS_BARCODE_TYPE)">
            <summary>
            Creates a new CBarcodeSet object
            </summary>
            <param name="btBarcodeType">The initial barcode for this CBarcodeSet object</param>
            <returns>The newly created CBarcodeSet</returns>
            <exception>CIDRSException if an error occur.</exception>
            <remarks>
            If a non-valid barcode type is provided, it will not be added to the list. IDRS_BARCODE_NONE
            and IDRS_BARCODE_COUNT are not considered as valid barcode types.
            </remarks>
        </member>
        <member name="M:IDRSNET.CBarcodeSet.#ctor(IDRSNET.IDRS_BARCODE_TYPE,System.UInt32)">
            <summary>
            Creates a new CBarcodeSet object
            </summary>
            <param name="btBarcodeType">The initial barcode for this CBarcodeSet object</param>
            <param name="uiCustomBarcodeType">Custom barcode type. Valid only if btBarcodeType is set to IDRS_BARCODE_CUSTOM</param>
            <returns>The newly created CBarcodeSet</returns>
            <pre>btBarcodeType != IDRS_BARCODE_CUSTOM || uiCustomBarcodeType != IDRS_CUSTOM_BARCODE_TYPE_RESERVED</pre>
            <exception>CIDRSException if an error occur.</exception>
            <remarks>
            If a non-valid barcode type is provided, it will not be added to the list. IDRS_BARCODE_NONE
            and IDRS_BARCODE_COUNT are not considered as valid barcode types.
            </remarks>
        </member>
        <member name="M:IDRSNET.CBarcodeSet.#ctor(IDRSNET.IDRS_BARCODE_TYPE[])">
            <summary>
            Creates a new CBarcodeSet object
            </summary>
            <param name="xBarcodeTypes">The vector containing the initial barcodes for this CBarcodeSet object</param>
            <returns>The newly created CBarcodeSet</returns>
            <exception>CIDRSException if an error occur.</exception>
            <remarks>
            If a non-valid barcode type is present in the array, it will not be added to the list. IDRS_BARCODE_NONE
            and IDRS_BARCODE_COUNT are not considered as valid barcode types.
            </remarks>
        </member>
        <member name="M:IDRSNET.CBarcodeSet.Finalize">
            <summary>
            Destructor of CBarcodeSet.
            </summary>
        </member>
        <member name="M:IDRSNET.CBarcodeSet.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CBarcodeSet.GetPointer">
            <summary>
            Internal virtual  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CBarcodeSet.SetPointer(System.IntPtr)">
            <summary>
            Internal virtual  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CBarcodeSet object</param>
        </member>
        <member name="M:IDRSNET.CBarcodeSet.Add(IDRSNET.IDRS_BARCODE_TYPE)">
            <summary>
            Add appends a barcode type to the list of barcodes used for barcode recognition.
            </summary>
            <param name="btBarcodeType">The barcode type to be added.</param>
            <remarks>
            If a non-valid barcode type is provided, it will not be added to the list. IDRS_BARCODE_NONE
            and IDRS_BARCODE_COUNT are not considered as valid barcode types.
            </remarks>
        </member>
        <member name="M:IDRSNET.CBarcodeSet.AddCustom(System.UInt32)">
            <summary>
            AddCustom appends a custom barcode type to the list of barcodes used for barcode recognition
            </summary>
            <param name="uiCustomBarcodeType">The custom barcode type identifier to be added.</param>
            <pre>uiCustomBarcodeType != IDRS_CUSTOM_BARCODE_TYPE_RESERVED</pre>
        </member>
        <member name="M:IDRSNET.CBarcodeSet.Add(IDRSNET.IDRS_BARCODE_TYPE[])">
            <summary>
            Add appends the provided barcodes to the list of barcodes used for barcode recognition
            </summary>
            <param name="xBarcodeTypes">The vector containing the barcodes to be added</param>
            <remarks>
            If a non-valid barcode type is present in the array, it will not be added to the list. IDRS_BARCODE_NONE
            and IDRS_BARCODE_COUNT are not considered as valid barcode types.
            </remarks>
        </member>
        <member name="M:IDRSNET.CBarcodeSet.GetAt(System.UInt32)">
            <summary>
            GetAt returns the barcode at the specified index
            </summary>
            <param name="uiIndex">The index for the barcode to be retrieved</param>
            <returns>The barcode type at provided index</returns>
            <exception>CIDRSException if an error occurs (ex: index out of bounds)</exception>
        </member>
        <member name="M:IDRSNET.CBarcodeSet.GetAt(System.UInt32,System.UInt32,IDRSNET.IDRS_BARCODE_TYPE[])">
            <summary>
            GetAt returns the requested number of barcodes starting with the specified index
            </summary>
            <param name="uiStartIndex">The index for the first barcode to be retrieved</param>
            <param name="uiCount">The number of barcodes to be retrieved</param>
            <param name="xElements">The vector containing the barcodes to retrieve</param>
            <remarks>parameter xElements should point to a memory buffer large enough to accommodate uiCount barcodes</remarks>
            <exception>CIDRSException if an error occurs (ex: uiStartIndex out of bounds)</exception>
        </member>
        <member name="M:IDRSNET.CBarcodeSet.GetCustomAt(System.UInt32)">
            <summary>
            GetCustomAt returns the custom barcode type at the specified index
            </summary>
            <param name="uiIndex">The index for barcode to be retrieved</param>
            <returns>The custom barcode type at provided index</returns>
            <exception>CIDRSException if an error occurs (ex: index out of bounds)</exception>
        </member>
        <member name="M:IDRSNET.CBarcodeSet.RemoveAt(System.UInt32)">
            <summary>
            RemoveAt removes the barcode at the specified index
            </summary>
            <param name="uiIndex">The index where to remove the barcode</param>
            <exception>CIDRSException if an error occurs (ex: index out of bounds)</exception>
        </member>
        <member name="M:IDRSNET.CBarcodeSet.Remove(IDRSNET.IDRS_BARCODE_TYPE)">
            <summary>
            Remove removes a barcode from the list, given its type.
            </summary>
            <param name="btBarcodeType">The type of the barcode to be removed</param>
            <returns></returns>
            <remarks>
            - IDRS_TRUE if the barcode has been found and removed.
            - IDRS_FALSE if the barcode was not found
            </remarks>
        </member>
        <member name="M:IDRSNET.CBarcodeSet.RemoveCustom(System.UInt32)">
            <summary>
            RemoveCustom remove a barcode from the list, given its custom type.
            </summary>
            <param name="uiCustomBarcodeType">The custom type of the barcode to be removed.</param>
            <returns></returns>
            <remarks>
            - IDRS_TRUE if the barcode has been found and removed.
            - IDRS_FALSE if the barcode was not found
            </remarks>
        </member>
        <member name="M:IDRSNET.CBarcodeSet.RemoveAll">
            <summary>
            RemoveAll removes all the barcodes from the set
            </summary>
        </member>
        <member name="M:IDRSNET.CBarcodeSet.Find(IDRSNET.IDRS_BARCODE_TYPE,System.UInt32@)">
            <summary>
            Find searches for the specified barcode type and updates the uiIndex parameter with the index at which it was found
            </summary>
            <param name="btBarcodeType">The barcode type to search for</param>
            <param name="uiIndex">The index at which the barcode was found. If the barcode is not found, the index value remains unchanged</param>
            <returns>IDRS_TRUE if the barcode was found. IDRS_FALSE if the barcode was not found</returns>
        </member>
        <member name="M:IDRSNET.CBarcodeSet.FindCustom(System.UInt32,System.UInt32@)">
            <summary>
            FindCustom searches for the specified barcode custom type and updates the uiIndex parameter with the index at which it was found
            </summary>
            <param name="uiCustomBarcodeType">The custom barcode type to search for.</param>
            <param name="uiIndex">The index at which the barcode was found. If the barcode is not found, the index value remains unchanged</param>
            <returns>IDRS_TRUE if the barcode was found. IDRS_FALSE if the barcode was not found</returns>
        </member>
        <member name="M:IDRSNET.CBarcodeSet.IsInSet(IDRSNET.IDRS_BARCODE_TYPE)">
            <summary>
            IsInSet searches for the specified barcode type.
            </summary>
            <param name="btBarcodeType">The barcode type to search for</param>
            <returns>IDRS_TRUE if the barcode was found. IDRS_FALSE if the barcode was not found</returns>
        </member>
        <member name="M:IDRSNET.CBarcodeSet.IsCustomInSet(System.UInt32)">
            <summary>
            IsCustomInSet searches for the specified barcode custom type.
            </summary>
            <param name="uiCustomBarcodeType">The custom barcode type to search for.</param>
            <returns>IDRS_TRUE if the barcode was found. IDRS_FALSE if the barcode was not found</returns>
        </member>
        <member name="M:IDRSNET.CBarcodeSet.Clone">
            <summary>
            Clone creates a copy of the current object
            It performs a deep copy of the information stored in current object
            </summary>
        </member>
        <member name="P:IDRSNET.CBarcodeSet.Count">
            <summary>
            GetCount returns the number of barcode types already added. This value includes standard barcode types and custom barcode types.
            
            </summary>
            
        </member>
        <member name="T:IDRSNET.CBarcodeSpecificOptions">
            <summary>
            CBarcodeSpecificOptions contains some specific options for some specific barcode types
            </summary>
        </member>
        <member name="M:IDRSNET.CBarcodeSpecificOptions.Finalize">
            <summary>
            Destructor of CBarcodeSpecificOptions.
            </summary>
        </member>
        <member name="M:IDRSNET.CBarcodeSpecificOptions.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CBarcodeSpecificOptions.GetPointer">
            <summary>
            Internal virtual  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CBarcodeSpecificOptions.SetPointer(System.IntPtr)">
            <summary>
            Internal virtual  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CBarcodeSpecificOptions object</param>
        </member>
        <member name="P:IDRSNET.CBarcodeSpecificOptions.BarcodeType">
            <summary>
            gets the barcode type
            
            </summary>
            
        </member>
        <member name="T:IDRSNET.CBarcodeSpecificOptionsCode128">
            <summary>
            CBarcodeSpecificOptions contains some specific options for code128 barcode type
            the specific options are: control code mode and mapping
            </summary>
        </member>
        <member name="M:IDRSNET.CBarcodeSpecificOptionsCode128.#ctor(System.Boolean,System.Boolean)">
            <summary>
            creates a new instance of CBarcodeSpecificOptionsCode128.
            </summary>
            <param name="benableControlCode">IDRS_TRUE to enable</param>
            <param name="buseMapping">IDRS_TRUE to use default mapping</param>
            <returns>an instance of CBarcodeSpecificOptionsCode128</returns>
        </member>
        <member name="M:IDRSNET.CBarcodeSpecificOptionsCode128.Finalize">
            <summary>
            Destructor of CBarcodeSpecificOptionsCode128.
            </summary>
        </member>
        <member name="M:IDRSNET.CBarcodeSpecificOptionsCode128.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CBarcodeSpecificOptionsCode128.GetPointer">
            <summary>
            Internal override  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CBarcodeSpecificOptionsCode128.SetPointer(System.IntPtr)">
            <summary>
            Internal override  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CBarcodeSpecificOptionsCode128 object</param>
        </member>
        <member name="M:IDRSNET.CBarcodeSpecificOptionsCode128.IsControlCodeEnabled">
            <summary>
            checks if barcode is enabled.
            </summary>
            <returns>IDRS_TRUE if enabled else IDRS_FALSE</returns>
        </member>
        <member name="M:IDRSNET.CBarcodeSpecificOptionsCode128.IsMappingEnabled">
            <summary>
            checks if mapping is enabled.
            </summary>
            <returns>IDRS_TRUE if enabled else IDRS_FALSE</returns>
        </member>
        <member name="P:IDRSNET.CBarcodeSpecificOptionsCode128.ControlCodeStatus">
            <summary>
            enable or disable control code.
            
            </summary>
            
        </member>
        <member name="P:IDRSNET.CBarcodeSpecificOptionsCode128.MappingStatus">
            <summary>
            enable or disable control code.
            
            </summary>
            
        </member>
        <member name="T:IDRSNET.CBaseContext">
            <summary>
            The CBaseContext class represent the base class for all the recognition contexts classes in iDRS SDK.
            \ingroup module_core
            The contexts are useful for setting various parameters that affect the recognition engines, like: language, image pre-processing, etc
            \req none
            <see cref="T:IDRSNET.COcrContext"/> 
            <see cref="T:IDRSNET.CBarcodeContext"/> 
            <see cref="T:IDRSNET.CMultiContext"/> 
            </summary>
        </member>
        <member name="T:IDRSNET.CBaseContext.eContextType">
            <summary>
            The enum eContextType lists the possible context types used for recognition purposes.
            </summary>
        </member>
        <member name="F:IDRSNET.CBaseContext.eContextType.CONTEXT_BASE">
            <summary>
            ! Base context. Used only for initialization purposes.
            </summary>
        </member>
        <member name="F:IDRSNET.CBaseContext.eContextType.CONTEXT_OCR">
            <summary>
            ! Context used for OCR recognition.
            </summary>
        </member>
        <member name="F:IDRSNET.CBaseContext.eContextType.CONTEXT_BARCODE">
            <summary>
            ! Context used for barcodes recognition.
            </summary>
        </member>
        <member name="F:IDRSNET.CBaseContext.eContextType.CONTEXT_MULTI">
            <summary>
            ! Context grouping several sub-contexts (OCR or barcode).
            </summary>
        </member>
        <member name="M:IDRSNET.CBaseContext.Finalize">
            <summary>
            Destructor of CBaseContext.
            </summary>
        </member>
        <member name="M:IDRSNET.CBaseContext.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CBaseContext.GetPointer">
            <summary>
            Internal virtual  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CBaseContext.SetPointer(System.IntPtr)">
            <summary>
            Internal virtual  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CBaseContext object</param>
        </member>
        <member name="P:IDRSNET.CBaseContext.ContextType">
            <summary>
            Gets the context type.
            
            </summary>
            
            <pre> ! IsNull () </pre>
        </member>
        <member name="P:IDRSNET.CBaseContext.WorkDepth">
            <summary>
            Get/Set the processing work depth.
            The parameter called "Work Depth" has values going from 0 to 255, 0 meaning "best speed" and 255 "best accuracy".
            Increasing the work depth allows the processing engine to spend more time on low-quality documents.
            The "work depth" indicates how deep the engine is allowed to work in order to find a satisfactory result.
            For documents of good quality, the engine will find a satisfactory result at an early stage and there will not be much speed differences between "best speed" and "best accuracy".
            For bad quality documents, if allowed by "word depth", the engine will work deeper. The accuracy will be better but at the price of speed.
            </summary>
            
            <pre> ! IsNull () </pre>
        </member>
        <member name="T:IDRSNET.CBinarize">
            <summary>
            The CBinarize class offers image binarization features
            \ingroup module_prepro
            Binarization is the first stage in image recognition. It convert the input image into a black &amp; white image for faster processing.
            The CBinarize class offers the following image binarization algorithms:
            - threshold binarization - uses a global threshold value is used for computing the result image.
            - adaptive binarization  - uses different thresholds for different regions of the image.
            \req IDRS::IDRS_MODULE_PREPRO
            <see cref="F:IDRSNET.IDRS_MODULE.IDRS_MODULE_PREPRO"/> 
            <see cref="T:IDRSNET.CAdvancedBinarize"/> for advanced binarization features.
            </summary>
        </member>
        <member name="M:IDRSNET.CBinarize.#ctor(IDRSNET.CIDRS)">
            <summary>
            Creates a new CBinarize object.
            </summary>
            <param name="argIDRS">The iDRS</param>
            <returns>The newly created CBinarize object.</returns>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CBinarize.Finalize">
            <summary>
            Destructor of CBinarize.
            </summary>
        </member>
        <member name="M:IDRSNET.CBinarize.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CBinarize.GetPointer">
            <summary>
            Internal override  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CBinarize.SetPointer(System.IntPtr)">
            <summary>
            Internal override  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CBinarize object</param>
        </member>
        <member name="M:IDRSNET.CBinarize.AdaptiveBinarization(IDRSNET.CImage,IDRSNET.CImage,System.Boolean)">
            <summary>
            Computes a black and white image with the input color/greyscale image:
            - smoothens the image,
            - performs adaptive binarization.
            The adaptive binarization determines local thresholds.
            </summary>
            <pre>! argImageTarget.IsNull ()</pre>
            <param name="argImageTarget">The image that will receive the black and white image.</param>
            <param name="argImageSource">The color/greyscale image to binarize.</param>
            <param name="bSmoothing">The smoothing flag.</param>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CBinarize.AdaptiveBinarization(IDRSNET.CPage,System.Boolean)">
            <summary>
            Computes a black and white image with the color/greyscale image.
            </summary>
            <pre>! argPage.IsNull ()</pre>
            <pre>argPage.GetSourceImageColorMode () != CImageProperties::BLACK_AND_WHITE</pre>
            <param name="argPage">The page to binarize.</param>
            <param name="bSmoothing">The smoothing flag.</param>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CBinarize.ThresholdBinarization(IDRSNET.CImage,IDRSNET.CImage,System.Boolean,System.Byte)">
            <summary>
            Computes a black and white image with the input color/greyscale image:
            - smoothens the image,
            - apply the fixed threshold.
            </summary>
            <remarks>If the threshold provided is 0, the image is analyzed to automatically compute a threshold for the whole document.</remarks>
            <pre>! argImageSource.IsNull ()</pre>
            <param name="argImageTarget">The image that will receive the black and white image.</param>
            <param name="argImageSource">The color/greyscale image to binarize.</param>
            <param name="bSmoothing">The smoothing flag.</param>
            <param name="ubThresh">The binarization threshold.</param>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CBinarize.ThresholdBinarization(IDRSNET.CPage,System.Boolean,System.Byte)">
            <summary>
            Computes a black and white image with the color/greyscale image.
            </summary>
            <remarks>If the threshold provided is 0, the image is analyzed to automatically compute a threshold for the whole document.</remarks>
            <pre>! argPage.IsNull ()</pre>
            <pre>argPage.GetSourceImageColorMode () != CImageProperties::BLACK_AND_WHITE</pre>
            <param name="argPage">The page to binarize.</param>
            <param name="bSmoothing">The smoothing flag.</param>
            <param name="ubThresh">The binarization threshold.</param>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CBinarize.AdaptiveBinarization(IDRSNET.CIDRS,IDRSNET.CImage,IDRSNET.CImage,System.Boolean)">
            <summary>
            Computes a black and white image with the input color/greyscale image:
            - smoothen the image,
            - performs adaptive binarization.
            The adaptive binarization determines local thresholds.
            </summary>
            <pre>! argImageTarget.IsNull ()</pre>
            <param name="argIDRS">The iDRS</param>
            <param name="argImageTarget">The image that will receive the black and white image.</param>
            <param name="argImageSource">The color/greyscale image to binarize.</param>
            <param name="bSmoothing">The smoothing flag.</param>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CBinarize.AdaptiveBinarization(IDRSNET.CIDRS,IDRSNET.CPage,System.Boolean)">
            <summary>
            Computes a black and white image with the color/greyscale image.
            </summary>
            <pre>! argPage.IsNull ()</pre>
            <pre>argPage.GetSourceImageColorMode () != CImageProperties::BLACK_AND_WHITE</pre>
            <param name="argIDRS">The iDRS</param>
            <param name="argPage">The page to binarize.</param>
            <param name="bSmoothing">The smoothing flag.</param>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CBinarize.ThresholdBinarization(IDRSNET.CIDRS,IDRSNET.CImage,IDRSNET.CImage,System.Boolean,System.Byte)">
            <summary>
            Computes a black and white image with the input color/greyscale image:
            - smoothens the image,
            - apply the fixed threshold.
            </summary>
            <remarks>If the threshold provided is 0, the image is analyzed to automatically compute a threshold for the whole document.</remarks>
            <pre>! argImageSource.IsNull ()</pre>
            <param name="argIDRS">The iDRS</param>
            <param name="argImageTarget">The image that will receive the black and white image.</param>
            <param name="argImageSource">The color/greyscale image to binarize.</param>
            <param name="bSmoothing">The smoothing flag.</param>
            <param name="ubThresh">The binarization threshold.</param>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CBinarize.ThresholdBinarization(IDRSNET.CIDRS,IDRSNET.CPage,System.Boolean,System.Byte)">
            <summary>
            Computes a black and white image with the color/greyscale image.
            </summary>
            <remarks>If the threshold provided is 0, the image is analyzed to automatically compute a threshold for the whole document.</remarks>
            <pre>! argPage.IsNull ()</pre>
            <pre>argPage.GetSourceImageColorMode () != CImageProperties::BLACK_AND_WHITE</pre>
            <param name="argIDRS">The iDRS</param>
            <param name="argPage">The page to binarize.</param>
            <param name="bSmoothing">The smoothing flag.</param>
            <param name="ubThresh">The binarization threshold.</param>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="P:IDRSNET.CBinarize.Undithering">
            <summary>
            Get/Set the automatic undithering while processing a page.
            Dithering is a scanning technique which consists in representing a color or greyscale image using
            only a limited color palette. This allows to reduce file size while maintaining the general aspect of the image.
            This technique is known to create images more difficult to handle for OCR technology; this is why specific
            image preprocessing is needed to detect and revert it.
            </summary>
            <remarks>Automatic undithering will be applied only if smoothing is also activated</remarks>
        </member>
        <member name="T:IDRSNET.CBinarizeOptions">
            <summary>
            The CBinarizeOptions class contains the image binarization options that can be specified for page recognition
            \ingroup module_prepro
            If the input image is not already in bi-level color mode (black and white), the iDRS SDK performs an automatic image preprocessing step that consists in image binarization.
            Using CBinarizeOptions class, the integrator can specify different parameters for the automatic image binarization.
            \req none
            <see cref="T:IDRSNET.CBinarize"/> for standard binarization
            <see cref="T:IDRSNET.CAdvancedBinarize"/> for advanced binarization
            </summary>
        </member>
        <member name="M:IDRSNET.CBinarizeOptions.#ctor">
            <summary>
            Creates a new CBinarizeOptions initialized with the default values:
            smoothing - IDRS_DFLT_BINARIZATION_SMOOTH. for more information
            keep binarized image - IDRS_FALSE
            automatic adjust - IDRS_TRUE
            custom threshold - 0
            </summary>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CBinarizeOptions.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Byte)">
            <summary>
            Creates a new CBinarizeOptions and initializes it with the provided values
            </summary>
            <param name="bSmoothing">- boolean flag specifying whether iDRS SDK will apply a smoothing algorithm in the input image</param>
            <param name="bKeepBinarizedImage">- boolean flag specifying whether the recognition engine will keep the binarized (black &amp; white) image in memory after the recognition is finished</param>
            <param name="bAutoAdjust">- boolean flag indicating that the recognition engine should use an automatic adaptive algorithm to perform image binarization.</param>
            <param name="ucThreshold">- value representing the threshold value used for binarization algorithm</param>
            <remarks>Setting bAutoAdjust to IDRS_TRUE, will render ucThreshold parameter useless.</remarks>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CBinarizeOptions.Finalize">
            <summary>
            Destructor of CBinarizeOptions.
            </summary>
        </member>
        <member name="M:IDRSNET.CBinarizeOptions.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CBinarizeOptions.GetPointer">
            <summary>
            Internal virtual  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CBinarizeOptions.SetPointer(System.IntPtr)">
            <summary>
            Internal virtual  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CBinarizeOptions object</param>
        </member>
        <member name="M:IDRSNET.CBinarizeOptions.IsSmoothing">
            <summary>
            IsSmoothing return the image smoothing boolean flag
            </summary>
            <returns>a boolean flag indicating whether image smoothing should be used before recognition process</returns>
        </member>
        <member name="M:IDRSNET.CBinarizeOptions.IsKeepBinarizedImage">
            <summary>
            IsKeepBinarizedImage return the flag that specifies if the binariezed image should be stored in memory or destroyed after the recognition operation is complete
            </summary>
            <returns>a boolean flag specifying whether the recognition engine will keep the binarized (black &amp; white) image in memory after the recognition process is finished</returns>
        </member>
        <member name="M:IDRSNET.CBinarizeOptions.IsAutoAdjust">
            <summary>
            IsAutoAdjust returns the automatic image adjustment flag
            </summary>
            <returns>a boolean flag indicating that the recognition engine should use an automatic adaptive algorithm to perform image binarization.</returns>
        </member>
        <member name="P:IDRSNET.CBinarizeOptions.Undithering">
            <summary>
            Get/Set the automatic undithering while processing a page.
            Dithering is a scanning technique which consists in representing a color or greyscale image using
            only a limited color palette. This allows to reduce file size while maintaining the general aspect of the image.
            This technique is known to create images more difficult to handle for OCR technology; this is why specific
            image preprocessing is needed to detect and revert it.
            </summary>
            <remarks>Automatic undithering will be applied only is smoothing is also activated</remarks>
        </member>
        <member name="P:IDRSNET.CBinarizeOptions.AutoAdjust">
            <summary>
            SetAutoAdjust instructs the recognition engine to use an automatic adaptive algorithm to perform image binarization.
            
            </summary>
            
        </member>
        <member name="P:IDRSNET.CBinarizeOptions.CustomThreshold">
            <summary>
            Get/Set the custom value to be used during image binarization process
            </summary>
            
        </member>
        <member name="P:IDRSNET.CBinarizeOptions.KeepBinarizedImage">
            <summary>
            SetKeepBinarizedImage instructs the recognition engine to keep or destroy the binarized image after the recognition operation is complete
            
            </summary>
            
        </member>
        <member name="P:IDRSNET.CBinarizeOptions.Smoothing">
            <summary>
            SetSmoothing sets the image smoothing boolean flag.
            Setting the image smoothing flag to IDRS_TRUE will instruct the recognition engine to perform
            a smoothing operation on the image before attempting to recognize its content
            
            </summary>
            
        </member>
        <member name="T:IDRSNET.CBlankPageDetection">
            <summary>
            The CBlankPageDetection class offers blank image detection features
            \ingroup module_prepro
            It contains an implementation of blank page detection algorithm that is able to detect whether a page contains any useful information.
            The algorithm can work with images obtained from various paper sources, like glaring white, yellow old paper or gray recycled paper.
            \req IDRS::IDRS_MODULE_PREPRO
            </summary>
        </member>
        <member name="T:IDRSNET.CBlankPageDetection.eDetectionMode">
            <summary>
            The blank page detection modes.
            </summary>
        </member>
        <member name="F:IDRSNET.CBlankPageDetection.eDetectionMode.FAST">
            <summary>
            FAST
            The blank page detection FAST mode uses basic detection algorithm,
            which will result in a near-immediate answer, at the cost of possible
            incorrect answer for some specific border cases.
            This detection mode can be used when processing speed is crucial, and
            page differenciation is clear ("blank" pages are full white, and "non-blank"
            pages contains several lines of text).
            This is the default mode when instanciating a CBlankPageDetection object.
            </summary>
        </member>
        <member name="F:IDRSNET.CBlankPageDetection.eDetectionMode.ADVANCED">
            <summary>
            ADVANCED
            The blank page detection ADVANCED mode performs extra preprocessing and enhancement
            steps on the provided pages, in order to get reliable results according to the provided
            sensitivity. This mode will take more processing time than the FAST mode, but can
            more successfully categorize difficult cases, like damaged blank paper or pages with very
            few characters.
            This detection mode can be used when detection accuracy is more important than
            processing speed.
            </summary>
        </member>
        <member name="M:IDRSNET.CBlankPageDetection.#ctor(IDRSNET.CIDRS)">
            <summary>
            Creates a new CBlankPageDetection object.
            </summary>
            <param name="argIDRS">The iDRS</param>
            <returns>The newly created CBlankPageDetection object.</returns>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CBlankPageDetection.Finalize">
            <summary>
            Destructor of CBlankPageDetection.
            </summary>
        </member>
        <member name="M:IDRSNET.CBlankPageDetection.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CBlankPageDetection.GetPointer">
            <summary>
            Internal override  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CBlankPageDetection.SetPointer(System.IntPtr)">
            <summary>
            Internal override  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CBlankPageDetection object</param>
        </member>
        <member name="M:IDRSNET.CBlankPageDetection.IsBlank(IDRSNET.CImage)">
            <summary>
            IsBlank detects blank images.
            </summary>
            <pre>! IsNull ()</pre>
            <pre>! argImage.IsNull ()</pre>
            <param name="argImage">The image to analyze.</param>
            <returns>IDRS_TRUE if the image is considered as blank.</returns>
            <returns>IDRS_FALSE otherwise.</returns>
        </member>
        <member name="M:IDRSNET.CBlankPageDetection.IsBlank(IDRSNET.CPage)">
            <summary>
            IsBlank detects blank pages.
            </summary>
            <pre>! IsNull ()</pre>
            <pre>! argPage.IsNull ()</pre>
            <param name="argPage">The page to analyze.</param>
            <returns>IDRS_TRUE if the white page is considered as blank.</returns>
            <returns>IDRS_FALSE otherwise.</returns>
        </member>
        <member name="P:IDRSNET.CBlankPageDetection.BlankDetectionMode">
            <summary>
            Get/Set the detection mode.
            </summary>
            
        </member>
        <member name="P:IDRSNET.CBlankPageDetection.Sensitivity">
            <summary>
            Get/Set the sensitivity.
            </summary>
            <remarks>
            The default sensitivity value (50) is expected to be the most suitable for the general use case.
            You can however change this default sensitivity to favor detection of blank pages (lower sensitivity) or on the contrary disfavor it (higher sensitivity).
            This can be useful for instance in specific projects where blank page detection is crucial, and/or when input documents have distinct characteristics which
            would not be properly handled by default configuration.
            </remarks>
            <pre> ! IsNull ()
            ucSensitivity >= 1
            ucSensitivity &lt;= 100 </pre>
        </member>
        <member name="T:IDRSNET.CBookmarksOptions">
            <summary>
            CBookmarksOptions class defines all bookmarks options.
            </summary>
        </member>
        <member name="M:IDRSNET.CBookmarksOptions.#ctor">
            <summary>
            Create is instantiating a new instance of CBookmarksOptions and associated data object
            </summary>
            <returns>New instance of CBookmarksOptions</returns>
        </member>
        <member name="M:IDRSNET.CBookmarksOptions.Finalize">
            <summary>
            Destructor of CBookmarksOptions.
            </summary>
        </member>
        <member name="M:IDRSNET.CBookmarksOptions.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CBookmarksOptions.GetPointer">
            <summary>
            Internal virtual  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CBookmarksOptions.SetPointer(System.IntPtr)">
            <summary>
            Internal virtual  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CBookmarksOptions object</param>
        </member>
        <member name="M:IDRSNET.CBookmarksOptions.GenerateBookmarks(IDRSNET.CPageContent2,System.String)">
            <summary>
            Helper method allowing to automatically generate some bookmarks corresponding to the provided page's content.
            The generated bookmarks will be organized the following way:
            - One bookmark for the whole page, with DisplayMode set to Page
            - As children of this page-level bookmark, one bookmark for each detected title, table and graphics. Title
            bookmarks will have DisplayMode set to PageWidth, while table and graphics bookmarks will have DisplayMode Rectangle.
            These bookmarks will be added following the reading order of the page.
            </summary>
            <param name="argPageContent">The page content</param>
            <param name="strPageTitle">The title of the parent bookmark for the whole page. If left NULL, "Page" will be used.</param>
            <returns>The generated bookmarks</returns>
        </member>
        <member name="P:IDRSNET.CBookmarksOptions.BookmarksMode">
            <summary>
            Get/Set the bookmarks mode.
            </summary>
            
        </member>
        <member name="T:IDRSNET.CConsoleLogger">
            <summary>
            The CConsoleLogger class is an iDRS implementation of the ILogger interface.
            It exposes a default iDRS Logger that can be used to log messages during an operation.
            This class will print log messages in console.
            Log entries are expressed by this class as per the following pattern: YYYY-MM-DD hh:mm:ss [severity level] [message]
            - First part is a timestamp of a current date time
            - Second part is the severity level of the message
            - Third part is the message itself.
            </summary>
        </member>
        <member name="M:IDRSNET.CConsoleLogger.#ctor">
            <summary>
            Creates an object
            </summary>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CConsoleLogger.Finalize">
            <summary>
            Destructor of CConsoleLogger.
            </summary>
        </member>
        <member name="M:IDRSNET.CConsoleLogger.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CConsoleLogger.GetPointer">
            <summary>
            Internal GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CConsoleLogger.SetPointer(System.IntPtr)">
            <summary>
            Internal SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CConsoleLogger object</param>
        </member>
        <member name="M:IDRSNET.CConsoleLogger.OnReceivedMessage(IDRSNET.ILogger.eSeverityLevel,System.String)">
            <summary>
            OnReceivedMessage is a method which will be called on reception of meaningful events
            to provide information about the status and the type of the event. Function will provide
            information only to events that occur with a severity level equal or higher than the logging
            severity level provided by user. This function appends the timestamp and the message severity
            level overhead to the output string and then prints it to console
            </summary>
            <param name="evMessageSeverityLevel">The severity level of the message that will be logged</param>
            <param name="strMessage">A message providing more information about the occurred event</param>
        </member>
        <member name="T:IDRSNET.CCustomAlgorithm">
            <summary>
            CCustomAlgorithm class enables integrators to access custom algorithms implemented in iDRS.
            The custom algorithms are designed for special cases, when the standard approach fails to correctly output the expected results.
            A custom algorithm is generally applied to a CPage object and it will store the results within the same object.
            The integrator can modify the custom algorithm behavior by setting various parameters using SetParameter function
            </summary>
        </member>
        <member name="M:IDRSNET.CCustomAlgorithm.#ctor(System.String)">
            <summary>
            Create initializes a CCustomAlgorithm object.
            If the algorithm name is not correct, the function will throw an exception
            </summary>
            <param name="strAlgorithmName">Algorithm name to use</param>
            <returns>A new instance of CCustomAlgorithm</returns>
        </member>
        <member name="M:IDRSNET.CCustomAlgorithm.Finalize">
            <summary>
            Destructor of CCustomAlgorithm.
            </summary>
        </member>
        <member name="M:IDRSNET.CCustomAlgorithm.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CCustomAlgorithm.GetPointer">
            <summary>
            Internal virtual  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CCustomAlgorithm.SetPointer(System.IntPtr)">
            <summary>
            Internal virtual  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CCustomAlgorithm object</param>
        </member>
        <member name="M:IDRSNET.CCustomAlgorithm.Execute(IDRSNET.CPage)">
            <summary>
            Execute runs the custom algorithm on the supplied CPage object
            </summary>
            <param name="argPage">CPage object where the custom algorithm will be executed</param>
            <returns>IDRS_SUCCESS on success, error code on failure</returns>
        </member>
        <member name="M:IDRSNET.CCustomAlgorithm.SetParameter(System.String,System.UInt32)">
            <summary>
            SetParameter sets a parameter that will be used by the custom algorithm
            </summary>
            <param name="strParameterName">Parameter name</param>
            <param name="uiParametersValue">Parameter value</param>
        </member>
        <member name="T:IDRSNET.CDarkBordersRemoval">
            <summary>
            The CDarkBordersRemoval class provides dark  borders removal capabilities.
            \ingroup module_prepro_adv
            It features an algorithm for automatic dark border detection and removal in all types of images: monochrome, grayscale or color.
            The integrator can also specify threshold under which the border pixels are considered "dark" by the dark border removal algorithm.
            If not, the algorithm will use the following predefined values for the definition of "dark" borders:
            - threshold under which the border pixels are considered "dark": 0x7A
            - threshold under which the pixels connected to the border pixels are considered "dark": 0x7A
            - value indicating the maximum difference in greyscale levels between 2 adjacent pixels: 0x1E
            \req IDRS::IDRS_MODULE_PREPRO with extension IDRS::IDRS_PREPRO_EXTENSION_ADVANCED_PREPRO
            <see cref="F:IDRSNET.IDRS_MODULE.IDRS_MODULE_PREPRO"/> for information about the preprocessing library
            <see cref="F:IDRSNET.IDRS_EXTENSION.IDRS_PREPRO_EXTENSION_ADVANCED_PREPRO"/> for information about advanced preprocessing extension
            </summary>
        </member>
        <member name="M:IDRSNET.CDarkBordersRemoval.#ctor(IDRSNET.CIDRS)">
            <summary>
            Creates a new CDarkBordersRemoval object.
            </summary>
            <param name="argIDRS">The iDRS</param>
            <returns>The newly created CDarkBordersRemoval object.</returns>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CDarkBordersRemoval.Finalize">
            <summary>
            Destructor of CDarkBordersRemoval.
            </summary>
        </member>
        <member name="M:IDRSNET.CDarkBordersRemoval.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CDarkBordersRemoval.GetPointer">
            <summary>
            Internal override  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CDarkBordersRemoval.SetPointer(System.IntPtr)">
            <summary>
            Internal override  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CDarkBordersRemoval object</param>
        </member>
        <member name="M:IDRSNET.CDarkBordersRemoval.RemoveDarkBorders(IDRSNET.CImage,IDRSNET.CImage,System.Boolean,System.Byte,System.Byte,System.Byte)">
            <summary>
            RemoveDarkBorders removes dark borders in the given image.
            RemoveDarkBorders function works with all image types: black and white, greyscale and color images.
            The dark border is composed of the "dark" pixels present on the margins of the image and the "dark" pixels that are connected to them.
            The algorithm considers the following pixels as "dark" and clears them from the image:
            <list type="bullet">
            <item>
            <description>pixels that are on the image margins, with their greyscale levels lower than <b>ubDarkBorder</b> parameter</description>
            </item>
            <item>
            <description>pixels that are connecting to at least 1 other "dark" pixels, with the greyscale levels below <b>ubDarkInside</b> parameter</description>
            </item>
            <item>
            <description>pixels that are connecting to at least 1 other "dark" pixels, with the difference of the greyscale levels lower than <b>ubDelta</b> parameter</description>
            </item>
            </list>
            The parameter <b>bCropImage</b> specifies how the pixels that are found as part of the dark border surrounding the image are treated:
            <list type="bullet">
            <item>
            <description>If the parameter is IDRS_TRUE, then the image will be cropped and the dark borders will be removed from the image. In this case, the resulting image dimensions will be different than the input image.</description>
            </item>
            <item>
            <description>If the parameters is IDRS_FALSe, then the "dark" pixels will be changed to white color.</description>
            </item>
            </list>
            </summary>
            <pre>! IsNull ()</pre>
            <pre>! argImageSource.IsNull ()</pre>
            <param name="argImageTarget">The target image.</param>
            <param name="argImageSource">The source image.</param>
            <param name="bCropImage">Boolean flag specifying if the image will be cropped to remove the dark borders</param>
            <param name="ubDarkBorder">Greyscale value indicating the threshold under which the border pixels are considered "dark"</param>
            <param name="ubDarkInside">Greyscale value indicating the threshold under which the pixels connected to the border pixels are considered "dark"</param>
            <param name="ubDelta">Value indicating the maximum difference in greyscale levels between 2 adjacent pixels.</param>
            <remarks>If one of the pixels is "dark" and the difference is lower than ubDelta, both pixels are considered "dark"</remarks>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CDarkBordersRemoval.SetMargins(System.UInt32,System.UInt32)">
            <summary>
            SetMargins sets the page dark border margin limitations.
            The default value is 0, meaning that the dark border removal can filter out any number of pixels that are considered "border"
            When the margins are set to any other value than 0, the dark border removal will occur only in the margins defined by the specified values.
            If border width is larger equal or equal to width/2 or border height is larger or equal to height/2, an exception is thrown (IDRS_ERROR_PREPRO_DARKBORDER_REMOVAL_INVALID_MARGINS)
            Please note that setting the page margins increases the computation time.
            </summary>
            <param name="uiMaxBorderWidth">Maximum border width where the dark border algorithm will work</param>
            <param name="uiMaxBorderHeight">Maximum border height where the dark border algorithm will work</param>
        </member>
        <member name="M:IDRSNET.CDarkBordersRemoval.GetMargins(System.UInt32@,System.UInt32@)">
            <summary>
            GetMargins returns the values set for page margins
            </summary>
            <param name="uiMaxBorderWidth">Reference variable that will receive the value set for maximum border width</param>
            <param name="uiMaxBorderHeight">Reference variable that will receive the value set for maximum border height</param>
        </member>
        <member name="T:IDRSNET.CDeskew">
            <summary>
            The CDeskew class offers deskew image correction.
            \ingroup module_prepro
            Deskew image correction is normally used for images that were scanned misaligned or photographed from a low angle
            \req IDRS::IDRS_MODULE_PREPRO
            <see cref="F:IDRSNET.IDRS_MODULE.IDRS_MODULE_PREPRO"/> 
            </summary>
        </member>
        <member name="T:IDRSNET.CDeskew.eDimensionAdjust">
            <summary>
            The eDimensionAdjust enum defines the dimension adjustment options available when performing Deskew feature.
            </summary>
        </member>
        <member name="F:IDRSNET.CDeskew.eDimensionAdjust.ADJUST_NONE">
            <summary>
            Do not perform dimensions adjustment.
            The deskewed image dimensions will be slightly bigger than the original image if a skew angle
            has been detected. This is the fastest mode, and ensures that all the information on the image is kept.
            </summary>
        </member>
        <member name="F:IDRSNET.CDeskew.eDimensionAdjust.ADJUST_CROP">
            <summary>
            If a skew angle is found, crop the deskewed image so that its dimensions matches exactly
            the original image.
            This guarantees that the created output document will have the proper dimensions when it's according
            to a standard (e.g. A4 paper size).
            Note that if the image was containing data very close to the borders, it will be removed by the crop operation.
            </summary>
        </member>
        <member name="F:IDRSNET.CDeskew.eDimensionAdjust.ADJUST_CROP_IF_POSSIBLE">
            <summary>
            If a skew angle is found, the image will get cropped later on when running page recognition, only
            if no zones are detected in the area that will get cropped.
            This ensure that no data will be lost by cropping, and that the created output document will match original
            sizing whenever possible.
            The eventual cropping is performed at the end of CPageRecognition::AnalyzeLayout() and
            CPageRecognition::RecognizePage(). Note that no cropping will occur after CPageRecognition::RecognizeZones().
            </summary>
        </member>
        <member name="F:IDRSNET.CDeskew.eDimensionAdjust.ADJUST_CONTENT_AWARE_RESIZE">
            <summary>
            If a skew angle is found, the image will be resized to its original dimensions using a content-aware algorithm.
            This algorithm ensures that valuable information on the image (like text or graphics) will be kept in priority,
            which results in mainly "empty" areas being affected.
            </summary>
            <remarks>
            This adjust mode is slower than the others; for instance, resizing an A4 image at 300 DPI with a moderate
            skew angle can take a few seconds.
            </remarks>
        </member>
        <member name="M:IDRSNET.CDeskew.#ctor(IDRSNET.CIDRS)">
            <summary>
            Creates a new CDeskew object.
            </summary>
            <param name="argIDRS">The iDRS</param>
            <returns>The newly created CDeskew object.</returns>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CDeskew.Finalize">
            <summary>
            Destructor of CDeskew.
            </summary>
        </member>
        <member name="M:IDRSNET.CDeskew.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CDeskew.GetPointer">
            <summary>
            Internal override  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CDeskew.SetPointer(System.IntPtr)">
            <summary>
            Internal override  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CDeskew object</param>
        </member>
        <member name="M:IDRSNET.CDeskew.Deskew(IDRSNET.CImage)">
            <summary>
            Deskew analyses and rotates the image to correct its skew angle.
            </summary>
            <pre>! IsNull ()</pre>
            <pre>! argImage.IsNull ()</pre>
            <param name="argImage">The image to process.</param>
            <returns>The skew angle.</returns>
            <remarks>Deskew handles images skewed upto 10 degrees. It doesn't handle higher skew angles.</remarks>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CDeskew.Deskew(IDRSNET.CPage)">
            <summary>
            Deskew analyses and rotates the page to correct its skew angle.
            If the page has a color or greyscale image and a black and white image:
            - the skew angle is corrected in the color/greyscale image
            - the black and white image is removed
            </summary>
            <pre>! IsNull ()</pre>
            <pre>! argPage.IsNull ()</pre>
            <pre>argPage.GetHeight () &amp;&amp; argPage.GetWidth ()</pre>
            <param name="argPage">The page to deskew.</param>
            <returns>The skew angle.</returns>
            <remarks>The page's zone are removed.</remarks>
            <remarks>Deskew handles images skewed upto 10 degrees. It doesn't handle higher skew angles.</remarks>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CDeskew.Rotate(IDRSNET.CImage,IDRSNET.CIDRSSkewAngle)">
            <summary>
            Rotate rotates the image to correct its skew angle using a computed by a previous call to Deskew
            </summary>
            <pre>! IsNull ()</pre>
            <pre>! argImage.IsNull ()</pre>
            <param name="argImage">The image to process.</param>
            <param name="saSkewAngle">The skew angle.</param>
            <remarks>saSkewAngle must have been computed by a previous call to Deskew and must not be modified</remarks>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CDeskew.Rotate(IDRSNET.CPage,IDRSNET.CIDRSSkewAngle)">
            <summary>
            Rotate rotates the page to correct its skew angle using a computed by a previous call to Deskew
            If the page has a color or greyscale image and a black and white image:
            - the skew angle is corrected in the color/greyscale image
            - the black and white image is removed
            </summary>
            <pre>! IsNull ()</pre>
            <pre>! argPage.IsNull ()</pre>
            <pre>argPage.GetHeight () &amp;&amp; argPage.GetWidth ()</pre>
            <param name="argPage">The page to deskew.</param>
            <param name="saSkewAngle">The skew angle.</param>
            <remarks>The page's zone are removed.</remarks>
            <remarks>saSkewAngle must have been computed by a previous call to Deskew and must not be modified</remarks>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CDeskew.SetInternalParameters(System.IntPtr,System.UInt32)">
            <summary>
            ! For internal use only
            </summary>
        </member>
        <member name="M:IDRSNET.CDeskew.GetInternalParameters(System.IntPtr,System.UInt32)">
            <summary>
            ! For internal use only
            </summary>
        </member>
        <member name="P:IDRSNET.CDeskew.ForceDeskew">
            <summary>
            Get/Set the force deskew flag.
            Under certain circumstances, rotating the image to correct
            its skew angle may decrease the character recognition accuracy.
            iDRS is able to analyse the image and detect from a character
            recognition accuracy point of view whether it's better to
            rotate the image or not.
            Because the skew angle may be visible in the output document,
            the integrator can choose to force the deskew to rotate the image,
            even if it affects the accuracy.
            If the force deskew flag is turned off, the image is
            analyzed before rotation. The software may choose not
            to rotate the image depending on the analysis result
            in order to improve the character recognition accuracy.
            If the force deskew flag is turned on, the image is
            rotated to correct the skew angle.
            </summary>
            
        </member>
        <member name="P:IDRSNET.CDeskew.DimensionAdjust">
            <summary>
            Get/Set the behavior regarding dimension adjustment for deskew.
            </summary>
            
        </member>
        <member name="T:IDRSNET.CDeskewOptions">
            <summary>
            The CDeskewOptions is a parameterization class allowing to deskew the provided image at recognition time.
            <see cref="T:IDRSNET.CDeskew"/> 
            </summary>
        </member>
        <member name="T:IDRSNET.CDeskewOptions.DeskewPolicy">
            <summary>
            Policy Enumerator exposing the different deskew policies available.
            </summary>
        </member>
        <member name="F:IDRSNET.CDeskewOptions.DeskewPolicy.DeskewPolicyNone">
            <summary>
            Deskew will not be performed
            </summary>
        </member>
        <member name="F:IDRSNET.CDeskewOptions.DeskewPolicy.DeskewPolicyAlways">
            <summary>
            Deskew will always be performed
            </summary>
        </member>
        <member name="F:IDRSNET.CDeskewOptions.DeskewPolicy.DeskewPolicyIfText">
            <summary>
            Deskew will be performed before recognition, unless no text or table zones are detected on the page.
            </summary>
            <remarks>
            The deskew feature is useful and highly recommended for documents containing text, however applying deskew
            operation on a document containing no text may sometimes rotate the page unexpectedly. This policy allows to prevent
            such cases to happen.
            </remarks>
        </member>
        <member name="M:IDRSNET.CDeskewOptions.#ctor">
            <summary>
            Creates a CDeskewOptions object with the default value
            </summary>
        </member>
        <member name="M:IDRSNET.CDeskewOptions.Finalize">
            <summary>
            Destructor of CDeskewOptions.
            </summary>
        </member>
        <member name="M:IDRSNET.CDeskewOptions.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CDeskewOptions.GetPointer">
            <summary>
            Internal virtual  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CDeskewOptions.SetPointer(System.IntPtr)">
            <summary>
            Internal virtual  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CDeskewOptions object</param>
        </member>
        <member name="P:IDRSNET.CDeskewOptions.Policy">
            <summary>
            Get/Set the deskew policy.
            </summary>
            <remarks>Default policy is PolicyNone.</remarks>
        </member>
        <member name="P:IDRSNET.CDeskewOptions.ForceDeskew">
            <summary>
            Get/Set the force deskew flag.
            Under certain circumstances, rotating the image to correct
            its skew angle may decrease the character recognition accuracy.
            iDRS is able to analyse the image and detect from a character
            recognition accuracy point of view whether it's better to
            rotate the image or not.
            Because the skew angle may be visible in the output document,
            the integrator can choose to force the deskew to rotate the image,
            even if it affects the accuracy.
            If the force deskew flag is turned off, the image is
            analyzed before rotation. The software may choose not
            to rotate the image depending on the analysis result
            in order to improve the character recognition accuracy.
            If the force deskew flag is turned on, the image is
            rotated to correct the skew angle.
            </summary>
            
        </member>
        <member name="P:IDRSNET.CDeskewOptions.DimensionAdjust">
            <summary>
            Get/Set the behavior regarding dimension adjustment for deskew.
            </summary>
            
        </member>
        <member name="T:IDRSNET.CDespeckle">
            <summary>
            The CDespeckle class provides image noise reduction features via an image despeckle filter
            \ingroup module_prepro
            It works only with black and white images
            \req IDRS::IDRS_MODULE_PREPRO
            <see cref="F:IDRSNET.IDRS_MODULE.IDRS_MODULE_PREPRO"/> 
            <see cref="T:IDRSNET.CAdvancedDespeckle"/> for the advanced despeckle algorithms
            </summary>
        </member>
        <member name="M:IDRSNET.CDespeckle.#ctor(IDRSNET.CIDRS)">
            <summary>
            Creates a new CDespeckle object.
            </summary>
            <param name="argIDRS">The iDRS</param>
            <returns>The newly created CDespeckle object.</returns>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CDespeckle.Finalize">
            <summary>
            Destructor of CDespeckle.
            </summary>
        </member>
        <member name="M:IDRSNET.CDespeckle.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CDespeckle.GetPointer">
            <summary>
            Internal override  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CDespeckle.SetPointer(System.IntPtr)">
            <summary>
            Internal override  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CDespeckle object</param>
        </member>
        <member name="M:IDRSNET.CDespeckle.Despeckle(IDRSNET.CImage,System.UInt32,System.UInt32)">
            <summary>
            Despeckle removes all the groups of connected pixels with a number of pixels below the uiSpeckleMaxSize parameter.
            Those connected pixels are not removed if the distance to a larger connected component is below the uiDilate parameter.
            As a result only the isolated pixels get deleted.
            </summary>
            <remarks>Despeckling is only available for black and white images.</remarks>
            <pre>! IsNull ()</pre>
            <pre>! argImage.IsNull ()</pre>
            <pre>argImage.GetColorMode () == CImageProperties::BLACK_AND_WHITE</pre>
            <param name="argImage">The image to despeckle.</param>
            <param name="uiSpeckleMaxSize">The size of the speckles to remove, must be less than 20 pixels.</param>
            <param name="uiDilate">The dilatation, must be less than 20 pixels.</param>
        </member>
        <member name="M:IDRSNET.CDespeckle.Despeckle(IDRSNET.CPage,System.UInt32,System.UInt32)">
            <summary>
            Despeckle removes all the groups of connected pixels with a number of pixels below the uiSpeckleMaxSize parameter.
            Those connected pixels are not removed if the distance to a larger connected component is below the uiDilate parameter.
            As a result only the isolated pixels get deleted.
            </summary>
            <remarks>Because despeckling is only available for black and white images, the page must have a black and white image.</remarks>
            <pre>! IsNull ()</pre>
            <pre>! argPage.IsNull ()</pre>
            <pre>argPage.IsBlackAndWhiteImageAvailable ()</pre>
            <param name="argPage">The page to despeckle.</param>
            <param name="uiSpeckleMaxSize">The size of the speckles to remove, must be less than 20 pixels.</param>
            <param name="uiDilate">The dilatation, must be less than 20 pixels.</param>
        </member>
        <member name="M:IDRSNET.CDespeckle.Despeckle(IDRSNET.CImage,IDRSNET.CPolygon,System.UInt32,System.UInt32)">
            <summary>
            Despeckle removes all the groups of connected pixels selected by the given callback object.
            Those connected pixels are not removed if the distance to a larger connected component is below the uiDilate parameter.
            As a result only the isolated pixels get deleted.
            </summary>
            <remarks>Despeckling is only available for black and white images.</remarks>
            <pre>! IsNull ()</pre>
            <pre>! argImage.IsNull ()</pre>
            <pre>! argPolygon.IsNull ()</pre>
            <pre>argImage.GetColorMode () == CImageProperties::BLACK_AND_WHITE</pre>
            <param name="argImage">The image to despeckle.</param>
            <param name="argPolygon">The area to process.</param>
            <param name="uiSpeckleMaxSize">The size of the speckles to remove, must be less than 20 pixels.</param>
            <param name="uiDilate">The dilatation, must be less than 20 pixels.</param>
        </member>
        <member name="M:IDRSNET.CDespeckle.Despeckle(IDRSNET.CPage,IDRSNET.CPolygon,System.UInt32,System.UInt32)">
            <summary>
            Despeckle removes all the groups of connected pixels selected by the given callback object.
            Those connected pixels are not removed if the distance to a larger connected component is below the uiDilate parameter.
            As a result only the isolated pixels get deleted.
            </summary>
            <remarks>Because despeckling is only available for black and white images, the page must have a black and white image.</remarks>
            <pre>! IsNull ()</pre>
            <pre>! argPage.IsNull ()</pre>
            <pre>! argPolygon.IsNull ()</pre>
            <pre>argPage.IsBlackAndWhiteImageAvailable ()</pre>
            <param name="argPage">The page to despeckle.</param>
            <param name="argPolygon">The area to process.</param>
            <param name="uiSpeckleMaxSize">The size of the speckles to remove, must be less than 20 pixels.</param>
            <param name="uiDilate">The dilatation, must be less than 20 pixels.</param>
        </member>
        <member name="T:IDRSNET.CDigitalCertificate">
            <summary>
            CDigitalCertificate manages the digital certificate content.
            \req IDRS::IDRS_MODULE_DOCUMENT_OUTPUT
            </summary>
        </member>
        <member name="M:IDRSNET.CDigitalCertificate.#ctor">
            <summary>
            Create creates a CDigitalCertificate object.
            </summary>
            <returns>The newly created page.</returns>
        </member>
        <member name="M:IDRSNET.CDigitalCertificate.Finalize">
            <summary>
            Destructor of CDigitalCertificate.
            </summary>
        </member>
        <member name="M:IDRSNET.CDigitalCertificate.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CDigitalCertificate.GetPointer">
            <summary>
            Internal virtual  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CDigitalCertificate.SetPointer(System.IntPtr)">
            <summary>
            Internal virtual  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CDigitalCertificate object</param>
        </member>
        <member name="P:IDRSNET.CDigitalCertificate.IssuerDataSize">
            <summary>
            Get the size of the issuer data currently stored.
            
            </summary>
            
        </member>
        <member name="P:IDRSNET.CDigitalCertificate.SerialNumberDataSize">
            <summary>
            Get the size of the serial number data currently stored.
            
            </summary>
            
        </member>
        <member name="P:IDRSNET.CDigitalCertificate.IssuerData">
            <summary>
            Get/Set the issuer data that will be used for document signing.
            The supplied data are stored and will be used to search the signature when the document signing step will be performed.
            Please note that during the signing step, the signature lookup is performed in "MY" store.
            </summary>
            
            <pre> ( xubIssuerData == NULL &amp;&amp; uiIssuerDataSize == 0 ) || ( xubIssuerData != NULL &amp;&amp; uiIssuerDataSize != 0 ) </pre>
        </member>
        <member name="P:IDRSNET.CDigitalCertificate.SerialNumberData">
            <summary>
            Get/Set the serial number data that will be used for document signing.
            The supplied data are stored and will be used to search the signature when the document signing step will be performed.
            Please note that during the signing step, the signature lookup is performed in "MY" store.      /// Set the serial number data.
            </summary>
            
            <pre> ( xubSerialNumberData == NULL &amp;&amp; uiSerialNumberDataSize == 0 ) || ( xubSerialNumberData != NULL &amp;&amp; uiSerialNumberDataSize != 0 ) </pre>
        </member>
        <member name="T:IDRSNET.CDigitalSignature">
            <summary>
            CDigitalSignature container class that manages all signature aspects (digital certificate, UI content and page index).
            \req IDRS::IDRS_MODULE_DOCUMENT_OUTPUT
            </summary>
        </member>
        <member name="M:IDRSNET.CDigitalSignature.#ctor">
            <summary>
            Create creates a CDigitalSignature object.
            </summary>
            <returns>The newly created page.</returns>
        </member>
        <member name="M:IDRSNET.CDigitalSignature.Finalize">
            <summary>
            Destructor of CDigitalSignature.
            </summary>
        </member>
        <member name="M:IDRSNET.CDigitalSignature.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CDigitalSignature.GetPointer">
            <summary>
            Internal override  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CDigitalSignature.SetPointer(System.IntPtr)">
            <summary>
            Internal override  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CDigitalSignature object</param>
        </member>
        <member name="P:IDRSNET.CDigitalSignature.SignatureContent">
            <summary>
            Get/Set the signature visual content.
            By default the signatures placed by iDRS do not have any visual elements.
            Using CSignatureContent you can define the way the signature looks on the pdf page as well as its location
            </summary>
            
        </member>
        <member name="P:IDRSNET.CDigitalSignature.PageIndex">
            <summary>
            Get/Set the page index      /// default value 0
            </summary>
            
        </member>
        <member name="P:IDRSNET.CDigitalSignature.DigitalCertificate">
            <summary>
            Get/Set the digital signature
            </summary>
            
        </member>
        <member name="T:IDRSNET.CDitherRemoval">
            <summary>
            CDitherRemoval attempts to perform the reversal of image dithering, which is a common technique for printing with inkjet printers.
            Dithering is analogous to the halftone technique used in printing. Due to the fact that during the dithering process a part of the image information is lost,
            the resulting image after the dithering removal will not be the same as the original.
            However, the resulting image would improve the recognition rate of iDRS recognition engines (both OCR and barcode).
            </summary>
            <remarks>
            The algorithm works only for black &amp; white images
            \ingroup module_prepro
            \req IDRS::IDRS_MODULE_PREPRO
            <see cref="F:IDRSNET.IDRS_MODULE.IDRS_MODULE_PREPRO"/> 
            </remarks>
        </member>
        <member name="M:IDRSNET.CDitherRemoval.#ctor(IDRSNET.CIDRS)">
            <summary>
            Creates a new CDitherRemoval object.
            </summary>
            <param name="argIDRS">The iDRS</param>
            <returns>The newly created CDitherRemoval object.</returns>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CDitherRemoval.Finalize">
            <summary>
            Destructor of CDitherRemoval.
            </summary>
        </member>
        <member name="M:IDRSNET.CDitherRemoval.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CDitherRemoval.GetPointer">
            <summary>
            Internal override  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CDitherRemoval.SetPointer(System.IntPtr)">
            <summary>
            Internal override  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CDitherRemoval object</param>
        </member>
        <member name="M:IDRSNET.CDitherRemoval.RemoveDither(IDRSNET.CImage)">
            <summary>
            RemoveDither applies the dither removal algorithm to the supplied image.
            The result will be stored in the same image.
            </summary>
            <param name="argImage">Image where the dither removal algorithm will be executed</param>
            <exception>The function throws CIDRSException if the supplied image is not black &amp; white</exception>
        </member>
        <member name="M:IDRSNET.CDitherRemoval.RemoveDither(IDRSNET.CImage,IDRSNET.CImage)">
            <summary>
            RemoveDither applies the dither removal algorithm to argSourceImage and stores the result in argTargetImage
            </summary>
            <param name="argTargetImage">Image object where the resulting image will be stored</param>
            <param name="argSourceImage">Source image</param>
            <exception>The function throws CIDRSException if the supplied image is not black &amp; white</exception>
        </member>
        <member name="M:IDRSNET.CDitherRemoval.RemoveDither(IDRSNET.CPage)">
            <summary>
            RemoveDither applies the dither removal algorithm to the supplied argPage.
            The result will be stored in the same page
            </summary>
            <param name="argPage">Page where the dither removal algorithm will be executed</param>
            <exception>The function throws CIDRSException if the supplied image is not black &amp; white</exception>
        </member>
        <member name="T:IDRSNET.CDocumentOutput">
            <summary>
            The CDocumentOutput class exports iDRS structures to external file formats.
            \req IDRS::IDRS_MODULE_DOCUMENT_OUTPUT
            </summary>
        </member>
        <member name="M:IDRSNET.CDocumentOutput.#ctor(IDRSNET.CIDRS)">
            <summary>
            Create creates a CDocumentOutput object.
            </summary>
            <param name="argIDRS">The IDRS handle</param>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CDocumentOutput.#ctor(IDRSNET.CIDRS,IDRSNET.IBaseImagePlugin)">
            <summary>
            Create creates a CDocumentOutput object.
            This CDocumentOutput object will use the specified image compressor.
            </summary>
            <param name="argIDRS">The IDRS handle</param>
            <param name="argImagePlugin">The external image plugin to use.</param>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CDocumentOutput.Finalize">
            <summary>
            Destructor of CDocumentOutput.
            </summary>
        </member>
        <member name="M:IDRSNET.CDocumentOutput.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CDocumentOutput.GetPointer">
            <summary>
            Internal virtual  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CDocumentOutput.SetPointer(System.IntPtr)">
            <summary>
            Internal virtual  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CDocumentOutput object</param>
        </member>
        <member name="M:IDRSNET.CDocumentOutput.Save(System.String,IDRSNET.COutputParams,IDRSNET.CPage[])">
            <summary>
            Creates the output file using the supplied document output parameters and pages,
            and writes it to the given file path.
            </summary>
            <pre>! IsNull ()</pre>
            <pre>! argOutputParams.IsNull ()</pre>
            <pre>uiPageCount != 0 &amp;&amp; xPageBuffer != NULL</pre>
            <param name="strOutputFilePath">The path to the output file.</param>
            <param name="argOutputParams">The document output parameters.</param>
            <param name="xPageBuffer">The buffer containing the pages to format.</param>
            <remarks>
            Please note that GetLastWarning() can be called after calling Save() to check if there were warnings
            during the save operation
            </remarks>
        </member>
        <member name="M:IDRSNET.CDocumentOutput.Save(System.IO.Stream,IDRSNET.COutputParams,IDRSNET.CPage[])">
            <summary>
            Creates the output document using the supplied document output parameters and pages,
            and writes it to the given stream.
            </summary>
            <pre>! IsNull ()</pre>
            <pre>! argOutputParams.IsNull ()</pre>
            <pre>argOutputStream.IsReadOpen () &amp;&amp; argOutputStream.IsWriteOpen ()</pre>
            <pre>uiPageCount != 0 &amp;&amp; xPageBuffer != NULL</pre>
            <param name="argOutputStream">The stream where the document content will be written</param>
            <param name="argOutputParams">The output parameters.</param>
            <param name="xPageBuffer">The buffer containing the pages to format.</param>
            <remarks>
            Please note that GetLastWarning() can be called after calling Save() to check if there were warnings
            during the save operation
            </remarks>
        </member>
        <member name="M:IDRSNET.CDocumentOutput.Save(System.String,IDRSNET.COutputParams,IDRSNET.IPageSet)">
            <summary>
            Creates the output file using the supplied document output parameters and page set,
            and writes it to the given file path.
            </summary>
            <pre>! IsNull ()</pre>
            <pre>! argOutputParameters.IsNull ()</pre>
            <param name="strOutputFilePath">The path to the output file.</param>
            <param name="argOutputParams">The output parameters.</param>
            <param name="argPageSet">CPageSet object containing the information about the image and the recognition results</param>
            <remarks>
            Please note that all the pages in the the supplied CPageSet object will be used for creating the document
            in the desired format.
            The function will automatically seek to the beginning of the page set object and add all the pages to the output document.
            Please note that GetLastWarning() can be called after calling Save() to check if there were warnings
            during the save operation
            <see cref="T:IDRSNET.CMemoryPageSet"/> 
            <see cref="T:IDRSNET.CPersistentPageSet"/> 
            </remarks>
        </member>
        <member name="M:IDRSNET.CDocumentOutput.Save(System.IO.Stream,IDRSNET.COutputParams,IDRSNET.IPageSet)">
            <summary>
            Creates the output document using the supplied document output parameters and page set,
            and writes it to the given stream.
            </summary>
            <pre>! IsNull ()</pre>
            <pre>argOutputStream.IsReadOpen () &amp;&amp; argOutputStream.IsWriteOpen ()</pre>
            <pre>! argOutputParams.IsNull ()</pre>
            <param name="argOutputStream">The stream where the document content will be written</param>
            <param name="argOutputParams">The output parameters.</param>
            <param name="argPageSet">CPageSet object containing the information about the image and the recognition results</param>
            <remarks>
            Please note that all the pages in the the supplied CPageSet object will be used for creating the document
            in the desired format.
            The function will automatically seek to the beginning of the page set object and add all the pages to the output document.
            Please note that GetLastWarning() can be called after calling Save() to check if there were warnings
            during the save operation
            <see cref="T:IDRSNET.CMemoryPageSet"/> 
            <see cref="T:IDRSNET.CPersistentPageSet"/> 
            </remarks>
        </member>
        <member name="M:IDRSNET.CDocumentOutput.Save(System.String,IDRSNET.COutputParams,IDRSNET.IPageQueue)">
            <summary>
            Creates the output file using the supplied document output parameters and page queue,
            and writes it to the given file path.
            </summary>
            <pre>! IsNull ()</pre>
            <pre>! argOutputParams.IsNull ()</pre>
            <param name="strOutputFilePath">The path to the output file.</param>
            <param name="argOutputParams">The output parameters.</param>
            <param name="argPageQueue">IPageQueue instance containing the information about the image and the recognition results</param>
            <remarks>
            Please note that all the pages in the the supplied IPageQueue instance will be used for creating the document
            in the desired format.
            Please note that GetLastWarning() can be called after calling Save() to check if there were warnings
            during the save operation
            <see cref="T:IDRSNET.CRangedPageQueue"/> 
            </remarks>
        </member>
        <member name="M:IDRSNET.CDocumentOutput.Save(System.IO.Stream,IDRSNET.COutputParams,IDRSNET.IPageQueue)">
            <summary>
            Creates the output document using the supplied document output parameters and page queue,
            and writes it to the given stream.
            </summary>
            <pre>! IsNull ()</pre>
            <pre>argOutputStream.IsReadOpen () &amp;&amp; argOutputStream.IsWriteOpen ()</pre>
            <pre>! argOutputParams.IsNull ()</pre>
            <param name="argOutputStream">The stream where the document content will be written</param>
            <param name="argOutputParameters">The document output parameters.</param>
            <param name="argPageQueue">IPageQueue instance containing the information about the image and the recognition results</param>
            <remarks>
            Please note that all the pages in the the supplied IPageQueue instance will be used for creating the document
            in the desired format.
            Please note that GetLastWarning() can be called after calling Save() to check if there were warnings
            during the save operation
            <see cref="T:IDRSNET.CRangedPageQueue"/> 
            </remarks>
        </member>
        <member name="M:IDRSNET.CDocumentOutput.Save(IDRSNET.IStreamFactory,IDRSNET.COutputParams,IDRSNET.CDocumentSplitParameters,IDRSNET.IPageQueue)">
            <summary>
            Creates one or more documents using the supplied document output parameteres and page queue.
            The method is using argStreamFactory to create one or more streams for the output document(s).
            The document will be split into one or more streams, according to the options set in argDocumentSplitParameters argument.
            </summary>
            <param name="argStreamFactory">Output stream creator factory</param>
            <param name="argOutputParams">The output parameters</param>
            <param name="argDocumentSplitParameters">Document split parameters</param>
            <param name="argPageQueue">IPageQueue instance containing the information about the image and the recognition results</param>
            <see cref="T:IDRSNET.IPageQueue"/> 
            <see cref="T:IDRSNET.IStreamFactory"/> 
            <see cref="T:IDRSNET.CDocumentSplitParameters"/> 
            <remarks>
            The document split feature is available for the moment with the following restrictions:
            - PDF output only
            - No encryption, certification, header/footer
            - Linearization disabled
            If the document split type is different than None and any of these constraint is not fulfilled,
            an exception IDRS_ERROR_NOT_SUPPORTED will be thrown.
            </remarks>
        </member>
        <member name="M:IDRSNET.CDocumentOutput.Save(IDRSNET.IStreamFactory,IDRSNET.COutputParams,IDRSNET.CDocumentSplitParameters,IDRSNET.IPageSet)">
            <summary>
            Creates one or more documents using the supplied document output parameteres and page set.
            The method is using argStreamFactory to create one or more streams for the output document(s).
            The documents will be split into one or more streams, according to the options used in argDocumentSplitParameters argument.
            </summary>
            <param name="argStreamFactory">Output stream creator factory</param>
            <param name="argOutputParams">The output parameters</param>
            <param name="argDocumentSplitParameters">Document split parameters</param>
            <param name="argPageSet">CPageSet object containing the information about the image and the recognition results</param>
            <see cref="T:IDRSNET.IPageSet"/> 
            <see cref="T:IDRSNET.IStreamFactory"/> 
            <see cref="T:IDRSNET.CDocumentSplitParameters"/> 
            <remarks>
            The document split feature is available for the moment with the following restrictions:
            - PDF output only
            - No encryption, certification, header/footer
            - Linearization disabled
            If the document split type is different than None and any of these constraint is not fulfilled,
            an exception IDRS_ERROR_NOT_SUPPORTED will be thrown.
            </remarks>
        </member>
        <member name="M:IDRSNET.CDocumentOutput.ResetOutputProgressCallback">
            <summary>
            ResetProgressCallback resets the object for monitoring progress.
            After this method is called, the progress object set by a previous call to
            SetProgressCallback will not be used anymore, returning back to the initial behavior.
            </summary>
        </member>
        <member name="P:IDRSNET.CDocumentOutput.WorkerThreadMemoryUsagemageLoading">
            <summary>
            Gets the maximum amount of memory to use by the parallel threads to store images before compressing.
            
            </summary>
            
        </member>
        <member name="P:IDRSNET.CDocumentOutput.WorkerThreadCount">
            <summary>
            Get/Set the number of worker threads that are used for performing document output.
            The iDRS SDK currently uses worker threads for PDF Image-Text output only.
            By default this value is initialized with IDRS_DFLT_WORKER_THREAD_COUNT
            Please note that, in order to get the best performance, the number of worker threads need to be set accordingly to your system capabilities.
            iDRS SDK provides an "automatic" mode for balancing the number of work threads based on the system where it is executed. In order to activate
            this mode, you can supply the value IDRS_WORKER_THREAD_AUTO
            </summary>
            
        </member>
        <member name="P:IDRSNET.CDocumentOutput.FontDataProvider">
            <summary>
            Sets the callback class used by integrators to retrieve font data when creating documents.
            
            </summary>
            
        </member>
        <member name="P:IDRSNET.CDocumentOutput.OutputProgressCallback">
            <summary>
            Sets the object for monitoring progress.
            The methods of the object overiding the methods of the COutputProgress class will be called during the execution.
            This let the integrator implement a cancel button or a progress bar.
            
            </summary>
            
        </member>
        <member name="P:IDRSNET.CDocumentOutput.WorkerThreadMemoryUsageImageLoading">
            <summary>
            Sets the maximum amount of memory to use by the parallel threads to store images before compressing.
            
            </summary>
            
        </member>
        <member name="P:IDRSNET.CDocumentOutput.DocumentMaxMemoryConsumption">
            <summary>
            Get/Set the threshold for the maximum amount of memory that will be allocated to
            store the output document in memory. When nearing this threshold, temporary files will be used to avoid crossing it.
            </summary>
            <remarks>
            For the moment the following limitations exist:
            - Threshold is monitored only for PDF output format. Other formats will not take it into account (however they are
            less likely to grow very large in memory)
            - For PDF, only compressed image stream size (usually a very large part of the PDF document itself) is taken into account.
            </remarks>
        </member>
        <member name="P:IDRSNET.CDocumentOutput.WorkerThreadMemoryUsage">
            <summary>
            Get/Set the maximum amount of memory to use by the parallel threads when compressing the images.
            </summary>
            
        </member>
        <member name="P:IDRSNET.CDocumentOutput.LastWarning">
            <summary>
            Gets the warning code .
            
            </summary>
            
        </member>
        <member name="T:IDRSNET.CDocumentOutputPage">
            <summary>
            The CDocumentOutputPage class contains the data required by the document output engine to create a page in a document
            \ingroup module_document_output module_document_output_lite
            The information required by the document output engine to create a page in a document can be either of the following:
            - a CPage object on which recognition process has been performed using CPageRecognition
            - the xml file obtained after serializing the recognition results with CExport and the path to the image file that was used for recognition
            - the xml file obtained after serializing the recognition results with CExport and a CImage object containing the image used for recognition
            </summary>
        </member>
        <member name="M:IDRSNET.CDocumentOutputPage.#ctor(IDRSNET.CPage)">
            <summary>
            Creates a new CDocumentOutputPage object and initializes the internal structures with the data in the supplied CPage object
            </summary>
            <param name="argPage">CPage object containing the iamge and the recognition data</param>
            <returns>The newly created CDocumentOutputPage</returns>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CDocumentOutputPage.#ctor(System.String,System.String)">
            <summary>
            Creates a new CDocumentOutputPage object and initializes the internal structures with the data in the supplied xml and image files
            </summary>
            <param name="strXmlFilePath">Path to the xml file obtained after serializing the recognition results with CExport</param>
            <param name="strImageFilePage">path to the image file that was used for recognition</param>
            <returns>The newly created CDocumentOutputPage</returns>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CDocumentOutputPage.#ctor(System.String,IDRSNET.CImage)">
            <summary>
            Creates a new CDocumentOutputPage object and initializes the internal structures with the data in the supplied xml and CImage object
            </summary>
            <param name="strXmlFilePath">Path to the xml file obtained after serializing the recognition results with CExport</param>
            <param name="argImage">CImage object containing the image used for recognition</param>
            <returns>The newly created CDocumentOutputPage</returns>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CDocumentOutputPage.Finalize">
            <summary>
            Destructor of CDocumentOutputPage.
            </summary>
        </member>
        <member name="M:IDRSNET.CDocumentOutputPage.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CDocumentOutputPage.GetPointer">
            <summary>
            Internal virtual  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CDocumentOutputPage.SetPointer(System.IntPtr)">
            <summary>
            Internal virtual  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CDocumentOutputPage object</param>
        </member>
        <member name="T:IDRSNET.CDocumentSplitParameters">
            <summary>
            CDocumentSplitParameters class is used to specify the document splitting rules
            The class allows splitting documents based on rules defined in iDRS.
            Currently the only available options are "split by size" and "custom split".
            </summary>
        </member>
        <member name="T:IDRSNET.CDocumentSplitParameters.DocumentSplitType">
            <summary>
            Enumerable containing all document splitting options
            </summary>
        </member>
        <member name="F:IDRSNET.CDocumentSplitParameters.DocumentSplitType.DocumentSplitTypeNone">
            <summary>
            ! No split. There will be just 1 document generated
            </summary>
        </member>
        <member name="F:IDRSNET.CDocumentSplitParameters.DocumentSplitType.DocumentSplitTypeSize">
            <summary>
            ! Split based on size. Once the output document reaches a specified size, the document will be closed
            ! and a new one will be created.
            </summary>
        </member>
        <member name="F:IDRSNET.CDocumentSplitParameters.DocumentSplitType.DocumentSplitTypeCustom">
            <summary>
            ! Split based on custom rules defined by the integrator. <see cref="T:IDRSNET.CDocumentSplitParameters.FuncDocumentSplitCustom"/> 
            </summary>
        </member>
        <member name="T:IDRSNET.CDocumentSplitParameters.FuncDocumentSplitCustom">
            <summary>
            FuncDocumentSplitCustom function type represents a callback function that is automatically called by iDRS SDK
            for each page that is created by the document output engine, <b>before</b> it is added to the output document
            </summary>
            <param name="arg1">Size of the document without the current page added to it</param>
            <param name="arg2">Size of the document if the current page would be added to it</param>
            <param name="arg3">Number of pages already added to the document (not including the current one)</param>
            <returns>IDRS_TRUE if the current document should be split without adding the current page. The current page will be added to the next document</returns>
            <returns>IDRS_FALSE if the current page should be added to the current document</returns>
        </member>
        <member name="M:IDRSNET.CDocumentSplitParameters.#ctor">
            <summary>
            Create is instantiating a new instance of CDocumentSplitParameters and associated data object
            The split method is set to DocumentSplitTypeNone, which means that document split will be disabled.
            </summary>
            <returns>New instance of CDocumentSplitParameters</returns>
        </member>
        <member name="M:IDRSNET.CDocumentSplitParameters.Finalize">
            <summary>
            Destructor of CDocumentSplitParameters.
            </summary>
        </member>
        <member name="M:IDRSNET.CDocumentSplitParameters.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CDocumentSplitParameters.GetPointer">
            <summary>
            Internal virtual  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CDocumentSplitParameters.SetPointer(System.IntPtr)">
            <summary>
            Internal virtual  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CDocumentSplitParameters object</param>
        </member>
        <member name="M:IDRSNET.CDocumentSplitParameters.DisableDocumentSplitType(IDRSNET.CDocumentSplitParameters.DocumentSplitType)">
            <summary>
            DisableDocumentSplitType disables a document split type
            </summary>
            <param name="evDocumentSplitType">Document split type to disable</param>
        </member>
        <member name="M:IDRSNET.CDocumentSplitParameters.IsDocumentSplitTypeEnabled(IDRSNET.CDocumentSplitParameters.DocumentSplitType)">
            <summary>
            Checks whether the provided document split type is currently enabled.
            </summary>
            <param name="evDocumentSplitType">The document split type to check</param>
            <returns>IDRS_TRUE if the provided split type is currently set, IDRS_FALSE if not.</returns>
        </member>
        <member name="P:IDRSNET.CDocumentSplitParameters.DocumentSplitBySize">
            <summary>
            SetDocumentSplitBySize sets the size threshold over for the created document(s)
            Any document created with iDRS SDK is expected to have the size in bytes lower than the threshold value set by this function
            Setting 0 as the threshold value will disable the splitting of documents by size
            
            </summary>
            
        </member>
        <member name="P:IDRSNET.CDocumentSplitParameters.DocumentSplitCustom">
            <summary>
            SetDocumentSplitCustom sets the document split using integrator custom defined functions
            Setting NULL as the function callback will disable the splitting of document using integrator defined custom code
            See <see cref="T:IDRSNET.CDocumentSplitParameters.FuncDocumentSplitCustom"/> for more details about expected custom function details
            
            </summary>
            
        </member>
        <member name="T:IDRSNET.CDocxOutputParams">
            <summary>
            CDocxOutputParams class manages the parameters to create a docx file
            </summary>
        </member>
        <member name="M:IDRSNET.CDocxOutputParams.#ctor(IDRSNET.PageLayout)">
            <summary>
            Create is instantiating a new instance of CDocxOutputParams and associated data object
            </summary>
            <param name="evPageLayout">the page layout type</param>
            <returns>New instance of CDocxOutputParams</returns>
        </member>
        <member name="M:IDRSNET.CDocxOutputParams.Finalize">
            <summary>
            Destructor of CDocxOutputParams.
            </summary>
        </member>
        <member name="M:IDRSNET.CDocxOutputParams.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CDocxOutputParams.GetPointer">
            <summary>
            Internal override  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CDocxOutputParams.SetPointer(System.IntPtr)">
            <summary>
            Internal override  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CDocxOutputParams object</param>
        </member>
        <member name="P:IDRSNET.CDocxOutputParams.PageLayout">
            <summary>
            Gets the page layout type.
            
            </summary>
            
        </member>
        <member name="P:IDRSNET.CDocxOutputParams.MetadataInfo">
            <summary>
            Get/Set the metadata info.
            </summary>
            
        </member>
        <member name="P:IDRSNET.CDocxOutputParams.JpegCompressionOptions">
            <summary>
            Get/Set the Jpeg Compression Options property.
            </summary>
            
        </member>
        <member name="P:IDRSNET.CDocxOutputParams.PageSizeOptions">
            <summary>
            Get/Set the page size options.
            </summary>
            
        </member>
        <member name="P:IDRSNET.CDocxOutputParams.ImageProcessingOptions">
            <summary>
            Get/Set the image processing options.
            </summary>
            
        </member>
        <member name="T:IDRSNET.CEncryptionOptions">
            <summary>
            CEncryptionOptions manages the PDF Security parameters.
            \req IDRS::IDRS_MODULE_DOCUMENT_OUTPUT
            </summary>
        </member>
        <member name="T:IDRSNET.CEncryptionOptions.eEncryptionLevel">
            <summary>
            The encryption levels.
            </summary>
        </member>
        <member name="F:IDRSNET.CEncryptionOptions.eEncryptionLevel.NONE">
            <summary>
            ! No encryption
            </summary>
        </member>
        <member name="F:IDRSNET.CEncryptionOptions.eEncryptionLevel.DEFAULT">
            <summary>
            ! Default encryption level
            </summary>
        </member>
        <member name="F:IDRSNET.CEncryptionOptions.eEncryptionLevel.RC4_128">
            <summary>
            ! RC4 128 bit algorithm
            </summary>
        </member>
        <member name="F:IDRSNET.CEncryptionOptions.eEncryptionLevel.AES_128">
            <summary>
            AES 128 bit algorithm
            </summary>
            <remarks>Required PDF version 1.6 or higher</remarks>
        </member>
        <member name="T:IDRSNET.CEncryptionOptions.ePrintingAllowed">
            <summary>
            The printing allowed.
            </summary>
        </member>
        <member name="F:IDRSNET.CEncryptionOptions.ePrintingAllowed.NO_PRINTING">
            <summary>
            ! None
            </summary>
        </member>
        <member name="F:IDRSNET.CEncryptionOptions.ePrintingAllowed.LOW_RESOLUTION">
            <summary>
            ! Low resolution (150 dpi)
            </summary>
        </member>
        <member name="F:IDRSNET.CEncryptionOptions.ePrintingAllowed.HIGH_RESOLUTION">
            <summary>
            ! High resolution
            </summary>
        </member>
        <member name="T:IDRSNET.CEncryptionOptions.eChangesAllowed">
            <summary>
            The changes allowed.
            </summary>
        </member>
        <member name="F:IDRSNET.CEncryptionOptions.eChangesAllowed.NO_CHANGES">
            <summary>
            ! None
            </summary>
        </member>
        <member name="F:IDRSNET.CEncryptionOptions.eChangesAllowed.INSERTING_DELETING_ROTATING">
            <summary>
            ! Inserting, deleting and rotating pages
            </summary>
        </member>
        <member name="F:IDRSNET.CEncryptionOptions.eChangesAllowed.FILLING_FORMS_SIGNING">
            <summary>
            ! Filling in form fields and signing existing signature fields
            </summary>
        </member>
        <member name="F:IDRSNET.CEncryptionOptions.eChangesAllowed.COMMENTING_FILLING_FORMS_SIGNING">
            <summary>
            ! Commenting, filling in form fields and signing existing signature fields
            </summary>
        </member>
        <member name="F:IDRSNET.CEncryptionOptions.eChangesAllowed.ANY_EXCEPT_EXTRACTING">
            <summary>
            ! Any except extracting pages
            </summary>
        </member>
        <member name="M:IDRSNET.CEncryptionOptions.#ctor(IDRSNET.CEncryptionOptions.eEncryptionLevel)">
            <summary>
            Create creates a CEncryptionOptions object.
            </summary>
            <param name="eEncryptionLevel">The encryption level.</param>
        </member>
        <member name="M:IDRSNET.CEncryptionOptions.Finalize">
            <summary>
            Destructor of CEncryptionOptions.
            </summary>
        </member>
        <member name="M:IDRSNET.CEncryptionOptions.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CEncryptionOptions.GetPointer">
            <summary>
            Internal virtual  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CEncryptionOptions.SetPointer(System.IntPtr)">
            <summary>
            Internal virtual  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CEncryptionOptions object</param>
        </member>
        <member name="M:IDRSNET.CEncryptionOptions.SetRestrictions(System.String,IDRSNET.CEncryptionOptions.ePrintingAllowed,IDRSNET.CEncryptionOptions.eChangesAllowed,System.Boolean,System.Boolean)">
            <summary>
            Sets the restrictions for editing and printing of the document.
            Please note it is not allowed to have text copy enabled while text access is disabled.
            If the password length is more than 32 characters, only the first 32 characters will be considered.
            Only ASCII characters are allowed in the password. The accepted charsets are ANSI (range 0-127) and extended ANSI (range  128-255)
            The passwords for "Open document" and "Change permissions" should be different.
            </summary>
            <pre>! IsNull ()</pre>
            <param name="strChangePermissionPassword">The change permission password.</param>
            <param name="pa">The allowed print mode.</param>
            <param name="ca">The allowed changes.</param>
            <param name="bEnableCopying">Enables copying of text, images and other content.</param>
            <param name="bEnableTextAccess">Enables text access for screen reader devices for the visually impaired.</param>
        </member>
        <member name="M:IDRSNET.CEncryptionOptions.Clone">
            <summary>
            Performs the clone of the internal data of the current object.
            </summary>
        </member>
        <member name="P:IDRSNET.CEncryptionOptions.ChangesAllowedOptions">
            <summary>
            Get/Set the changes allowed to be done in the pdf document.
            </summary>
            
        </member>
        <member name="P:IDRSNET.CEncryptionOptions.DocumentOpenPassword">
            <summary>
            Get/Set the password required to open the document.
            Please note that if the password length is more than 32 characters, only the first 32 characters will be considered.
            Only ASCII characters are allowed in the password.
            The passwords for "Open document" and "Change permissions" should be different.
            </summary>
            
            <pre> ! IsNull () </pre>
        </member>
        <member name="P:IDRSNET.CEncryptionOptions.EnableCopying">
            <summary>
            Get/Set a flag that allows or denies copying.
            Please note it is not allowed to have text copy enabled while text access is disabled.
            </summary>
            
        </member>
        <member name="P:IDRSNET.CEncryptionOptions.PrintingOptions">
            <summary>
            Get/Set the printing options for the pdf document.
            </summary>
            
        </member>
        <member name="P:IDRSNET.CEncryptionOptions.EncryptionLevel">
            <summary>
            Gets the encryption level.
            
            </summary>
            
        </member>
        <member name="P:IDRSNET.CEncryptionOptions.ChangePermissionPassword">
            <summary>
            Get/Set the change permissions password in the pdf document.
            Please note that if the password length is more than 32 characters, only the first 32 characters will be considered.
            Only ASCII characters are allowed in the password. The accepted charsets are ANSI (range 0-127) and extended ANSI (range 128-255)
            The passwords for "Open document" and "Change permissions" should be different.
            Also, note that it is not allowed to have text copy enabled while text access is disabled.
            </summary>
            
            <pre> ! IsNull () </pre>
        </member>
        <member name="P:IDRSNET.CEncryptionOptions.EnableTextAccess">
            <summary>
            Get/Set the text access enable flag.
            </summary>
            
        </member>
        <member name="T:IDRSNET.CEpubOutputParams">
            <summary>
            CEpubOutputParams class manages the parameters to create an Epub file
            </summary>
        </member>
        <member name="M:IDRSNET.CEpubOutputParams.#ctor">
            <summary>
            Create is instantiating a new instance of CEpubOutputParams and associated data object
            </summary>
            <returns>New instance of CEpubOutputParams</returns>
        </member>
        <member name="M:IDRSNET.CEpubOutputParams.Finalize">
            <summary>
            Destructor of CEpubOutputParams.
            </summary>
        </member>
        <member name="M:IDRSNET.CEpubOutputParams.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CEpubOutputParams.GetPointer">
            <summary>
            Internal override  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CEpubOutputParams.SetPointer(System.IntPtr)">
            <summary>
            Internal override  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CEpubOutputParams object</param>
        </member>
        <member name="P:IDRSNET.CEpubOutputParams.MetadataInfo">
            <summary>
            Get/Set the metadata info.
            </summary>
            
        </member>
        <member name="T:IDRSNET.IDRS_EXPORT_TYPE">
            <summary>
            iDRS export formats.
            iDRS is able to export its internal structure to different file formats.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_EXPORT_TYPE.IDRS_EXPORT_FORMAT_XML">
            <summary>
            XML file format
            By using this format for export, the output xml file will contain information about the recognized data in a structured way
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_EXPORT_TYPE.IDRS_EXPORT_FORMAT_XML_LIGHT">
            <summary>
            Light XML file format
            By using this format for export, the output xml will contain only the recognized text splited in lines
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_EXPORT_TYPE.IDRS_EXPORT_FORMAT_XML_FMT">
            <summary>
            XML file format for the document output module.
            By using this format for export, the output xml file will contain all information about the recognized data in a structured way, including the page layout properties
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_EXPORT_TYPE.IDRS_EXPORT_FORMAT_XML_ALTO">
            <summary>
            XML file format for ALTO export.
            By using this format for export, the output xml file will contain information about the recognized data, including the page layout properties conform to ALTO specification
            </summary>
        </member>
        <member name="T:IDRSNET.CExport">
            <summary>
            The CExport class serializes page data to various formats
            \ingroup module_core
            The class serializes the data into xml file with the following formats:
            - IDRS_EXPORT_FORMAT_XML
            - IDRS_EXPORT_FORMAT_XML_LIGHT
            - IDRS_EXPORT_FORMAT_XML_FMT
            - IDRS_EXPORT_FORMAT_XML_ALTO
            </summary>
        </member>
        <member name="M:IDRSNET.CExport.#ctor(IDRSNET.IDRS_EXPORT_TYPE)">
            <summary>
            Create creates an export object.
            </summary>
            <param name="etExportFormat">The export file format identifier.</param>
            <exception>CIDRSException if an error occur.</exception>
            <see cref="T:IDRSNET.IDRS_EXPORT_TYPE"/> 
        </member>
        <member name="M:IDRSNET.CExport.Finalize">
            <summary>
            Destructor of CExport.
            </summary>
        </member>
        <member name="M:IDRSNET.CExport.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CExport.GetPointer">
            <summary>
            Internal virtual  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CExport.SetPointer(System.IntPtr)">
            <summary>
            Internal virtual  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CExport object</param>
        </member>
        <member name="M:IDRSNET.CExport.Export(IDRSNET.CPage,System.IO.Stream)">
            <summary>
            Export exports the given page.
            </summary>
            <pre>! IsNull()</pre>
            <pre>! argPage.IsNull ()</pre>
            <pre>argStream.IsWriteOpen ()</pre>
            <param name="argPage">The page to export.</param>
            <param name="argStream">The output stream.</param>
            <exception>CIDRSException if an error occur.</exception>
            <see cref="T:IDRSNET.IDRS_EXPORT_TYPE"/> 
        </member>
        <member name="M:IDRSNET.CExport.Export(IDRSNET.CPage,System.String)">
            <summary>
            Export exports the given page.
            </summary>
            <pre>! IsNull()</pre>
            <pre>! argPage.IsNull ()</pre>
            <param name="argPage">The page to export.</param>
            <param name="strStreamName">The name of the stream.</param>
            <exception>CIDRSException if an error occur.</exception>
            <see cref="T:IDRSNET.IDRS_EXPORT_TYPE"/> 
        </member>
        <member name="M:IDRSNET.CExport.Export(IDRSNET.CPageContent2,IDRSNET.CImageProperties.ColorMode,System.IO.Stream)">
            <summary>
            Export exports the given page.
            </summary>
            <pre>! IsNull()</pre>
            <pre>! argPage.IsNull ()</pre>
            <pre>argStream.IsWriteOpen ()</pre>
            <param name="argPageContent">The page content to export.</param>
            <param name="evPageSourceColorMode">The color mode of the original page's source image. This parameter is used internally</param>
            <remarks>
            for memory consumption optimization; integrators can provide value CImageProperties::COLOR instead of the exact information
            (for instance if they do not have acess to it anymore when this method is called).
            </remarks>
            <param name="argStream">The output stream.</param>
            <exception>CIDRSException if an error occur.</exception>
            <see cref="T:IDRSNET.IDRS_EXPORT_TYPE"/> 
        </member>
        <member name="M:IDRSNET.CExport.Export(IDRSNET.CPageContent2,IDRSNET.CImageProperties.ColorMode,System.String)">
            <summary>
            Export exports the given page.
            </summary>
            <pre>! IsNull()</pre>
            <pre>! argPage.IsNull ()</pre>
            <param name="argPageContent">The page content to export.</param>
            <param name="evPageSourceColorMode">The color mode of the original page's source image. This parameter is used internally</param>
            <remarks>
            for memory consumption optimization; integrators can provide value CImageProperties::COLOR instead of the exact information
            (for instance if they do not have acess to it anymore when this method is called).
            </remarks>
            <param name="strStreamName">The name of the stream.</param>
            <exception>CIDRSException if an error occur.</exception>
            <see cref="T:IDRSNET.IDRS_EXPORT_TYPE"/> 
        </member>
        <member name="P:IDRSNET.CExport.AppendMode">
            <summary>
            Get/Set the flag that indicates whether the exported content will overwrite or be appended to pre-existing export.
            </summary>
            <remarks>only available for the IDRS_EXPORT_FORMAT_XML_ALTO type</remarks>
            <pre> ! IsNull() </pre>
        </member>
        <member name="T:IDRSNET.CFastReader">
            <summary>
            The CFastReader class manages iDRS analysis/recognition engines.
            \ingroup module_core module_ocr
            It provides a fast way of recognizing and getting the text from an image.
            </summary>
        </member>
        <member name="M:IDRSNET.CFastReader.#ctor">
            <summary>
            Create creates a CFastReader object.
            </summary>
            <returns>The newly created reader.</returns>
            <exception>CIDRSException If an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CFastReader.Finalize">
            <summary>
            Destructor of CFastReader.
            </summary>
        </member>
        <member name="M:IDRSNET.CFastReader.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CFastReader.GetPointer">
            <summary>
            Internal virtual  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CFastReader.SetPointer(System.IntPtr)">
            <summary>
            Internal virtual  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CFastReader object</param>
        </member>
        <member name="M:IDRSNET.CFastReader.Read(IDRSNET.CBarcodeContext,IDRSNET.IFastReaderCallback)">
            <summary>
            Read reads barcodes in the images provided by the fast reader callback object.
            </summary>
            <pre>! argBarcodeContext.IsNull ()</pre>
            <param name="argBarcodeContext">The context to use for the recognition.</param>
            <param name="argFastReaderCallback">The callback object.</param>
        </member>
        <member name="M:IDRSNET.CFastReader.Read(IDRSNET.COcrContext,IDRSNET.IFastReaderCallback)">
            <summary>
            Read reads the images provided by the fast reader callback object.
            </summary>
            <pre>! argOCRContext.IsNull ()</pre>
            <param name="argOCRContext">The context to use for the recognition.</param>
            <param name="argFastReaderCallback">The callback object.</param>
        </member>
        <member name="P:IDRSNET.CFastReader.AdvancedDecision">
            <summary>
            SetAdvancedDecision sets the CAdvancedDecision object that will be involved in score computation for ocr recognition.
            For more details please see <see cref="T:IDRSNET.CAdvancedDecision"/> 
            
            </summary>
            <remarks>Passing NULL to this value would disable custom score computation for the current CPageRecognition object</remarks>
        </member>
        <member name="T:IDRSNET.CFileLogger">
            <summary>
            The CFileLogger class is an iDRS implementation of the ILogger interface.
            It exposes a default iDRS Logger that can be used to log messages during an operation.
            This class will write log messages to a file on disk. Note that the file is opened in exclusive mode, so several CFileLoggers
            cannot use the same log file.
            Log entries are expressed by this class as per the following pattern: YYYY-MM-DD hh:mm:ss [severity level] [message]
            - First part is a timestamp of a current date time
            - Second part is the severity level of the message
            - Third part is the message itself.
            </summary>
        </member>
        <member name="M:IDRSNET.CFileLogger.#ctor(System.String)">
            <summary>
            Creates an object with the given characteristics
            </summary>
            <pre>strFilePath != NULL</pre>
            <param name="strFilePath">The path of the file that will save the logger messages</param>
        </member>
        <member name="M:IDRSNET.CFileLogger.Finalize">
            <summary>
            Destructor of CFileLogger.
            </summary>
        </member>
        <member name="M:IDRSNET.CFileLogger.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CFileLogger.GetPointer">
            <summary>
            Internal GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CFileLogger.SetPointer(System.IntPtr)">
            <summary>
            Internal SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CFileLogger object</param>
        </member>
        <member name="M:IDRSNET.CFileLogger.OnReceivedMessage(IDRSNET.ILogger.eSeverityLevel,System.String)">
            <summary>
            OnReceivedMessage is a method which will be called on reception of meaningful events
            to provide information about the status and the type of the event. Function will provide
            information only to events that occur with a severity level equal or higher than the logging
            severity level provided by user. This function appends the timestamp and the message severity
            level overhead to the received string and then stores it to a file on disk
            </summary>
            <param name="evMessageSeverityLevel">The severity level of the message that will be logged</param>
            <param name="strMessage">A message providing information about the occurred event</param>
        </member>
        <member name="T:IDRSNET.CGreyscale">
            <summary>
            The CGreyscale class offers image greyscale conversion
            \ingroup module_prepro
            This class contains an algorithm for converting color images to greyscale.
            \req IDRS::IDRS_MODULE_PREPRO
            </summary>
        </member>
        <member name="M:IDRSNET.CGreyscale.#ctor(IDRSNET.CIDRS)">
            <summary>
            Creates a new CGreyscale object.
            </summary>
            <param name="argIDRS">The iDRS</param>
            <returns>The newly created CGreyscale object.</returns>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CGreyscale.Finalize">
            <summary>
            Destructor of CGreyscale.
            </summary>
        </member>
        <member name="M:IDRSNET.CGreyscale.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CGreyscale.GetPointer">
            <summary>
            Internal override  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CGreyscale.SetPointer(System.IntPtr)">
            <summary>
            Internal override  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CGreyscale object</param>
        </member>
        <member name="M:IDRSNET.CGreyscale.Greyscale(IDRSNET.CIDRS,IDRSNET.CImage,IDRSNET.CImage)">
            <summary>
            Greyscale converts an image to greyscale.
            </summary>
            <pre>! argImageSource.IsNull ()</pre>
            <param name="argIDRS">The iDRS</param>
            <param name="argImageTarget">The target image.</param>
            <param name="argImageSource">The source image.</param>
        </member>
        <member name="M:IDRSNET.CGreyscale.Greyscale(IDRSNET.CImage,IDRSNET.CImage)">
            <summary>
            Greyscale converts an image to greyscale.
            </summary>
            <pre>! argImageSource.IsNull ()</pre>
            <param name="argImageTarget">The target image.</param>
            <param name="argImageSource">The source image.</param>
        </member>
        <member name="T:IDRSNET.CHtmlOutputParams">
            <summary>
            CHtmlOutputParams class manages the parameters to create a Html file
            </summary>
        </member>
        <member name="M:IDRSNET.CHtmlOutputParams.#ctor(IDRSNET.PageLayout)">
            <summary>
            Create is instantiating a new instance of CHtmlOutputParams and associated data object
            </summary>
            <param name="evPageLayout">the page layout type
            \limitation: Flowing and Editable layouts will provide the same output</param>
            <returns>New instance of CHtmlOutputParams</returns>
        </member>
        <member name="M:IDRSNET.CHtmlOutputParams.Finalize">
            <summary>
            Destructor of CHtmlOutputParams.
            </summary>
        </member>
        <member name="M:IDRSNET.CHtmlOutputParams.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CHtmlOutputParams.GetPointer">
            <summary>
            Internal override  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CHtmlOutputParams.SetPointer(System.IntPtr)">
            <summary>
            Internal override  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CHtmlOutputParams object</param>
        </member>
        <member name="P:IDRSNET.CHtmlOutputParams.PageLayout">
            <summary>
            Get the page layout type.
            
            </summary>
            
        </member>
        <member name="P:IDRSNET.CHtmlOutputParams.MetadataInfo">
            <summary>
            Get/Set the metadata info.
            </summary>
            
        </member>
        <member name="P:IDRSNET.CHtmlOutputParams.JpegCompressionOptions">
            <summary>
            Get/Set the Jpeg Compression Options property.
            </summary>
            
        </member>
        <member name="P:IDRSNET.CHtmlOutputParams.ImageProcessingOptions">
            <summary>
            Get/Set the image processing options.
            </summary>
            
        </member>
        <member name="T:IDRSNET.CIDRS">
            <summary>
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRS.#ctor">
            <summary>
            Create initializes the modules for which a valid license has been provided
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRS.Finalize">
            <summary>
            Destructor of CIDRS.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRS.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRS.GetPointer">
            <summary>
            Internal virtual  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CIDRS.SetPointer(System.IntPtr)">
            <summary>
            Internal virtual  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CIDRS object</param>
        </member>
        <member name="M:IDRSNET.CIDRS.HasModule(IDRSNET.IDRS_MODULE)">
            <summary>
            HasModule verifies that the specified module is currently loaded
            </summary>
            <param name="uiModule">is the module identifier that will be verified</param>
        </member>
        <member name="M:IDRSNET.CIDRS.HasExtension(IDRSNET.IDRS_MODULE,IDRSNET.IDRS_EXTENSION)">
            <summary>
            HasExtension verifies if an extension for the specified module is currently loaded
            </summary>
            <param name="uiModule">is the module identifier</param>
            <param name="uiExtension">is the extension identifier that will be verified</param>
        </member>
        <member name="M:IDRSNET.CIDRS.SetLoggerCallback(IDRSNET.ILogger,IDRSNET.ILogger.eSeverityLevel)">
            <summary>
            SetLoggerCallback Sets the callback object used to log events.
            The object used as a callback object will be called every time iDRS receives a message during an
            operation, of severity level equal or higher than the level provided by user.
            </summary>
            <remarks>The logger callback class should inherit from ILogger interface</remarks>
            <param name="plCallback">The callback object pointer</param>
            <param name="evLevel">The severity level threshold for which calls to logger callback class should be performed.</param>
        </member>
        <member name="T:IDRSNET.IDRS_BARCODE_ADVANCED_PARAMETERS">
            <summary>
            Internal Structure that manages advanced barcode recognition parameters.
            It let the integrator specify advanced parameters for a specific barcode type:
            - minimum and maximum number of symbols.
            - barcode direction.
            - partial barcode detection.
            The iDRS barcodes types.
            The default barcode parameters.
            </summary>
        </member>
        <member name="M:IDRSNET.IDRS_BARCODE_ADVANCED_PARAMETERS.#ctor(IDRSNET.CIDRSBarcodeAdvancedParameters)">
            <summary>
            Structure constructor that converts class CIDRSBarcodeAdvancedParameters to
            structure IDRS_BARCODE_ADVANCED_PARAMETERS by copying each fields
            </summary>
            <param name="_class">Class to be converted</param>
        </member>
        <member name="F:IDRSNET.IDRS_BARCODE_ADVANCED_PARAMETERS.uiMinLength">
            <summary>
            The minimum barcode length (number of symbols), 0 for automatic. 
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_BARCODE_ADVANCED_PARAMETERS.uiMaxLength">
            <summary>
            The maximum barcode length (number of symbols), 0 for automatic. 
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_BARCODE_ADVANCED_PARAMETERS.ucDetectionDirections">
            <summary>
            The barcode detection directions.
            Indicates in which direction to look for a barcode.
            <see cref="T:IDRSNET.IDRS_BARCODE_DIRECTION"/> The iDRS barcode detection direction flags.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_BARCODE_ADVANCED_PARAMETERS.bDetectPartialBarcodes">
            <summary>
            The detect partial barcode flag, indicating whether or not to retrieve partial barcode.
            </summary>
            <remarks>Detection of partial out of specs barcodes is not allowed.</remarks>
        </member>
        <member name="T:IDRSNET.CIDRSBarcodeAdvancedParameters">
            <summary>
            Public Class that manages advanced barcode recognition parameters.
            It let the integrator specify advanced parameters for a specific barcode type:
            - minimum and maximum number of symbols.
            - barcode direction.
            - partial barcode detection.
            The iDRS barcodes types.
            The default barcode parameters.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSBarcodeAdvancedParameters.#ctor">
            <summary>
            Default constructor of CIDRSBarcodeAdvancedParameters.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSBarcodeAdvancedParameters.Finalize">
            <summary>
            Destructor of CIDRSBarcodeAdvancedParameters.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSBarcodeAdvancedParameters.#ctor(IDRSNET.IDRS_BARCODE_ADVANCED_PARAMETERS)">
            <summary>
            Class constructor that converts structure IDRS_BARCODE_ADVANCED_PARAMETERS to
            class CIDRSBarcodeAdvancedParameters by copying each fields
            </summary>
            <param name="_struct">set fields based on the values of the structure</param>
        </member>
        <member name="M:IDRSNET.CIDRSBarcodeAdvancedParameters.Update(IDRSNET.IDRS_BARCODE_ADVANCED_PARAMETERS)">
            <summary>
            Update the fields of the the class based on the input structure
            </summary>
            <param name="_struct">update fields based on the values of the structure</param>
        </member>
        <member name="M:IDRSNET.CIDRSBarcodeAdvancedParameters.ToStruct">
            <summary>
            Converts the class fields to a structure
            </summary>
            <returns>IDRS_BARCODE_ADVANCED_PARAMETERS</returns>
        </member>
        <member name="P:IDRSNET.CIDRSBarcodeAdvancedParameters.MinLength">
            <summary>
            The minimum barcode length (number of symbols), 0 for automatic. 
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSBarcodeAdvancedParameters.MaxLength">
            <summary>
            The maximum barcode length (number of symbols), 0 for automatic. 
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSBarcodeAdvancedParameters.DetectionDirections">
            <summary>
            The barcode detection directions.
            Indicates in which direction to look for a barcode.
            <see cref="T:IDRSNET.IDRS_BARCODE_DIRECTION"/> The iDRS barcode detection direction flags.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSBarcodeAdvancedParameters.DetectPartialBarcodes">
            <summary>
            The detect partial barcode flag, indicating whether or not to retrieve partial barcode.
            </summary>
            <remarks>Detection of partial out of specs barcodes is not allowed.</remarks>
        </member>
        <member name="T:IDRSNET.IDRS_CELL_STYLE">
            <summary>
            The IDRS_CELL_STYLE structure defines a cell style.
            </summary>
        </member>
        <member name="M:IDRSNET.IDRS_CELL_STYLE.#ctor(IDRSNET.CIDRSCellStyle)">
            <summary>
            Structure constructor that converts class CIDRSCellStyle to
            structure IDRS_CELL_STYLE by copying each fields
            </summary>
            <param name="_class">Class to be converted</param>
        </member>
        <member name="F:IDRSNET.IDRS_CELL_STYLE.atAlign">
            <summary>
            The horizontal alignment type.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_CELL_STYLE.vaAlign">
            <summary>
            The vertical alignment type.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_CELL_STYLE.uiLeftPadding">
            <summary>
            Left padding.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_CELL_STYLE.uiRightPadding">
            <summary>
            Right padding.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_CELL_STYLE.ubBorder">
            <summary>
            The borders.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_CELL_STYLE.iFontId">
            <summary>
            The font identifier.
            -1 for none.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_CELL_STYLE.uiBgColorId">
            <summary>
            The background color identifier.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_CELL_STYLE.uiTopBorderColor">
            <summary>
            The top border color.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_CELL_STYLE.uiLeftBorderColor">
            <summary>
            The left border color.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_CELL_STYLE.uiBottomBorderColor">
            <summary>
            The bottom border color.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_CELL_STYLE.uiRightBorderColor">
            <summary>
            The right border color.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_CELL_STYLE.uiTopBorderWidth">
            <summary>
            The top border width.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_CELL_STYLE.uiLeftBorderWidth">
            <summary>
            The left border width.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_CELL_STYLE.uiBottomBorderWidth">
            <summary>
            The bottom border width.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_CELL_STYLE.uiRightBorderWidth">
            <summary>
            The right border width.
            </summary>
        </member>
        <member name="T:IDRSNET.CIDRSCellStyle">
            <summary>
            The IDRS_CELL_STYLE structure defines a cell style.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSCellStyle.#ctor">
            <summary>
            Default constructor of CIDRSCellStyle.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSCellStyle.Finalize">
            <summary>
            Destructor of CIDRSCellStyle.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSCellStyle.#ctor(IDRSNET.IDRS_CELL_STYLE)">
            <summary>
            Class constructor that converts structure IDRS_CELL_STYLE to
            class CIDRSCellStyle by copying each fields
            </summary>
            <param name="_struct">set fields based on the values of the structure</param>
        </member>
        <member name="M:IDRSNET.CIDRSCellStyle.Update(IDRSNET.IDRS_CELL_STYLE)">
            <summary>
            Update the fields of the the class based on the input structure
            </summary>
            <param name="_struct">update fields based on the values of the structure</param>
        </member>
        <member name="M:IDRSNET.CIDRSCellStyle.ToStruct">
            <summary>
            Converts the class fields to a structure
            </summary>
            <returns>IDRS_CELL_STYLE</returns>
        </member>
        <member name="P:IDRSNET.CIDRSCellStyle.AtAlign">
            <summary>
            The horizontal alignment type.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSCellStyle.VaAlign">
            <summary>
            The vertical alignment type.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSCellStyle.LeftPadding">
            <summary>
            Left padding.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSCellStyle.RightPadding">
            <summary>
            Right padding.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSCellStyle.Border">
            <summary>
            The borders.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSCellStyle.FontId">
            <summary>
            The font identifier.
            -1 for none.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSCellStyle.BgColorId">
            <summary>
            The background color identifier.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSCellStyle.TopBorderColor">
            <summary>
            The top border color.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSCellStyle.LeftBorderColor">
            <summary>
            The left border color.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSCellStyle.BottomBorderColor">
            <summary>
            The bottom border color.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSCellStyle.RightBorderColor">
            <summary>
            The right border color.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSCellStyle.TopBorderWidth">
            <summary>
            The top border width.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSCellStyle.LeftBorderWidth">
            <summary>
            The left border width.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSCellStyle.BottomBorderWidth">
            <summary>
            The bottom border width.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSCellStyle.RightBorderWidth">
            <summary>
            The right border width.
            </summary>
        </member>
        <member name="T:IDRSNET.IDRS_COLOR2">
            <summary>
            Internal Structure defines a color with Red, Green and Blue components
            </summary>
        </member>
        <member name="M:IDRSNET.IDRS_COLOR2.#ctor(IDRSNET.CIDRSColor)">
            <summary>
            Structure constructor that converts class CIDRSColor to
            structure IDRS_COLOR2 by copying each fields
            </summary>
            <param name="_class">Class to be converted</param>
        </member>
        <member name="F:IDRSNET.IDRS_COLOR2.ucBlue">
            <summary>
            The blue component. 
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_COLOR2.ucGreen">
            <summary>
            The green component. 
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_COLOR2.ucRed">
            <summary>
            The red component. 
            </summary>
        </member>
        <member name="T:IDRSNET.IDRS_COLOR">
            <summary>
            Internal Structure defines a color with Red, Green and Blue components
            </summary>
        </member>
        <member name="M:IDRSNET.IDRS_COLOR.#ctor(IDRSNET.CIDRSColor)">
            <summary>
            Structure constructor that converts class CIDRSColor to
            structure IDRS_COLOR by copying each fields
            </summary>
            <param name="_class">Class to be converted</param>
        </member>
        <member name="F:IDRSNET.IDRS_COLOR.ucBlue">
            <summary>
            The blue component. 
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_COLOR.ucGreen">
            <summary>
            The green component. 
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_COLOR.ucRed">
            <summary>
            The red component. 
            </summary>
        </member>
        <member name="T:IDRSNET.CIDRSColor">
            <summary>
            Public Class defines a color with Red, Green and Blue components
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSColor.#ctor">
            <summary>
            Default constructor of CIDRSColor.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSColor.Finalize">
            <summary>
            Destructor of CIDRSColor.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSColor.#ctor(IDRSNET.IDRS_COLOR)">
            <summary>
            Class constructor that converts structure IDRS_COLOR to
            class CIDRSColor by copying each fields
            </summary>
            <param name="_struct">set fields based on the values of the structure</param>
        </member>
        <member name="M:IDRSNET.CIDRSColor.Update(IDRSNET.IDRS_COLOR)">
            <summary>
            Update the fields of the the class based on the input structure
            </summary>
            <param name="_struct">update fields based on the values of the structure</param>
        </member>
        <member name="M:IDRSNET.CIDRSColor.ToStruct">
            <summary>
            Converts the class fields to a structure
            </summary>
            <returns>IDRS_COLOR</returns>
        </member>
        <member name="M:IDRSNET.CIDRSColor.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Creates a CIDRSColor instance
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSColor.Blue">
            <summary>
            The blue component. 
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSColor.Green">
            <summary>
            The green component. 
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSColor.Red">
            <summary>
            The red component. 
            </summary>
        </member>
        <member name="T:IDRSNET.Constants">
            <summary>
            Class that describes constant variables for IDRSNET
            </summary>
        </member>
        <member name="F:IDRSNET.Constants.IDRS_MAX_PATH">
            <summary>
            The maximum lenth for a path. 
            </summary>
        </member>
        <member name="T:IDRSNET.Constants.IDRS_TEXT_ATTRIBUTE">
            @name group_idrs_text_attributes The iDRS text atributes.<summary>
            @{
            iDRS text attribute type
            To know the state of an attributes, apply one of the masks to the value containing the attributes.
            For example:
            \code
            if ( ui32Attributes &amp; IDRS_TXT_ATT_BOLD_MASK )
            {
            The text is bold
            ...
            }
            else
            {
            The text is not bold
            ...
            }
            \endcode
            </summary>
        </member>
        <member name="F:IDRSNET.Constants.IDRS_TEXT_ATTRIBUTE.IDRS_TXT_ATT_SUBSCRIPT_MASK">
            <summary>
            Subscript text attribute mask.
            Apply this mask on a the attributes to know the subscript text state.
            </summary>
        </member>
        <member name="F:IDRSNET.Constants.IDRS_TEXT_ATTRIBUTE.IDRS_TXT_ATT_DROP_CAP_MASK">
            <summary>
            Drop capitals text attribute mask.
            Apply this mask on a the attributes to know the drop capital text state.
            </summary>
        </member>
        <member name="F:IDRSNET.Constants.IDRS_TEXT_ATTRIBUTE.IDRS_TXT_ATT_BOLD_MASK">
            <summary>
            Bold text attribute mask.
            Apply this mask on a the attributes to know if the text is bold or not.
            </summary>
        </member>
        <member name="F:IDRSNET.Constants.IDRS_TEXT_ATTRIBUTE.IDRS_TXT_ATT_ITALIC_MASK">
            <summary>
            Italic text attribute mask.
            Apply this mask on a the attributes to know if the text is italic or not.
            </summary>
        </member>
        <member name="F:IDRSNET.Constants.IDRS_TEXT_ATTRIBUTE.IDRS_TXT_ATT_FIXED_FONT_MASK">
            <summary>
            Fixed font text attribute mask.
            Apply this mask on a the attributes to know the fixed font text state.
            </summary>
        </member>
        <member name="F:IDRSNET.Constants.IDRS_TEXT_ATTRIBUTE.IDRS_TXT_ATT_UNDLINE_MASK">
            <summary>
            Underlined text attribute mask.
            Apply this mask on a the attributes to know the underlined text state.
            </summary>
        </member>
        <member name="F:IDRSNET.Constants.IDRS_TEXT_ATTRIBUTE.IDRS_TXT_ATT_UNDLINE_END_MASK">
            <summary>
            Underlined text end attribute mask.
            Apply this mask on a the attributes to know if the element is the last one of being underlined.
            </summary>
        </member>
        <member name="F:IDRSNET.Constants.IDRS_TEXT_ATTRIBUTE.IDRS_TXT_ATT_UNDLINE_START_MASK">
            <summary>
            Underlined text start attribute mask.
            Apply this mask on a the attributes to know if the element is the first one of being underlined.
            </summary>
        </member>
        <member name="F:IDRSNET.Constants.IDRS_TEXT_ATTRIBUTE.IDRS_TXT_ATT_SUPSCRIPT_MASK">
            <summary>
            Supscript text attribute mask.
            Apply this mask on a the attributes to know the supscripttext state.
            </summary>
        </member>
        <member name="T:IDRSNET.IDRS_GEOMETRICAL_SHAPE_TYPE">
            <summary>
            @} 
            </summary>
            <summary>
            IDRS_GEOMETRICAL_SHAPE_TYPE contains the geometrical shapes types available in iDRS SDK
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_GEOMETRICAL_SHAPE_TYPE.IDRS_GEOMETRICAL_SHAPE_TYPE_UNKNOWN">
            <summary>
            !
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_GEOMETRICAL_SHAPE_TYPE.IDRS_GEOMETRICAL_SHAPE_TYPE_HORIZONTAL">
            <summary>
            ! Horizontal shape
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_GEOMETRICAL_SHAPE_TYPE.IDRS_GEOMETRICAL_SHAPE_TYPE_VERTICAL">
            <summary>
            ! Vertical shape
            </summary>
        </member>
        <member name="T:IDRSNET.IDRS_PAGE_ROTATION">
            <summary>
            ! Possible page rotation values
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_PAGE_ROTATION.IDRS_PAGE_ROTATION_NONE">
            <summary>
            ! Page is in text reading orientation (no rotation).
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_PAGE_ROTATION.IDRS_PAGE_ROTATION_90">
            <summary>
            ! The page is rotated 90 degrees, anti-clockwise
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_PAGE_ROTATION.IDRS_PAGE_ROTATION_180">
            <summary>
            ! The page is rotated 180 degrees.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_PAGE_ROTATION.IDRS_PAGE_ROTATION_270">
            <summary>
            ! The page is rotated 270 degrees, anti-clockwise
            </summary>
        </member>
        <member name="T:IDRSNET.Language">
            <summary>
            The Language data type defines a language identifier.
            \ingroup module_ocr
            </summary>
        </member>
        <member name="F:IDRSNET.Language.English">
            <summary>
            English (American)
            </summary>
        </member>
        <member name="F:IDRSNET.Language.German">
            <summary>
            German
            </summary>
        </member>
        <member name="F:IDRSNET.Language.French">
            <summary>
            French
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Spanish">
            <summary>
            Spanish
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Italian">
            <summary>
            Italian
            </summary>
        </member>
        <member name="F:IDRSNET.Language.British">
            <summary>
            English (British)
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Swedish">
            <summary>
            Swedish
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Danish">
            <summary>
            Danish
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Norwegian">
            <summary>
            Norwegian
            Norwegian Bokm�l.
            <see cref="F:IDRSNET.Language.Nynorsk"/> 
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Dutch">
            <summary>
            Dutch
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Portuguese">
            <summary>
            Portuguese
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Brazilian">
            <summary>
            Brazilian Portuguese
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Galician">
            <summary>
            Galician
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Icelandic">
            <summary>
            Icelandic
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Greek">
            <summary>
            Greek
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Czech">
            <summary>
            Czech
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Hungarian">
            <summary>
            Hungarian
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Polish">
            <summary>
            Polish
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Romanian">
            <summary>
            Romanian
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Slovak">
            <summary>
            Slovak
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Croatian">
            <summary>
            Croatian
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Serbian">
            <summary>
            Serbian
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Slovenian">
            <summary>
            Slovenian
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Luxembourgish">
            <summary>
            Luxembourgish
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Finnish">
            <summary>
            Finnish
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Turkish">
            <summary>
            Turkish
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Russian">
            <summary>
            Russian
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Belarusian">
            <summary>
            Belarusian
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Ukrainian">
            <summary>
            Ukrainian
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Macedonian">
            <summary>
            Macedonian
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Bulgarian">
            <summary>
            Bulgarian
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Estonian">
            <summary>
            Estonian
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Lithuanian">
            <summary>
            Lithuanian
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Afrikaans">
            <summary>
            Afrikaans
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Albanian">
            <summary>
            Albanian
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Catalan">
            <summary>
            Catalan
            </summary>
        </member>
        <member name="F:IDRSNET.Language.IrishGaelic">
            <summary>
            Irish Gaelic
            </summary>
        </member>
        <member name="F:IDRSNET.Language.ScottishGaelic">
            <summary>
            Scottish Gaelic
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Basque">
            <summary>
            Basque
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Breton">
            <summary>
            Breton
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Corsican">
            <summary>
            Corsican
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Frisian">
            <summary>
            Frisian
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Nynorsk">
            <summary>
            Norwegian Nynorsk
            <see cref="F:IDRSNET.Language.Norwegian"/> 
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Indonesian">
            <summary>
            Indonesian
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Malay">
            <summary>
            Malay
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Swahili">
            <summary>
            Swahili
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Tagalog">
            <summary>
            Tagalog
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Japanese">
            <summary>
            Japanese.
            </summary>
            <remarks>Requires Asian OCR add-on.</remarks>
        </member>
        <member name="F:IDRSNET.Language.Korean">
            <summary>
            Korean.
            </summary>
            <remarks>Requires Asian OCR add-on.</remarks>
        </member>
        <member name="F:IDRSNET.Language.ChineseSimplified">
            <summary>
            Simplified chinese.
            </summary>
            <remarks>Requires Asian OCR add-on.</remarks>
        </member>
        <member name="F:IDRSNET.Language.ChineseTraditional">
            <summary>
            Traditional chinese.
            </summary>
            <remarks>Requires Asian OCR add-on.</remarks>
        </member>
        <member name="F:IDRSNET.Language.Quechua">
            <summary>
            Quechua
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Aymara">
            <summary>
            Aymara
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Faroese">
            <summary>
            Faroese
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Friulian">
            <summary>
            Friulian
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Greenlandic">
            <summary>
            Greenlandic
            </summary>
        </member>
        <member name="F:IDRSNET.Language.HaitianCreole">
            <summary>
            Haitian Creole
            </summary>
        </member>
        <member name="F:IDRSNET.Language.RhaetoRoman">
            <summary>
            Rhaeto-Romance
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Sardinian">
            <summary>
            Sardinian
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Kurdish">
            <summary>
            Kurdish
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Cebuano">
            <summary>
            Cebuano
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Bemba">
            <summary>
            Bemba
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Chamorro">
            <summary>
            Chamorro
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Fijian">
            <summary>
            Fijian
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Ganda">
            <summary>
            Ganda
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Hani">
            <summary>
            Hani
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Ido">
            <summary>
            Ido
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Interlingua">
            <summary>
            Interlingua
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Kikongo">
            <summary>
            Kikongo
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Kinyarwanda">
            <summary>
            Kinyarwanda
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Malagasy">
            <summary>
            Malagasy
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Maori">
            <summary>
            Maori
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Mayan">
            <summary>
            Mayan
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Minangkabau">
            <summary>
            Minangkabau
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Nahuatl">
            <summary>
            Nahuatl
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Nyanja">
            <summary>
            Nyanja
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Kirundi">
            <summary>
            Kirundi
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Samoan">
            <summary>
            Samoan
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Shona">
            <summary>
            Shona
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Somali">
            <summary>
            Somali
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Sotho">
            <summary>
            Sotho
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Sundanese">
            <summary>
            Sundanese
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Tahitian">
            <summary>
            Tahitian
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Tonga">
            <summary>
            Tongan
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Tswana">
            <summary>
            Tswana
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Wolof">
            <summary>
            Wolof
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Xhosa">
            <summary>
            Xhosa
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Zapotec">
            <summary>
            Zapotec
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Javanese">
            <summary>
            Javanese
            </summary>
        </member>
        <member name="F:IDRSNET.Language.NigerianPidgin">
            <summary>
            Nigerian Pidgin
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Occitan">
            <summary>
            Occitan
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Manx">
            <summary>
            Manx
            </summary>
        </member>
        <member name="F:IDRSNET.Language.TokPisin">
            <summary>
            Tok pisin
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Bislama">
            <summary>
            Bislama
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Hiligaynon">
            <summary>
            Hiligaynon
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Kapampangan">
            <summary>
            Kapampangan
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Balinese">
            <summary>
            Balinese
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Bikol">
            <summary>
            Bikol
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Ilocano">
            <summary>
            Ilocano.
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Madurese">
            <summary>
            Madurese.
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Waray">
            <summary>
            Waray.
            </summary>
        </member>
        <member name="F:IDRSNET.Language.None">
            <summary>
            No language, Latin alphabet
            </summary>
        </member>
        <member name="F:IDRSNET.Language.SerbianLatin">
            <summary>
            Serbian latin.
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Latin">
            <summary>
            Latin.
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Latvian">
            <summary>
            Latvian.
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Hebrew">
            <summary>
            Hebrew.
            </summary>
            <remarks>Requires Hebrew OCR add-on.</remarks>
        </member>
        <member name="F:IDRSNET.Language.Cmc7">
            <summary>
            CMC7
            This language allows you to read CMC7 character strings. The character set is limited to the numbers and the five
            special symbols.
            No syntax checks are performed as the special symbols are an "internal" symbol which indicates the start of the bank's
            internal information, an amount symbol, a terminator symbol and a "routing" symbol. The  symbol is recognized but has
            no name and is used by only few applications.
            The five "special" characters are replaced by ANSI symbols: the internal symbol is by default represented by the
            symbol "-", the amount symbol as "=", the terminator symbol  as "&lt;", the symbol as ";" and the routing symbol as "+".
            The spaces as occur in CMC7 magnetic lines are ignored.
            </summary>
            <remarks>Requires banking fonts.</remarks>
        </member>
        <member name="F:IDRSNET.Language.E13bOptical">
            <summary>
            E13B Optical
            This language limits recognition to the banking font E13B and supports the following character set: the numerals (0 - 9)
            and four special characters (&lt;, >, + and #).
            These four special characters are represented by the following Unicode symbols: the transit character (U+2446) is represented
            by the "#" character, the amount character (U+2447) by "&lt;", the on-us character (U+2448) by ">" and the dash character (U+2449)
            by "+".
            </summary>
            <remarks>Requires banking fonts.</remarks>
        </member>
        <member name="F:IDRSNET.Language.OcrA1Alphanumeric">
            <summary>
            OCR-A1 Alphanumeric
            This language limits recognition to the banking font OCR-A size I and supports an extended character sets: the numerals
            (0 - 9), the uppercase letters and a wide range of special characters (! " # $ % &amp; ' ( ) * + , . / \ : ; &lt; > = ? @ [ ] ^
            _ ' { } � � �) are recognized.
            Size I corresponds to characters which are 0.094" (2.39 mm) high.
            </summary>
            <remarks>Requires banking fonts.</remarks>
        </member>
        <member name="F:IDRSNET.Language.OcrA1Eurobanking">
            <summary>
            OCR-A1 Eurobanking
            This language limits recognition to the banking font OCR-A size I and recognizes the character set of the Eurobanking
            standard: the numerals (0 - 9), some uppercase letters (C, P, R, U, X and Z) and a range of special characters (+ # | /
            . , * ^ ` _ "   ).
            The three "robotic" characters are replaced by ANSI symbols: the chair is represented by the symbol "^", the
            fork by the symbol "_" (underscore) and the hook by the symbol "`" ("grave accent").
            </summary>
            <remarks>Size I corresponds to characters which are 0.094" (2.39 mm) high.</remarks>
            <remarks>Requires banking fonts.</remarks>
        </member>
        <member name="F:IDRSNET.Language.OcrA1Numeric">
            <summary>
            OCR-A1 Numeric
            This language limits recognition to the banking font OCR-A size I and recognizes a basically numeric character set
            composed of the numerals (0 - 9) and three special characters (^ ` _).
            </summary>
            <remarks>Size I corresponds to characters which are 0.094" (2.39 mm) high.</remarks>
            <remarks>Requires banking fonts.</remarks>
        </member>
        <member name="F:IDRSNET.Language.OcrB1Alphanumeric">
            <summary>
            OCR-B1 Alphanumeric
            This language limits recognition to the banking font OCR-B size I and supports an extended character sets: the numerals
            (0 - 9), the uppercase letters and a wide range of special characters (! " # $ % &amp; ' ( ) * + , . / \ : ; &lt; > = ? @ [ ] ^
            _ ' { } � � �) are recognized.
            </summary>
            <remarks>Size I corresponds to characters which are 0.094" (2.39 mm) high.</remarks>
            <remarks>Requires banking fonts.</remarks>
        </member>
        <member name="F:IDRSNET.Language.OcrB1Eurobanking">
            <summary>
            OCR-B1 Eurobanking
            This language limits recognition to the banking font OCR-B size I and supports the character set of the Eurobanking
            standard: the numbers (0 - 9), some uppercase letters (J, N, P and X) and a range of special characters (&lt; > + - / # *
            | . , ").
            </summary>
            <remarks>Size I corresponds to characters which are 0.094" (2.39 mm) high.</remarks>
            <remarks>Requires banking fonts.</remarks>
        </member>
        <member name="F:IDRSNET.Language.OcrB1Numeric">
            <summary>
            OCR-B1 Numeric
            This language limits recognition to the banking font OCR-B size I and supports a basically numeric character set
            composed of the numerals (0 - 9) and three special characters (+ &lt; >).
            </summary>
            <remarks>Size I corresponds to characters which are 0.094" (2.39 mm) high.</remarks>
            <remarks>Requires banking fonts.</remarks>
        </member>
        <member name="F:IDRSNET.Language.Numeric">
            <summary>
            Numeric
            This language limits recognition to numeric characters.
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Esperanto">
            <summary>
            Esperanto.
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Maltese">
            <summary>
            Maltese.
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Zulu">
            <summary>
            Zulu.
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Afaan">
            <summary>
            Afaan Oromo.
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Asturian">
            <summary>
            Asturian.
            </summary>
        </member>
        <member name="F:IDRSNET.Language.AzeriLatin">
            <summary>
            Azeri (latin).
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Luba">
            <summary>
            Luba.
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Papiamento">
            <summary>
            Papiamento.
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Tatar">
            <summary>
            Tatar (latin).
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Turkmen">
            <summary>
            Turkmen (latin).
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Welsh">
            <summary>
            Welsh.
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Arabic">
            <summary>
            Arabic.
            </summary>
            <remarks>Requires Arabic OCR add-on.</remarks>
        </member>
        <member name="F:IDRSNET.Language.Farsi">
            <summary>
            Farsi.
            </summary>
            <remarks>Requires Arabic OCR add-on.</remarks>
        </member>
        <member name="F:IDRSNET.Language.Mexican">
            <summary>
            Mexican Spanish.
            </summary>
        </member>
        <member name="F:IDRSNET.Language.BosnianLatin">
            <summary>
            Bosnian (Latin).
            IDRS_CHARSET_CATEGORY_E
            </summary>
        </member>
        <member name="F:IDRSNET.Language.BosnianCyrillic">
            <summary>
            Bosnian (Cyrillic).
            IDRS_CHARSET_CATEGORY_D
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Moldovan">
            <summary>
            Moldovan.
            IDRS_CHARSET_CATEGORY_E
            </summary>
        </member>
        <member name="F:IDRSNET.Language.SwissGerman">
            <summary>
            German (Switzerland).
            IDRS_CHARSET_CATEGORY_C
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Tetum">
            <summary>
            Tetum.
            IDRS_CHARSET_CATEGORY_C
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Kazakh">
            <summary>
            Kazakh (Cyrillic).
            IDRS_CHARSET_CATEGORY_D
            </summary>
        </member>
        <member name="F:IDRSNET.Language.MongolianCyrillic">
            <summary>
            Mongolian (Cyrillic).
            IDRS_CHARSET_CATEGORY_D
            </summary>
        </member>
        <member name="F:IDRSNET.Language.UzbekLatin">
            <summary>
            Uzbek (Latin).
            IDRS_CHARSET_CATEGORY_C
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Vietnamese">
            <summary>
            Vietnamese
            IDRS_CHARSET_CATEGORY_VIETNAMESE
            </summary>
        </member>
        <member name="F:IDRSNET.Language.Thai">
            <summary>
            Thai
            IDRS_CHARSET_CATEGORY_THAI
            </summary>
        </member>
        <member name="T:IDRSNET.IDRS_CHARSET_CATEGORY">
            <summary>
            iDRS languages categories.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_CHARSET_CATEGORY.IDRS_CHARSET_CATEGORY_A">
            <summary>
            English, British English.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_CHARSET_CATEGORY.IDRS_CHARSET_CATEGORY_B">
            <summary>
            Greek.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_CHARSET_CATEGORY.IDRS_CHARSET_CATEGORY_C">
            <summary>
            German, French, Spanish, Italian, Swedish, Danish, Norwegian, Dutch, Portuguese, Brazilian Portuguese, Icelandic, Galician, Luxembourgish,
            Finnish, Afrikaans, Albanian, Catalan, Irish Gaelic, Scottish Gaelic, Basque, Breton, Corsican, Frisian, Nynorsk,
            Indonesian, Malay, Swahili, Tagalog, Quechua, Aymara, Faroese, Friulian, Greenlandic, Haitian Creole, Rhaeto-Romance, Sardinian,
            Cebuano, Bemba, Chamorro, Fijian, Ganda, Hani, Ido, Interlingua, Kikongo, Kinyarwanda, Malagasy, Maori, Mayan, Nahuatl, Nyanja,
            Kirundi, Shona, Somali, Sotho, Tahitian, Tongan, Tswana, Wolof, Xhosa, Zapotec, Javanese, Nigerian Pidgin, Occitan, Manx, Tok Pisin,
            Bislama, Hiligaynon, Kapampagnan, Balinese, Bikol, Ilocano, Madurese, Waray, Latin, Esperanto, Maltese, Zulu, Afaan Oromo, Asturian,
            Azeri (latin), Luba, Papamiento, Tatar (latin), Turkmen (latin), Welsh, Mexican Spanish, Swiss German, Tetum, Uzbek (Latin).
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_CHARSET_CATEGORY.IDRS_CHARSET_CATEGORY_D">
            <summary>
            Serbian, Russian, Ukrainian, Macedonian, Bulgarian, Belarusian, Bosnian (Cyrillic), Kazakh (Cyrillic), Mongolian (Cyrillic).
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_CHARSET_CATEGORY.IDRS_CHARSET_CATEGORY_E">
            <summary>
            Romanian, Slovak, Croatian, Slovenian, Czech, Hungarian, Polish, Sundanese, Serbian latin, Bosnian (Latin), Moldovan.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_CHARSET_CATEGORY.IDRS_CHARSET_CATEGORY_F">
            <summary>
            Turkish, kurdish.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_CHARSET_CATEGORY.IDRS_CHARSET_CATEGORY_G">
            <summary>
            Estonian, Lithuanian, Minangkabau, Latvian, Samoan, Lithuanian.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_CHARSET_CATEGORY.IDRS_CHARSET_CATEGORY_H">
            <summary>
            Japanese.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_CHARSET_CATEGORY.IDRS_CHARSET_CATEGORY_I">
            <summary>
            Korean.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_CHARSET_CATEGORY.IDRS_CHARSET_CATEGORY_J">
            <summary>
            Simplified Chinese.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_CHARSET_CATEGORY.IDRS_CHARSET_CATEGORY_K">
            <summary>
            Traditionnal Chinese.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_CHARSET_CATEGORY.IDRS_CHARSET_CATEGORY_L">
            <summary>
            Hebrew.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_CHARSET_CATEGORY.IDRS_CHARSET_CATEGORY_CMC7">
            <summary>
            CMC7
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_CHARSET_CATEGORY.IDRS_CHARSET_CATEGORY_E13B">
            <summary>
            E13B
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_CHARSET_CATEGORY.IDRS_CHARSET_CATEGORY_OCRA1">
            <summary>
            OCRA1
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_CHARSET_CATEGORY.IDRS_CHARSET_CATEGORY_OCRB1">
            <summary>
            OCRB1
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_CHARSET_CATEGORY.IDRS_CHARSET_CATEGORY_EMPTY_LATIN">
            <summary>
            Numeric
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_CHARSET_CATEGORY.IDRS_CHARSET_CATEGORY_ARABIC">
            <summary>
            Arabic
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_CHARSET_CATEGORY.IDRS_CHARSET_CATEGORY_FARSI">
            <summary>
            Farsi
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_CHARSET_CATEGORY.IDRS_CHARSET_CATEGORY_VIETNAMESE">
            <summary>
            Vietnamese
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_CHARSET_CATEGORY.IDRS_CHARSET_CATEGORY_THAI">
            <summary>
            Thai
            </summary>
        </member>
        <member name="T:IDRSNET.BookmarkDisplayMode">
            <summary>
            Enums related to Page Content representation
            </summary>
            <summary>
            Enumeration allowing to specify a bookmark's display mode.
            <see cref="!:CPageBookmark.SetDisplayMode()"/> for more information.
            </summary>
            <remarks>Bookmarks display mode is taken into account only for PDF output.</remarks>
        </member>
        <member name="F:IDRSNET.BookmarkDisplayMode.Page">
            <summary>
            The whole page will be fit to the view.
            </summary>
            <remarks>
            \internal
            c_api_name BookmarkDisplayModePage
            \endinternal
            </remarks>
        </member>
        <member name="F:IDRSNET.BookmarkDisplayMode.PageWidth">
            <summary>
            The page width will be fit to the view, and the top of the view set to the destination's top.
            </summary>
            <remarks>
            \internal
            c_api_name BookmarkDisplayModePageWidth
            \endinternal
            </remarks>
        </member>
        <member name="F:IDRSNET.BookmarkDisplayMode.PageHeight">
            <summary>
            The page height will be fit to the view, and the left of the view set to the destination's left.
            </summary>
            <remarks>
            \internal
            c_api_name BookmarkDisplayModePageHeight
            \endinternal
            </remarks>
        </member>
        <member name="F:IDRSNET.BookmarkDisplayMode.Content">
            <summary>
            The page's content will be fit to the view.
            </summary>
            <remarks>
            \internal
            c_api_name BookmarkDisplayModeContent
            \endinternal
            </remarks>
        </member>
        <member name="F:IDRSNET.BookmarkDisplayMode.ContentWidth">
            <summary>
            The page's content width will be fit to the view, and the top of the view set to the destination's top.
            </summary>
            <remarks>
            \internal
            c_api_name BookmarkDisplayModeContentWidth
            \endinternal
            </remarks>
        </member>
        <member name="F:IDRSNET.BookmarkDisplayMode.ContentHeight">
            <summary>
            The page's content height will be fit to the view, and the left of the view set to the destination's left.
            </summary>
            <remarks>
            \internal
            c_api_name BookmarkDisplayModeContentHeight
            \endinternal
            </remarks>
        </member>
        <member name="F:IDRSNET.BookmarkDisplayMode.Rectangle">
            <summary>
            The destination's rectangle will be fit to the view.
            </summary>
            <remarks>
            \internal
            c_api_name BookmarkDisplayModeRectangle
            \endinternal
            </remarks>
        </member>
        <member name="F:IDRSNET.BookmarkDisplayMode.Zoom">
            <summary>
            The view will be positioned according to the destination's top and left coordinates, and the magnification
            level set to the bookmark's ZoomFactor property.
            </summary>
            <remarks>
            \internal
            c_api_name BookmarkDisplayModeZoom
            \endinternal
            </remarks>
        </member>
        <member name="T:IDRSNET.CompressionQuality">
            <summary>
            Enums related to Imaging and Compression
            </summary>
            <summary>
            Enumeration allowing to choose the target ratio between output size and image compression quality.
            </summary>
        </member>
        <member name="F:IDRSNET.CompressionQuality.MinimalSize">
            <summary>
            Minimal size
            </summary>
        </member>
        <member name="F:IDRSNET.CompressionQuality.VerySmallSize">
            <summary>
            Very small size
            </summary>
        </member>
        <member name="F:IDRSNET.CompressionQuality.SmallSize">
            <summary>
            Small size
            </summary>
        </member>
        <member name="F:IDRSNET.CompressionQuality.FavorSizeOverQuality">
            <summary>
            Favor size over quality
            </summary>
        </member>
        <member name="F:IDRSNET.CompressionQuality.Medium">
            <summary>
            Medium
            </summary>
        </member>
        <member name="F:IDRSNET.CompressionQuality.FavorQualityOverSize">
            <summary>
            Favor quality over size
            </summary>
        </member>
        <member name="F:IDRSNET.CompressionQuality.HighQuality">
            <summary>
            High quality
            </summary>
        </member>
        <member name="F:IDRSNET.CompressionQuality.VeryHighQuality">
            <summary>
            Very high quality
            </summary>
        </member>
        <member name="F:IDRSNET.CompressionQuality.MaximalQuality">
            <summary>
            Maximal quality
            </summary>
        </member>
        <member name="T:IDRSNET.CompressionLevel">
            <summary>
            Enumeration allowing to choose the target ratio between compression performance and output size.
            </summary>
        </member>
        <member name="F:IDRSNET.CompressionLevel.MaximumPerformance">
            <summary>
            Performs compression with maximum focus on speed.
            </summary>
            <remarks>For PNG output, it corresponds to deflate level 1.</remarks>
            <remarks>
            \internal
            c_api_name CompressionLevelMaximumPerformance
            \endinternal
            </remarks>
        </member>
        <member name="F:IDRSNET.CompressionLevel.VeryHighPerformance">
            <summary>
            Performs compression with very high focus on speed.
            </summary>
            <remarks>For PNG output, it corresponds to deflate level 2.</remarks>
            <remarks>
            \internal
            c_api_name CompressionLevelVeryHighPerformance
            \endinternal
            </remarks>
        </member>
        <member name="F:IDRSNET.CompressionLevel.HighPerformance">
            <summary>
            Performs compression with high focus on speed.
            </summary>
            <remarks>For PNG output, it corresponds to deflate level 3.</remarks>
            <remarks>
            \internal
            c_api_name CompressionLevelHighPerformance
            \endinternal
            </remarks>
        </member>
        <member name="F:IDRSNET.CompressionLevel.FavorPerformance">
            <summary>
            Performs compression favoring speed.
            </summary>
            <remarks>For PNG output, it corresponds to deflate level 4.</remarks>
            <remarks>
            \internal
            c_api_name CompressionLevelFavorPerformance
            \endinternal
            </remarks>
        </member>
        <member name="F:IDRSNET.CompressionLevel.Medium">
            <summary>
            Performs compression favoring size.
            </summary>
            <remarks>For PNG output, it corresponds to deflate level 5.</remarks>
            <remarks>
            \internal
            c_api_name CompressionLevelMedium
            \endinternal
            </remarks>
        </member>
        <member name="F:IDRSNET.CompressionLevel.FavorCompression">
            <summary>
            Performs compression with balance between size and speed.
            </summary>
            <remarks>For PNG output, it corresponds to deflate level 6. This is the default value.</remarks>
            <remarks>
            \internal
            c_api_name CompressionLevelFavorCompression
            \endinternal
            </remarks>
        </member>
        <member name="F:IDRSNET.CompressionLevel.HighCompression">
            <summary>
            Performs compression with high focus on size.
            </summary>
            <remarks>For PNG output, it corresponds to deflate level 7.</remarks>
            <remarks>
            \internal
            c_api_name CompressionLevelHighCompression
            \endinternal
            </remarks>
        </member>
        <member name="F:IDRSNET.CompressionLevel.VeryHighCompression">
            <summary>
            Performs compression with very high focus on size.
            </summary>
            <remarks>For PNG output, it corresponds to deflate level 8.</remarks>
            <remarks>
            \internal
            c_api_name CompressionLevelVeryHighCompression
            \endinternal
            </remarks>
        </member>
        <member name="F:IDRSNET.CompressionLevel.MaximumCompression">
            <summary>
            Performs compression with maximum focus on size.
            </summary>
            <remarks>For PNG output, it corresponds to deflate level 9.</remarks>
            <remarks>Note that compression level may have very low impact on size, for significant processing time increase.</remarks>
            <remarks>
            \internal
            c_api_name CompressionLevelMaximumCompression
            \endinternal
            </remarks>
        </member>
        <member name="T:IDRSNET.OutputFormat">
            <summary>
            Enums related to Document Output
            </summary>
            <summary>
            Definition of all output formats supported by the iDRS.
            </summary>
        </member>
        <member name="F:IDRSNET.OutputFormat.Text">
            <summary>
            Text output format
            </summary>
        </member>
        <member name="F:IDRSNET.OutputFormat.Html">
            <summary>
            HTML output format
            </summary>
        </member>
        <member name="F:IDRSNET.OutputFormat.Rtf">
            <summary>
            RTF output format
            </summary>
        </member>
        <member name="F:IDRSNET.OutputFormat.Pdf">
            <summary>
            PDF output format
            </summary>
        </member>
        <member name="F:IDRSNET.OutputFormat.Odt">
            <summary>
            Open document Text output format
            </summary>
        </member>
        <member name="F:IDRSNET.OutputFormat.Docx">
            <summary>
            DOCX output format
            </summary>
        </member>
        <member name="F:IDRSNET.OutputFormat.Xlsx">
            <summary>
            XLSX output format
            </summary>
        </member>
        <member name="F:IDRSNET.OutputFormat.Epub">
            <summary>
            EPUB output format
            </summary>
        </member>
        <member name="F:IDRSNET.OutputFormat.Pptx">
            <summary>
            Powerpoint presentation output format
            </summary>
        </member>
        <member name="T:IDRSNET.PageLayout">
            <summary>
            Definition of page layouts available for word processor and HTML outputs.
            </summary>
        </member>
        <member name="F:IDRSNET.PageLayout.NoLayout">
            <summary>
            Layout of the input pages is not retained, and all elements
            are written as body text in reading order.
            </summary>
        </member>
        <member name="F:IDRSNET.PageLayout.Flowing">
            <summary>
            Layout of the input pages will be reproduced as closely as
            possible with body text and page columns, using frames only
            for elements outside of the text body.
            </summary>
        </member>
        <member name="F:IDRSNET.PageLayout.Editable">
            <summary>
            Detected elements will be placed in frames to ensure reproducing
            exactly the input document's layout; graphic elements will also be
            created so that the layout of the page could be easily modified.
            </summary>
        </member>
        <member name="F:IDRSNET.PageLayout.Exact">
            <summary>
            Detected text will be placed in frames to ensure reproducing exactly
            the input document's layout, and the whole input image will be placed
            as page background to ensure maximum similarity to the input, at the
            cost of a document less easy to modify.
            </summary>
        </member>
        <member name="T:IDRSNET.SpreadsheetLayout">
            <summary>
            Definition of spreadsheet layouts available.
            </summary>
        </member>
        <member name="F:IDRSNET.SpreadsheetLayout.TablesOnly">
            <summary>
            Create one worksheet for each table detected and link them in a summary sheet.
            Text outside tables and graphics will not be written.
            </summary>
        </member>
        <member name="F:IDRSNET.SpreadsheetLayout.TablesAndText">
            <summary>
            Write detected tables and text outside tables in reading order,
            without trying to keep the original image's layout.
            </summary>
        </member>
        <member name="F:IDRSNET.SpreadsheetLayout.RecreateInput">
            <summary>
            Reproduce the input document's layout as faithfully as possible,
            using frames for graphics and text outside tables, to ensure exact positioning.
            </summary>
        </member>
        <member name="T:IDRSNET.SlideSize">
            <summary>
            Definition of presentation slide sizes available.
            </summary>
        </member>
        <member name="F:IDRSNET.SlideSize.Standard">
            <summary>
            Standard 4:3 presentation layout. Each slide in the presentation will have the following
            dimensions: 10in x 7.5in (25.4cm x 19.05cm)
            </summary>
        </member>
        <member name="F:IDRSNET.SlideSize.WideScreen">
            <summary>
            Widescreen 16:9 presentation layout. Each slide in the presentation will have the following
            dimensions: 10in x 5.625in (25.4cm x 14.2875cm)
            </summary>
        </member>
        <member name="F:IDRSNET.SlideSize.Custom">
            <summary>
            Custom slide size. The presentation slides dimension will be computed based on the size
            of the images added to the document.
            The following restrictions apply:
            - Minimum presentation dimension: 1in (2.54cm)
            - Maximum presentation dimension: 56in (142.24cm)
            </summary>
            <remarks>
            Please note that the above restrictions will be applied even if larger or smaller images are provided.
            That means that, providing an image 32000px x 1000px at 300 dpi will still output a vaild pptx file.
            </remarks>
        </member>
        <member name="T:IDRSNET.PageDisplay">
            <summary>
            Definition of how a PDF page content will be displayed.
            </summary>
        </member>
        <member name="F:IDRSNET.PageDisplay.TextAndGraphics">
            <summary>
            Detected zones (text, table, and graphics) will be positioned separately on the canvas of the PDF.
            </summary>
        </member>
        <member name="F:IDRSNET.PageDisplay.TextOverImage">
            <summary>
            For each page of the document, the detected text will be removed from the input image, and both will be added to the output page.
            The detected text will therefore be visible above the background image.
            </summary>
        </member>
        <member name="F:IDRSNET.PageDisplay.ImageOverText">
            <summary>
            For each page of the document, the input image will be added entirely on the output page, without any modification, and the detected text will
            be added under the image. This page display is also commonly called "Searchable PDF".
            </summary>
        </member>
        <member name="F:IDRSNET.PageDisplay.HyperCompression">
            <summary>
            Applies IRIS Hyper Compression to the output pages.
            IRIS iHQC (standing for "intelligent High Quality Compression") is a proprietary implementation of mixed raster content compression method (MRC).
            It relies on image segmentation to fine-tune compression rate applied to input images, which are separated between foreground, mask and background images.
            When generating the PDF, the detected text is also added under the image, which makes PDFs generated with iHQC compression
            searchable (similarly to ImageOverText page display).
            </summary>
        </member>
        <member name="T:IDRSNET.BookmarksMode">
            <summary>
            Enumeration allowing to select bookmarks modes.
            </summary>
        </member>
        <member name="F:IDRSNET.BookmarksMode.Disabled">
            <summary>
            Do not create bookmarks in output file, even if document metadata defines some.
            </summary>
            <remarks>
            \internal
            c_api_name BookmarksModeDisabled
            \endinternal
            </remarks>
        </member>
        <member name="F:IDRSNET.BookmarksMode.Enabled">
            <summary>
            Create bookmarks in output file, according to what is specified in document metadata.
            </summary>
            <remarks>This is the default behavior.</remarks>
            <remarks>
            \internal
            c_api_name BookmarksModeEnabled
            \endinternal
            </remarks>
        </member>
        <member name="T:IDRSNET.BackgroundCleanupAlgorithm">
            <summary>
            Enumeration defining background cleanup algorithms available.
            </summary>
        </member>
        <member name="F:IDRSNET.BackgroundCleanupAlgorithm.Erase">
            <summary>
            Erase text characters.
            Each character's bounding box will be filled with the background color detected by the OCR engine.
            This algorithm is very fast but on backgrounds with gradiant colors, the erased areas can be noticeable.
            </summary>
            <remarks>This is the default behavior.</remarks>
            <remarks>
            \internal
            c_api_name BackgroundCleanupAlgorithmErase
            \endinternal
            </remarks>
        </member>
        <member name="F:IDRSNET.BackgroundCleanupAlgorithm.None">
            <summary>
            None (no operation).
            This enum value will perform no background cleanup. This may be useful in specific cases, or when
            the integrator already performed cleanup operation on the image provided for document output creation.
            </summary>
            <remarks>
            \internal
            c_api_name BackgroundCleanupAlgorithmNone
            \endinternal
            </remarks>
        </member>
        <member name="T:IDRSNET.MetadataType">
            <summary>
            Metadata types that can be added to exported documents.
            Please note that not all the document types support all available metadata types.
            </summary>
        </member>
        <member name="F:IDRSNET.MetadataType.Title">
            <summary>
            The title of the document.
            </summary>
            <remarks>
            \internal
            c_api_name MetadataTypeTitle
            \endinternal
            </remarks>
        </member>
        <member name="F:IDRSNET.MetadataType.Author">
            <summary>
            The author of the document.
            </summary>
            <remarks>
            \internal
            c_api_name MetadataTypeAuthor
            \endinternal
            </remarks>
        </member>
        <member name="F:IDRSNET.MetadataType.Subject">
            <summary>
            The subject of the document.
            </summary>
            <remarks>
            \internal
            c_api_name MetadataTypeSubject
            \endinternal
            </remarks>
        </member>
        <member name="F:IDRSNET.MetadataType.Keywords">
            <summary>
            The keywords of the document.
            </summary>
            <remarks>
            \internal
            c_api_name MetadataTypeKeywords
            \endinternal
            </remarks>
        </member>
        <member name="F:IDRSNET.MetadataType.Creator">
            <summary>
            The creator of the document.
            </summary>
            <remarks>
            \internal
            c_api_name MetadataTypeCreator
            \endinternal
            </remarks>
        </member>
        <member name="F:IDRSNET.MetadataType.Producer">
            <summary>
            The producer of the document.
            </summary>
            <remarks>
            \internal
            c_api_name MetadataTypeProducer
            \endinternal
            </remarks>
        </member>
        <member name="F:IDRSNET.MetadataType.Company">
            <summary>
            The company.
            </summary>
            <remarks>
            \internal
            c_api_name MetadataTypeCompany
            \endinternal
            </remarks>
        </member>
        <member name="F:IDRSNET.MetadataType.Manager">
            <summary>
            The manager.
            </summary>
            <remarks>
            \internal
            c_api_name MetadataTypeManager
            \endinternal
            </remarks>
        </member>
        <member name="F:IDRSNET.MetadataType.Category">
            <summary>
            The category of the document.
            </summary>
            <remarks>
            \internal
            c_api_name MetadataTypeCategory
            \endinternal
            </remarks>
        </member>
        <member name="F:IDRSNET.MetadataType.Comment">
            <summary>
            The comments of the document.
            </summary>
            <remarks>
            \internal
            c_api_name MetadataTypeComment
            \endinternal
            </remarks>
        </member>
        <member name="F:IDRSNET.MetadataType.Description">
            <summary>
            The description of the document.
            </summary>
            <remarks>
            \internal
            c_api_name MetadataTypeDescription
            \endinternal
            </remarks>
        </member>
        <member name="F:IDRSNET.MetadataType.CreationTime">
            <summary>
            The creation time of the document.
            </summary>
            <remarks>
            \internal
            c_api_name MetadataTypeCreationTime
            \endinternal
            </remarks>
        </member>
        <member name="T:IDRSNET.PageSize">
            <summary>
            Definition of word processor page sizes.
            </summary>
        </member>
        <member name="F:IDRSNET.PageSize.A3">
            <summary>
            A3 page size.
            </summary>
        </member>
        <member name="F:IDRSNET.PageSize.A4">
            <summary>
            A4 page size.
            </summary>
        </member>
        <member name="F:IDRSNET.PageSize.A5">
            <summary>
            A5 page size.
            </summary>
        </member>
        <member name="F:IDRSNET.PageSize.A6">
            <summary>
            A6 page size.
            </summary>
        </member>
        <member name="F:IDRSNET.PageSize.B4">
            <summary>
            B4 page size.
            </summary>
        </member>
        <member name="F:IDRSNET.PageSize.B5">
            <summary>
            B5 page size.
            </summary>
        </member>
        <member name="F:IDRSNET.PageSize.Letter">
            <summary>
            Letter page size.
            </summary>
        </member>
        <member name="F:IDRSNET.PageSize.Legal">
            <summary>
            Legal page size.
            </summary>
        </member>
        <member name="F:IDRSNET.PageSize.Tabloid">
            <summary>
            Tabloid page size.
            </summary>
        </member>
        <member name="F:IDRSNET.PageSize.Executive">
            <summary>
            Executive page size.
            </summary>
        </member>
        <member name="T:IDRSNET.PageOrientation">
            <summary>
            Definition of word processor page orientations.
            </summary>
        </member>
        <member name="F:IDRSNET.PageOrientation.Portrait">
            <summary>
            Portrait orientation.
            </summary>
        </member>
        <member name="F:IDRSNET.PageOrientation.Landscape">
            <summary>
            Landscape orientation.
            </summary>
        </member>
        <member name="T:IDRSNET.PdfVersion">
            <summary>
            The PDF versions.
            </summary>
        </member>
        <member name="F:IDRSNET.PdfVersion.Pdf14">
            <summary>
            PDF 1.4
            PDF 1.4 - 2001 - Acrobat 5.0 + JBIG2; RC4 encryption key lengths greater than 40bits (128bits); Extensible Metadata Platform (XMP); Tagged PDF
            </summary>
        </member>
        <member name="F:IDRSNET.PdfVersion.PdfA1b">
            <summary>
            PDF 1.4 A-1b
            Part 1 of the PDF/A ISO standard [ISO 19005-1:2005] - PDF for Long-term Preservation, Use of PDF 1.4, Level B Conformance
            </summary>
        </member>
        <member name="F:IDRSNET.PdfVersion.PdfA1a">
            <summary>
            PDF 1.4 A-1a
            Part 1 of the PDF/A ISO standard [ISO 19005-1:2005] - PDF for Long-term Preservation, Use of PDF 1.4, Level A Conformance
            </summary>
        </member>
        <member name="F:IDRSNET.PdfVersion.Pdf15">
            <summary>
            PDF 1.5
            PDF 1.5 - 2003 - Acrobat 6.0 + JPEG 2000
            </summary>
        </member>
        <member name="F:IDRSNET.PdfVersion.Pdf16">
            <summary>
            PDF 1.6
            PDF 1.6 - 2005 - Acrobat 7.0 +  AES encryption
            </summary>
        </member>
        <member name="F:IDRSNET.PdfVersion.Pdf17">
            <summary>
            PDF 1.7
            PDF 1.7 - 2006 - Acrobat 8.0 -> 2008 - ISO 32000-1:2008
            </summary>
        </member>
        <member name="F:IDRSNET.PdfVersion.PdfA2b">
            <summary>
            PDF 1.7 A-2b
            Part 2 of the PDF/A ISO standard [ISO 19005-2] - PDF for Long-term Preservation, Use of ISO 32000-1 (PDF 1.7), Level B Conformance
            </summary>
        </member>
        <member name="F:IDRSNET.PdfVersion.PdfA2a">
            <summary>
            PDF 1.7 A-2a
            Part 2 of the PDF/A ISO standard [ISO 19005-2] - PDF for Long-term Preservation, Use of ISO 32000-1 (PDF 1.7), Level A Conformance
            </summary>
        </member>
        <member name="F:IDRSNET.PdfVersion.PdfA3b">
            <summary>
            PDF 1.7 A-3b
            Part 3 of the PDF/A ISO standard [ISO 19005-3] - PDF for Long-term Preservation, Use of ISO 32000-1 (PDF 1.7) with support for embedded files, Level B Conformance
            </summary>
        </member>
        <member name="F:IDRSNET.PdfVersion.PdfA3a">
            <summary>
            PDF 1.7 A-3a
            Part 3 of the PDF/A ISO standard [ISO 19005-3] - PDF for Long-term Preservation, Use of ISO 32000-1 (PDF 1.7) with support for embedded files, Level A Conformance
            </summary>
        </member>
        <member name="F:IDRSNET.PdfVersion.Pdf17Extension3">
            <summary>
            PDF 1.7
            PDF 1.7 - 2008 - Adobe Extension Level 3 / Acrobat 9.0 + 256-bit AES encryption
            </summary>
        </member>
        <member name="F:IDRSNET.PdfVersion.Pdf17Extension5">
            <summary>
            PDF 1.7
            PDF 1.7 - 2009 - Adobe Extension Level 5 / Acrobat 9.1
            </summary>
        </member>
        <member name="F:IDRSNET.PdfVersion.Pdf17Extension8">
            <summary>
            PDF 1.7
            PDF 1.7 - 2011 - Adobe Extension Level 8 / Acrobat X
            </summary>
        </member>
        <member name="F:IDRSNET.PdfVersion.PdfA2u">
            <summary>
            PDF 1.7 A-2u
            PDF/A-2u, PDF for Long-term Preservation, ISO 32000-1 (PDF 1.7), Level U Conformance
            </summary>
        </member>
        <member name="F:IDRSNET.PdfVersion.PdfA3u">
            <summary>
            PDF 1.7 A-3u
            PDF/A-3u, PDF for Long-term Preservation, ISO 32000-1 (PDF 1.7), Level U Conformance
            </summary>
        </member>
        <member name="T:IDRSNET.CharacterEncoding">
            <summary>
            Definition of character encodings available for text outputs.
            </summary>
        </member>
        <member name="F:IDRSNET.CharacterEncoding.Utf8">
            <summary>
            Utf8 encoding
            </summary>
        </member>
        <member name="F:IDRSNET.CharacterEncoding.Utf16">
            <summary>
            Utf16 encoding
            </summary>
        </member>
        <member name="T:IDRSNET.IDRS_ERROR">
            <summary>
            The IDRS_ERROR data type defines an error code.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_SUCCESS">
            <summary>
            Success.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_FAILURE">
            <summary>
            The function failed.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_MEMORY_ALLOCATION">
            <summary>
            Unable to allocate a block of memory.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_TODO_METHOD">
            <summary>
            This method isn't available yet.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_DLL_MISSING">
            <summary>
            A dll is missing.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_TODO_METHOD_LINUX">
            <summary>
            This method isn't available yet on linux
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_TODO_METHOD_MACINTOSH">
            <summary>
            This method isn't available yet on mactel
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_TODO_METHOD_WIN32">
            <summary>
            This method isn't available yet on win32
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_OS_VERSION">
            <summary>
            This method isn't available on the current version of the OS
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_BUFFER_TOO_SMALL">
            <summary>
            The buffer used is too small.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_NO_IMAGING_MODULE_READY">
            <summary>
            No imaging module has been set up.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_USER_ABORT">
            <summary>
            The user has aborted the current processing.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_TODO_METHOD_SOLARIS_GCC">
            <summary>
            This method isn't available yet on solaris-gcc
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_TODO_METHOD_WINCE">
            <summary>
            This method isn't available yet on wince
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_TODO_METHOD_IOS">
            <summary>
            This method isn't available yet on iOS
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_TODO_METHOD_AIX_GCC">
            <summary>
            This method isn't available yet on aix-gcc
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_RECOGNITION_ZONE_BAD_DIMENSION">
            <summary>
            The recognition zone has invalid dimensions (related to the object it is attached to).
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_BUFFER_IS_FULL">
            <summary>
            The buffer is too full to append any string.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_INVALID_MODULE">
            <summary>
            The module is invalid.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_FILE_NAME_NOT_EXIST">
            <summary>
            The file path doesn't contain a file name.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_MUTEX_CREATION_FAILURE">
            <summary>
            Fail to create a mutex object.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_SYNC_EVENT_WAIT_FAILURE">
            <summary>
            Waiting for a synchronization object failed
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_TEMPORARY_LICENSE_EXPIRED">
            <summary>
            Key has expired
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_TODO_METHOD_ANDROID">
            <summary>
            This method isn't available yet on Android
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_NOT_SUPPORTED">
            <summary>
            This operation is not supported by the iDRS in its current configuration.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_WARNING_NOT_RELEVANT">
            <summary>
            Warning - The information is not relevant.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_THREAD_CREATION_FAILURE">
            <summary>
            The iDRS failed to create a thread
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_THREAD_WAIT_FAILURE">
            <summary>
            The iDRS failed to join a thread
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_MUTEX_LOCK_FAILURE">
            <summary>
            The iDRS failed to lock a mutex
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_MUTEX_RELEASE_FAILURE">
            <summary>
            The iDRS failed to release a mutex
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_MEMORY_OVER_MAX_LIMIT">
            <summary>
            The memory allocated by iDRS is above the maximum threshold set in CIDRSMemory
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_MEMORY_MONITORING_AFTER_SETUP">
            <summary>
            The memory monitoring was enabled after setting up iDRS modules.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_FEATURE_DEPRECATED">
            <summary>
            This feature is deprecated
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_FILE_SEEK">
            <summary>
            Unable to seek in the file.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_FILE_OPEN">
            <summary>
            Unable to open the file.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_FILE_FORMAT">
            <summary>
            Invalid file format.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_READ_FAILURE">
            <summary>
            Read operation failed.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_WRITE_FAILURE">
            <summary>
            Write operation failed.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_INVALID_IMAGE_INDEX">
            <summary>
            The supplied image index is invalid.
            This error might occur during image loading, when the image index is not correct (possibly larger than the number of images contained in the file)
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_TEMPORARY_FILE_CREATE">
            <summary>
            The iDRS was unable to create a temporary file.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_INVALID_IMAGE_LOAD_OPTIONS">
            <summary>
            The iDRS tries to load an image with invalid load options
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_INVALID_ARGS">
            <summary>
            Invalid arguments for the method.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_INVALID_CALL">
            <summary>
            Invalid call to this method.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_INVALID_INDEX">
            <summary>
            The index is not valid.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_INVALID_RESOLUTION">
            <summary>
            The resolution is not valid.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_IMAGE_TOO_LARGE">
            <summary>
            The number of pixels in the supplied image size exceeds the maximum allowed value
            Please see IDRS_MAX_IMAGE_DIMENSION_OCR
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_INVALID_PDF_PASSWORD">
            <summary>
            The PDF password supplied is invalid
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_PAGE_WITHOUT_OCR_RESULTS">
            <summary>
            The Page has no ocr results
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_CHARACTER_RECOGNITION_ENGINE_IS_READY">
            <summary>
            Character recognition engine already initialized
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_CHARACTER_RECOGNITION_ENGINE_NOT_READY">
            <summary>
            Character recognition engine is not ready
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_CHARACTER_RECOGNITION_ENGINE_INVALID_KEY">
            <summary>
            Invalid Character recognition engine software key.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_CHARACTER_RECOGNITION_ENGINE_LOAD_RECOGNITION_ENV">
            <summary>
            Unable to load a recognition environment.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_CHARACTER_RECOGNITION_ENGINE_LOAD_DECISION_ENV">
            <summary>
            Unable to load a decision environment.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_CHARACTER_RECOGNITION_ENGINE_FAILURE">
            <summary>
            Character recognition engine failure
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_CHARACTER_RECOGNITION_ENGINE_ASIAN_NOT_READY">
            <summary>
            The Asian OCR add-on is not ready.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_CHARACTER_RECOGNITION_ENGINE_HEBREW_NOT_READY">
            <summary>
            The Hebrew OCR add-on is not ready.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_CHARACTER_RECOGNITION_ENGINE_HAND_WRITE_NOT_READY">
            <summary>
            The HAND_WRITE module is not ready.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_CHARACTER_RECOGNITION_ENGINE_BANKING_FONTS_NOT_READY">
            <summary>
            The banking fonts recognition add-on is not ready.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_CHARACTER_RECOGNITION_ENGINE_ARABIC_NOT_READY">
            <summary>
            The arabic fonts recognition add-on is not ready.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_CHARACTER_RECOGNITION_ENGINE_ARABIC_FAILURE">
            <summary>
            An error occured in the Arabic OCR engine.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_CHARACTER_RECOGNITION_ENGINE_LOAD_RECOGNITION_ENV_MULTI_ASIAN">
            <summary>
            Unable to load an Asian recognition environment because another Asian recognition environment is already loaded.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_CHARACTER_RECOGNITION_ENGINE_LOAD_RECOGNITION_ENV_MULTI_ARABIC">
            <summary>
            Unable to load an Arabic recognition environment because another Arabic recognition environment is already loaded.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_CHARACTER_RECOGNITION_ENGINE_UNEXPECTED_ZONE_TYPE">
            <summary>
            The zone type found at segmentation does not match the zone type returned by recognition.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_CHARACTER_RECOGNITION_ENGINE_INVALID_LANGUAGE_COMBINATION">
            <summary>
            The language combination is invalid. Please see <see cref="M:IDRSNET.CLngUtils.TestCompatibility(IDRSNET.Language,IDRSNET.Language)"/> for details about mixing recognition languages
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_ASIAN_ENGINES_MUTUALLY_EXCLUSIVE">
            <summary>
            IDRS_OCR_EXTENSION_ASIAN and IDRS_OCR_EXTENSION_ASIAN2 extensions cannot be loaded at the same time
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_CHARACTER_RECOGNITION_ENGINE_NO_ASIAN_READY">
            <summary>
            No Asian OCR add-on is ready (neither Asian1 nor Asian2).
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_BCODE_IS_READY">
            <summary>
            BCode already initialized
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_BCODE_NOT_READY">
            <summary>
            BCode is not ready
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_BARCODE_INVALID_KEY">
            <summary>
            Invalid barcode software key.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_BCODEPDF417_NOT_READY">
            <summary>
            BCode PDF 417 is not ready
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_BCODEQRCODE_NOT_READY">
            <summary>
            BCode QR code is not ready
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_BCODE_FAILURE">
            <summary>
            BCode failure.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_BCODEDATAMATRIX_NOT_READY">
            <summary>
            BCode DataMatrix is not ready
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_BARCODE_ENGINE_INVALID_RESPONSE">
            <summary>
            Barcode engine could not be properly setup due to invalid internal response
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_BARCODE_ENGINE_SETUP_FAILURE">
            <summary>
            Barcode engine could not be properly setup due to libary loading
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_BARCODE_ENGINE_NOT_REGISTERED">
            <summary>
            The barcode engine is not registered. Please register the barcode engine with the supplied identifier using CBarcodeEngineManager
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_BARCODE_ENGINE_NOT_AVAILABLE">
            <summary>
            The supplied barcode engine identifier is not yet available. Please make sure it is registered using <see cref="T:IDRSNET.CBarcodeEngineManager"/> and
            enabled using <see cref="T:IDRSNET.CBarcodeDetailedParameters"/> 
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_BARCODE_ENGINE_ALREADY_REGISTERED">
            <summary>
            A barcode engine with the same unique identifier has been already registered.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_BARCODE_ENGINE_CANNOT_UNREGISTER">
            <summary>
            There was an error while removing the specified barcode engine.
            Please note that the default barcode engines shipped with iDRS SDK cannot be unregistered.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_BARCODE_ENGINE_UNSUPPORTED_CUSTOM_BARCODE_TYPE">
            <summary>
            The supplied custom barcode type is not supported by the engine
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_PREPRO_IS_READY">
            <summary>
            Pre-process already initialized
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_PREPRO_NOT_READY">
            <summary>
            Pre-process is not ready.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_PREPRO_INVALID_KEY">
            <summary>
            Invalid pre-process software key.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_ADVANCED_PREPRO_NOT_READY">
            <summary>
            Advanced preprocessing module is not ready.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_ADVANCED_PREPRO_INVALID_KEY">
            <summary>
            Invalid advanced pre-process software key.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_PREPRO_FAILURE">
            <summary>
            Prepro failure.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_PREPRO_DESPECKLE_FAILURE">
            <summary>
            Prepro despeckle failure.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_PREPRO_DARKBORDER_REMOVAL_INVALID_MARGINS">
            <summary>
            The margins set for dark border removal are invalid for the supplied image
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_MOBILE_CAPTURE_LIBRARY_NOT_READY">
            <summary>
            The mobile capture library is not currently loaded.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_MOBILE_CAPTURE_FAILURE">
            <summary>
            Mobile capture library encountered an error while performing perspective correction
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_MOBILE_CAPTURE_PERSPECTIVE_DISTORTION_TOO_LARGE">
            <summary>
            The mobile capture library detected a perspective distortion too large to allow correction while keeping the whole image.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_DOCUMENT_OUTPUT_IS_READY">
            <summary>
            Document output module already initialized.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_DOCUMENT_OUTPUT_NOT_READY">
            <summary>
            Document output module is not ready.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_DOCUMENT_OUTPUT_FAILURE">
            <summary>
            Document output error.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_DOCUMENT_OUTPUT_INVALID_KEY">
            <summary>
            Invalid document output module software key.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_DOCUMENT_OUTPUT_CERTIFICATE_NOT_FOUND">
            <summary>
            Specified certificate not found.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_DOCUMENT_OUTPUT_IHQC_NOT_READY">
            <summary>
            Advanced document output module is not ready.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_DOCUMENT_OUTPUT_IHQC_INVALID_KEY">
            <summary>
            Invalid advanced document output software key.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_DOCUMENT_OUTPUT_IHQC_INVALID_HRFG_CONFIGURATION">
            <summary>
            Invalid advanced document output High-Resolution Foreground configuration.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_DOCUMENT_OUTPUT_REQUIRES_OUTPUT_FILE_PATH">
            <summary>
            iDRS SDK requires a file output path for the specified format configuration, thus cannot save output to stream.
            Currently, only html format without embedded images option is concerned by this limitation.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_IMAGE_FILE_IS_READY">
            <summary>
            Image file module already initialized.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_IMAGE_FILE_NOT_READY">
            <summary>
            Image file is not ready.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_IMAGE_FILE_FAILURE">
            <summary>
            Image file error.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_IMAGE_FILE_INVALID_KEY">
            <summary>
            Invalid Image file module software key.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_IMAGE_FILE_FAILURE_RENC">
            <summary>
            Image file error while compressing a line.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_IMAGE_FILE_PDF_NOT_READY">
            <summary>
            Image file pdf extension not enabled.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_IMAGE_FILE_PDF_LICENSE_ERROR">
            <summary>
            Image file pdf extension license is not correct
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_IMAGE_FILE_PDF_UNKNOWN">
            <summary>
            Image file pdf extension unknown error
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_IMAGE_FILE_PDF_TIMEOUT">
            <summary>
            Image file pdf extension timeout
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_IMAGE_FILE_PDF_PROCESS_FAILURE">
            <summary>
            Image file pdf extension process failure
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_IMAGE_FILE_PDF_INVALID_PASSWORD">
            <summary>
            The password set to open the PDF is invalid.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_IMAGE_FILE_PDF_MISSING_DEPENDENCY">
            <summary>
            The image file pdf could not find one of its following component.
            Please refer to "File to be included with your application" section of the iDRS documentation.
            See <a href="page6.html">page6</a> 
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_IMAGE_FILE_PDF_CORRUPT">
            <summary>
            Image file pdf corrupted
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_IMAGE_FILE_PDF_PAGE_ERROR">
            <summary>
            Image file pdf page not found or content error
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_IMAGE_FILE_PDF_FONT_MISSING_GLYPH_INFO">
            <summary>
            the pdf font is missing some glyph info
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_IMAGE_FILE_PDF_UNSUPPORTED_CHARACTER">
            <summary>
            the pdf contains some unsupprted characters
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_EXTERNAL_PDF_UNEXPECTED_TYPE_FIELDS_REFERENCE_OBJECT">
            <summary>
            ! The input external pdf contains an unexpected object type while reading Fields object from AcroForm dictionary
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_EXTERNAL_PDF_UNEXPECTED_TYPE_FIELDS_OBJECT">
            <summary>
            ! The input external pdf contains an unexpected object type while reading Fields object from AcroForm dictionary
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_EXTERNAL_PDF_UNEXPECTED_TYPE_ACROFORM_OBJECT">
            <summary>
            ! The input external pdf contains an unexpected type for the AcroForm object in Catalog object
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_EXTERNAL_PDF_UNEXPECTED_TYPE_ANNOTS_OBJECT">
            <summary>
            ! The input external pdf contains an unexpected type for Annots object on Page object
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_EXTERNAL_PDF_UNSUPPORTED_ENCRYPTION">
            <summary>
            ! The input external pdf uses an unsupported encryption method
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_J2K_MIN_ERROR">
            <summary>
            JPEG 2000 compressor errors min value
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_J2K_MAX_ERROR">
            <summary>
            JPEG 2000 compressor errors max value
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_DOCUMENT_OUTPUT_KRN_MIN_ERROR">
            <summary>
            Document Output kernel errors min value
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_DOCUMENT_OUTPUT_ENGINE_ASSERTION">
            <summary>
            The document output engine reached an unexpected state.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_DOCUMENT_OUTPUT_ALLOC_CRITICAL_SIZE">
            <summary>
            The memory allocation for the document output module exceeds the maximum size.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_DOCUMENT_OUTPUT_XML_NOT_WELL_DONE">
            <summary>
            The input data for the document output module are not well formed.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_DOCUMENT_OUTPUT_WORD_LIMITATION">
            <summary>
            There are violations in the following limitations for Word 2007 format:
            - The least number of column is 1, the maximum number of column is 63.
            - The least number of row is 1, the maximum number of row is 32767.
            - Page size: word page limitation = 22inch = 1584 point = 31680 twips.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_DOCUMENT_OUTPUT_J2K_SIZE_LIMIT">
            <summary>
            The image size returned by JPEG 2000 compressor is too small.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_DOCUMENT_OUTPUT_API_PARAM_INCOHERENT">
            <summary>
            Parameters are not correctly set for the document output module.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_DOCUMENT_OUTPUT_SIGNATURE_FAILURE">
            <summary>
            Unable to apply signature to the output document.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_DOCUMENT_OUTPUT_XML_LOAD_IMPOSSIBLE">
            <summary>
            The input data for the document output module are not loaded successfully.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_DOCUMENT_OUTPUT_TTREADER_UNKNOWN">
            <summary>
            There is a problem in the font related input data for the document output module.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_DOCUMENT_OUTPUT_PDF_NO_PAGE">
            <summary>
            Creating a document with no page
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_DOCUMENT_OUTPUT_PREPRO_XTR">
            <summary>
            An error occurs when the prepro module extracts and processes the image for the document output module.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_DOCUMENT_OUTPUT_PREPRO_MRC">
            <summary>
            An error occurs when the prepro module processes the image on iHQC for the document output module.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_DOCUMENT_OUTPUT_KRN_MAX_ERROR">
            <summary>
            Document Output kernel errors max value
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_FINGERPRINT_IS_READY">
            <summary>
            Fingerprint module already initialized.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_FINGERPRINT_NOT_READY">
            <summary>
            Image file is not ready.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_FINGERPRINT_FAILURE">
            <summary>
            Image file error.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_FINGERPRINT_INVALID_KEY">
            <summary>
            Invalid Image file module software key.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_DOCUMENT_OUTPUT_LITE_IS_READY">
            <summary>
            Document output module lite already initialized.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_DOCUMENT_OUTPUT_LITE_NOT_READY">
            <summary>
            Document output module lite is not ready.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_DOCUMENT_OUTPUT_LITE_INVALID_KEY">
            <summary>
            Invalid document output module software key.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_DOCUMENT_OUTPUT_LITE_SEARCHABLE_PDF_NOT_READY">
            <summary>
            The Searchable PDF extension of the document output lite module is not ready.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_DOCUMENT_OUTPUT_LITE_EDITABLE_RTF_NOT_READY">
            <summary>
            The Editable RTF extension of the document output lite module is not ready.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_PAGESET_INVALID_SEEK_POSITION">
            <summary>
            The specified seek position is invalid
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_AUTHENTICODE_WINTRUST_MISSING">
            <summary>
            The file used for authenticating the dll signature is missing from host computer
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_AUTHENTICODE_WINTRUST_CANNOT_LOAD">
            <summary>
            The file used for authenticating the dll signature cannot be loaded
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_AUTHENTICODE_WINTRUST_CANNOT_UNLOAD">
            <summary>
            The file used for authenticating the dll signature cannot be unloaded
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_AUTHENTICODE_NOT_INITIALIZED">
            <summary>
            Authenticode code has not been properly setup
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_AUTHENTICODE_NOT_TRUSTED">
            <summary>
            The library that iDRS is trying to load is not signed
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_AUTHENTICODE_ERROR_INTERNAL">
            <summary>
            Internal error in authenticode verification
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_CUSTOM_ALGORITHM_INVALID_ALGORITHM">
            <summary>
            The custom algorithm name is not correct. Please use the correct name for the custom algorithm
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_FMT_WARNING_MRC_JBIG2MASK_REMOVE">
            <summary>
            Output image size is bigger than A1 at 300dpi, interpolation and JBIG2 compression won't be used.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_FMT_WARNING_J2K_NOT_PERMIT">
            <summary>
            Output image size is too small for Jpeg2000 compression, JPEG will be used instead.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_FMT_WARNING_MISSING_GLYPH_INFO">
            <summary>
            One or several glyphs could not be found and are missing from the output document.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_FMT_WARNING_J2K_SIZE_LIMIT">
            <summary>
            Output image size is equal to the minimal possible for Jpeg2000 compression.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_FMT_WARNING_PDF_REFLOW_LIMITATION">
            <summary>
            The output PDF document will not have reflow support for the last pages (number of zones greater than 8191).
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_FMT_WARNING_ZERO_SIZE_ELEMENT">
            <summary>
            A text element provided to the document output engine contains only characters having a glyph width of 0.
            </summary>
            <remarks>In such case, a default size is used in order to avoid this invalid configuration.</remarks>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_C_SUCCESS">
            <summary>
            Success.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_C_INVALID_ARRAY_OBJECT_TYPE">
            <summary>
            Invalid array object type.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_C_INVALID_OBJECT">
            <summary>
            Invalid object.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_C_INVALID_OBJECT_TYPE">
            <summary>
            Invalid object type.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_C_INVALID_PARAMETER_TYPE">
            <summary>
            Invalid parameter type.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_C_NULL_OBJECT">
            <summary>
            Object is null.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ERROR.IDRS_ERROR_C_UNKNOWN_ERROR">
            <summary>
            Internal error.
            </summary>
        </member>
        <member name="T:IDRSNET.IDRS_SEEK_POSITION">
            <summary>
            The IDRS_SEEK_POSITION data type defines the initial position for a seek operation in a stream.
            The iDRS initial position for the seek operations.
            The iDRS defines 3 initial positions for a seek operation in a stream:
            - beginning
            - current position
            - end
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_SEEK_POSITION.IDRS_SEEK_POSITION_BEGIN">
            <summary>
            Seek from the beginning. (The origin is the beginning of the stream) 
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_SEEK_POSITION.IDRS_SEEK_POSITION_CURRENT">
            <summary>
            Seek from the current position. (The origin is the current position in the stream) 
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_SEEK_POSITION.IDRS_SEEK_POSITION_END">
            <summary>
            Seek from the end. (The origin is the end of the stream) 
            </summary>
        </member>
        <member name="T:IDRSNET.IDRS_ZONE_TYPE">
            <summary>
            The IDRS_ZONE_TYPE data type defines the type of a zone.
            The iDRS manages different types of zone:
            - text,
            - graphic,
            - table,
            - barcode,
            - handprinted text.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ZONE_TYPE.IDRS_ZONE_TEXT">
            <summary>
            Text: The zone contains some text. 
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ZONE_TYPE.IDRS_ZONE_GRAPHIC">
            <summary>
            Graphic: The zone contains an illustration, a photo, etc. 
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ZONE_TYPE.IDRS_ZONE_TABLE">
            <summary>
            Table: The zone contains a table. 
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ZONE_TYPE.IDRS_ZONE_BARCODE">
            <summary>
            Barcode. The zone contains a barcode. 
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ZONE_TYPE.IDRS_ZONE_HAND">
            <summary>
            Handprinting The zone contains handprinted text. 
            </summary>
        </member>
        <member name="T:IDRSNET.IDRS_ENGINE">
            <summary>
            The IDRS_ENGINE data types defines an identifier for an engine. 
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ENGINE.IDRS_ENGINE_OCR">
            <summary>
            OCR engine (printed and typed text). 
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ENGINE.IDRS_ENGINE_BARCODE">
            <summary>
            Barcode engine. 
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ENGINE.IDRS_ENGINE_NONE">
            <summary>
            No engine 
            </summary>
        </member>
        <member name="T:IDRSNET.IDRS_DOC_ADVANCED_CONFIDENCE">
            <summary>
            Internal Structure that contains detailed information about the recognition process
            <table>
            <tr><th>Parameter</th><th>Details</th></tr>
            <tr><td><b>ucOcrScore</b></td><td>Recognition score without any context of the surrounding blobs. Recognition is made by
            looking only at the shape of the blob (character).</td></tr>
            <tr><td><b>ucLexiconScore</b></td><td>Linguistic score that depends on the following:
            - The blob in the word is found in the lexicon.
            The score depends on the length of the word, if the word is a compound word (in some languages like German, words are built
            by assembling other words) and how well the word is separated from other words i.e. how the words are spaced in the line.
            
            e.g. 'm' solution in "Department" will have a good score whereas 'rn' (r+n) will not because "Department" is in the lexicon
            and not "Departrnent".
            -  The blob is "confirmed". A blob is confirmed if other shapes of it are found in the lexicon.
            
            e.g.: "Carmen Cuffari. Associate Professor, Department of Pediatrics".
            Even if "Cuffari" is not in the lexicon, some blobs in it may be confirmed if the blob shape is similar in other words found
            in lexicon.
            'a' is confirmed if the blob shape is similar to the 'a' in "Carmen", "Associate", "Department", "Pediatrics" that are in the
            lexicon. So 'a' will have a good linguistic score and not e.g. 'o' that in some fonts looks similar to 'a'.
            - The blob is in an all numeric word.
            
            e.g. blobs in "1000" will have a better linguistic score than "lOOO".</td></tr>
            <tr><td><b>ucTypographicScore</b></td><td>Score that takes into account how well the blob solution fits typographically.
            e.g. suppose we have the word "product" and for the 'o' blob a 'D' solution.
            'D' does not fit well typographically as the top of it should be the top line of uppercases and not the top line of lowercases.
            So it will have a bad score. 'o' solution will have a good typographic score. It is thanks to typography, that lowercase/uppercase
            is determined, e.g. "Carmen" instead of "carmen".</td></tr>
            <tr><td><b>uiTotalScore</b></td><td>The total score computed by the OCR engine.</td></tr>
            </table>
            </summary>
        </member>
        <member name="M:IDRSNET.IDRS_DOC_ADVANCED_CONFIDENCE.#ctor(IDRSNET.CIDRSDocAdvancedConfidence)">
            <summary>
            Structure constructor that converts class CIDRSDocAdvancedConfidence to
            structure IDRS_DOC_ADVANCED_CONFIDENCE by copying each fields
            </summary>
            <param name="_class">Class to be converted</param>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_ADVANCED_CONFIDENCE.ucOcrScore">
            <summary>
            ! The ocr score
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_ADVANCED_CONFIDENCE.ucLexiconScore">
            <summary>
            ! The lexicon score
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_ADVANCED_CONFIDENCE.ucTypographicScore">
            <summary>
            ! The typographic score
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_ADVANCED_CONFIDENCE.uiTotalScore">
            <summary>
            ! The total score computed by the OCR engine.
            </summary>
        </member>
        <member name="T:IDRSNET.CIDRSDocAdvancedConfidence">
            <summary>
            Public Class that contains detailed information about the recognition process
            <table>
            <tr><th>Parameter</th><th>Details</th></tr>
            <tr><td><b>ucOcrScore</b></td><td>Recognition score without any context of the surrounding blobs. Recognition is made by
            looking only at the shape of the blob (character).</td></tr>
            <tr><td><b>ucLexiconScore</b></td><td>Linguistic score that depends on the following:
            - The blob in the word is found in the lexicon.
            The score depends on the length of the word, if the word is a compound word (in some languages like German, words are built
            by assembling other words) and how well the word is separated from other words i.e. how the words are spaced in the line.
            
            e.g. 'm' solution in "Department" will have a good score whereas 'rn' (r+n) will not because "Department" is in the lexicon
            and not "Departrnent".
            -  The blob is "confirmed". A blob is confirmed if other shapes of it are found in the lexicon.
            
            e.g.: "Carmen Cuffari. Associate Professor, Department of Pediatrics".
            Even if "Cuffari" is not in the lexicon, some blobs in it may be confirmed if the blob shape is similar in other words found
            in lexicon.
            'a' is confirmed if the blob shape is similar to the 'a' in "Carmen", "Associate", "Department", "Pediatrics" that are in the
            lexicon. So 'a' will have a good linguistic score and not e.g. 'o' that in some fonts looks similar to 'a'.
            - The blob is in an all numeric word.
            
            e.g. blobs in "1000" will have a better linguistic score than "lOOO".</td></tr>
            <tr><td><b>ucTypographicScore</b></td><td>Score that takes into account how well the blob solution fits typographically.
            e.g. suppose we have the word "product" and for the 'o' blob a 'D' solution.
            'D' does not fit well typographically as the top of it should be the top line of uppercases and not the top line of lowercases.
            So it will have a bad score. 'o' solution will have a good typographic score. It is thanks to typography, that lowercase/uppercase
            is determined, e.g. "Carmen" instead of "carmen".</td></tr>
            <tr><td><b>uiTotalScore</b></td><td>The total score computed by the OCR engine.</td></tr>
            </table>
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSDocAdvancedConfidence.#ctor">
            <summary>
            Default constructor of CIDRSDocAdvancedConfidence.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSDocAdvancedConfidence.Finalize">
            <summary>
            Destructor of CIDRSDocAdvancedConfidence.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSDocAdvancedConfidence.#ctor(IDRSNET.IDRS_DOC_ADVANCED_CONFIDENCE)">
            <summary>
            Class constructor that converts structure IDRS_DOC_ADVANCED_CONFIDENCE to
            class CIDRSDocAdvancedConfidence by copying each fields
            </summary>
            <param name="_struct">set fields based on the values of the structure</param>
        </member>
        <member name="M:IDRSNET.CIDRSDocAdvancedConfidence.Update(IDRSNET.IDRS_DOC_ADVANCED_CONFIDENCE)">
            <summary>
            Update the fields of the the class based on the input structure
            </summary>
            <param name="_struct">update fields based on the values of the structure</param>
        </member>
        <member name="M:IDRSNET.CIDRSDocAdvancedConfidence.ToStruct">
            <summary>
            Converts the class fields to a structure
            </summary>
            <returns>IDRS_DOC_ADVANCED_CONFIDENCE</returns>
        </member>
        <member name="P:IDRSNET.CIDRSDocAdvancedConfidence.OcrScore">
            <summary>
            ! The ocr score
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocAdvancedConfidence.LexiconScore">
            <summary>
            ! The lexicon score
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocAdvancedConfidence.TypographicScore">
            <summary>
            ! The typographic score
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocAdvancedConfidence.TotalScore">
            <summary>
            ! The total score computed by the OCR engine.
            </summary>
        </member>
        <member name="T:IDRSNET.IDRS_DOC_BARCODE_DATA">
            <summary>
            Internal Structure that contains barcode recognized data
            \ingroup module_barcode
            </summary>
        </member>
        <member name="M:IDRSNET.IDRS_DOC_BARCODE_DATA.#ctor(IDRSNET.CIDRSDocBarcodeData)">
            <summary>
            Structure constructor that converts class CIDRSDocBarcodeData to
            structure IDRS_DOC_BARCODE_DATA by copying each fields
            </summary>
            <param name="_class">Class to be converted</param>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_BARCODE_DATA.rcCoordinates">
            <summary>
            ! The coordinates of the barcode data
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_BARCODE_DATA.wstrText">
            <summary>
            ! The text solution of the barcode engine
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_BARCODE_DATA.ucConfidence">
            <summary>
            The confidence level of the barcode engine for the identified solution.
            The confidence level ranges from 0 (best confidence) to 100 (worst confidence).
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_BARCODE_DATA.btBarcodeType">
            <summary>
            ! Type of barcode identifier
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_BARCODE_DATA.uiOrientation">
            <summary>
            ! Barcode orientation
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_BARCODE_DATA.uiCustomBarcodeType">
            <summary>
            ! Custom barcode identifier. Value is valid if btBarcodeType is set to IDRS_BARCODE_CUSTOM
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_BARCODE_DATA.uiEngineIdentifier">
            <summary>
            ! Engine identifier
            </summary>
        </member>
        <member name="T:IDRSNET.CIDRSDocBarcodeData">
            <summary>
            Public Class that contains barcode recognized data
            \ingroup module_barcode
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSDocBarcodeData.#ctor">
            <summary>
            Default constructor of CIDRSDocBarcodeData.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSDocBarcodeData.Finalize">
            <summary>
            Destructor of CIDRSDocBarcodeData.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSDocBarcodeData.#ctor(IDRSNET.IDRS_DOC_BARCODE_DATA)">
            <summary>
            Class constructor that converts structure IDRS_DOC_BARCODE_DATA to
            class CIDRSDocBarcodeData by copying each fields
            </summary>
            <param name="_struct">set fields based on the values of the structure</param>
        </member>
        <member name="M:IDRSNET.CIDRSDocBarcodeData.Update(IDRSNET.IDRS_DOC_BARCODE_DATA)">
            <summary>
            Update the fields of the the class based on the input structure
            </summary>
            <param name="_struct">update fields based on the values of the structure</param>
        </member>
        <member name="M:IDRSNET.CIDRSDocBarcodeData.ToStruct">
            <summary>
            Converts the class fields to a structure
            </summary>
            <returns>IDRS_DOC_BARCODE_DATA</returns>
        </member>
        <member name="P:IDRSNET.CIDRSDocBarcodeData.Coordinates">
            <summary>
            ! The coordinates of the barcode data
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocBarcodeData.Text">
            <summary>
            ! The text solution of the barcode engine
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocBarcodeData.Confidence">
            <summary>
            The confidence level of the barcode engine for the identified solution.
            The confidence level ranges from 0 (best confidence) to 100 (worst confidence).
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocBarcodeData.BarcodeType">
            <summary>
            ! Type of barcode identifier
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocBarcodeData.Orientation">
            <summary>
            ! Barcode orientation
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocBarcodeData.CustomBarcodeType">
            <summary>
            ! Custom barcode identifier. Value is valid if btBarcodeType is set to IDRS_BARCODE_CUSTOM
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocBarcodeData.EngineIdentifier">
            <summary>
            ! Engine identifier
            </summary>
        </member>
        <member name="T:IDRSNET.IDRS_DOC_CELL">
            <summary>
            Internal Structure that contains a cell element.
            \ingroup module_ocr
            </summary>
        </member>
        <member name="M:IDRSNET.IDRS_DOC_CELL.#ctor(IDRSNET.CIDRSDocCell)">
            <summary>
            Structure constructor that converts class CIDRSDocCell to
            structure IDRS_DOC_CELL by copying each fields
            </summary>
            <param name="_class">Class to be converted</param>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_CELL.xLines">
            <summary>
            ! The lines of the cell.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_CELL.uiLineCount">
            <summary>
            ! The number of lines in the cell.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_CELL.rcCoordinates">
            <summary>
            ! The coordinates of the cell in the image (pixels).
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_CELL.pCellStyle">
            <summary>
            ! The cell style.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_CELL.uiFirstCol">
            <summary>
            ! The 0 based index of the first column.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_CELL.uiColSpan">
            <summary>
            ! The column span.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_CELL.uiFirstRow">
            <summary>
            ! The 0 based index of the first row.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_CELL.uiRowSpan">
            <summary>
            ! The row span.
            </summary>
        </member>
        <member name="T:IDRSNET.CIDRSDocCell">
            <summary>
            Public Class that contains a cell element.
            \ingroup module_ocr
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSDocCell.#ctor">
            <summary>
            Default constructor of CIDRSDocCell.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSDocCell.Finalize">
            <summary>
            Destructor of CIDRSDocCell.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSDocCell.#ctor(IDRSNET.IDRS_DOC_CELL)">
            <summary>
            Class constructor that converts structure IDRS_DOC_CELL to
            class CIDRSDocCell by copying each fields
            </summary>
            <param name="_struct">set fields based on the values of the structure</param>
        </member>
        <member name="M:IDRSNET.CIDRSDocCell.Update(IDRSNET.IDRS_DOC_CELL)">
            <summary>
            Update the fields of the the class based on the input structure
            </summary>
            <param name="_struct">update fields based on the values of the structure</param>
        </member>
        <member name="M:IDRSNET.CIDRSDocCell.ToStruct">
            <summary>
            Converts the class fields to a structure
            </summary>
            <returns>IDRS_DOC_CELL</returns>
        </member>
        <member name="P:IDRSNET.CIDRSDocCell.Lines">
            <summary>
            ! The lines of the cell.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocCell.LineCount">
            <summary>
            ! The number of lines in the cell.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocCell.Coordinates">
            <summary>
            ! The coordinates of the cell in the image (pixels).
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocCell.CellStyle">
            <summary>
            ! The cell style.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocCell.FirstCol">
            <summary>
            ! The 0 based index of the first column.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocCell.ColSpan">
            <summary>
            ! The column span.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocCell.FirstRow">
            <summary>
            ! The 0 based index of the first row.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocCell.RowSpan">
            <summary>
            ! The row span.
            </summary>
        </member>
        <member name="T:IDRSNET.IDRS_DOC_CELL_STYLE">
            <summary>
            Internal Structure that contains a cell style element.
            \ingroup module_ocr
            </summary>
        </member>
        <member name="M:IDRSNET.IDRS_DOC_CELL_STYLE.#ctor(IDRSNET.CIDRSDocCellStyle)">
            <summary>
            Structure constructor that converts class CIDRSDocCellStyle to
            structure IDRS_DOC_CELL_STYLE by copying each fields
            </summary>
            <param name="_class">Class to be converted</param>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_CELL_STYLE.atAlign">
            <summary>
            ! The horizontal alignment type.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_CELL_STYLE.vaAlign">
            <summary>
            ! The vertical alignment type.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_CELL_STYLE.uiLeftPadding">
            <summary>
            ! Left padding.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_CELL_STYLE.uiRightPadding">
            <summary>
            ! Right padding.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_CELL_STYLE.bTopBorder">
            <summary>
            ! The flags for the top borders.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_CELL_STYLE.bLeftBorder">
            <summary>
            ! The flags for the left borders.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_CELL_STYLE.bBottomBorder">
            <summary>
            ! The flags for the bottom borders.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_CELL_STYLE.bRightBorder">
            <summary>
            ! The flags for the right borders.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_CELL_STYLE.pFont">
            <summary>
            ! The font.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_CELL_STYLE.clrBackground">
            <summary>
            ! The color of the background of the cell.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_CELL_STYLE.clrTopBorder">
            <summary>
            ! The color of the top border of the cell.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_CELL_STYLE.clrLeftBorder">
            <summary>
            ! The color of the left border of the cell.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_CELL_STYLE.clrBottomBorder">
            <summary>
            ! The color of the bottom border of the cell.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_CELL_STYLE.clrRightBorder">
            <summary>
            ! The color of the right border of the cell.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_CELL_STYLE.uiTopBorderWidth">
            <summary>
            ! The width (pixels) of the top border.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_CELL_STYLE.uiLeftBorderWidth">
            <summary>
            ! The width (pixels) of the left border.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_CELL_STYLE.uiBottomBorderWidth">
            <summary>
            ! The width (pixels) of the bottom border.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_CELL_STYLE.uiRightBorderWidth">
            <summary>
            ! The width (pixels) of the right border.
            </summary>
        </member>
        <member name="T:IDRSNET.CIDRSDocCellStyle">
            <summary>
            Public Class that contains a cell style element.
            \ingroup module_ocr
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSDocCellStyle.#ctor">
            <summary>
            Default constructor of CIDRSDocCellStyle.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSDocCellStyle.Finalize">
            <summary>
            Destructor of CIDRSDocCellStyle.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSDocCellStyle.#ctor(IDRSNET.IDRS_DOC_CELL_STYLE)">
            <summary>
            Class constructor that converts structure IDRS_DOC_CELL_STYLE to
            class CIDRSDocCellStyle by copying each fields
            </summary>
            <param name="_struct">set fields based on the values of the structure</param>
        </member>
        <member name="M:IDRSNET.CIDRSDocCellStyle.Update(IDRSNET.IDRS_DOC_CELL_STYLE)">
            <summary>
            Update the fields of the the class based on the input structure
            </summary>
            <param name="_struct">update fields based on the values of the structure</param>
        </member>
        <member name="M:IDRSNET.CIDRSDocCellStyle.ToStruct">
            <summary>
            Converts the class fields to a structure
            </summary>
            <returns>IDRS_DOC_CELL_STYLE</returns>
        </member>
        <member name="P:IDRSNET.CIDRSDocCellStyle.AtAlign">
            <summary>
            ! The horizontal alignment type.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocCellStyle.VaAlign">
            <summary>
            ! The vertical alignment type.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocCellStyle.LeftPadding">
            <summary>
            ! Left padding.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocCellStyle.RightPadding">
            <summary>
            ! Right padding.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocCellStyle.BTopBorder">
            <summary>
            ! The flags for the top borders.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocCellStyle.BLeftBorder">
            <summary>
            ! The flags for the left borders.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocCellStyle.BBottomBorder">
            <summary>
            ! The flags for the bottom borders.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocCellStyle.BRightBorder">
            <summary>
            ! The flags for the right borders.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocCellStyle.Font">
            <summary>
            ! The font.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocCellStyle.Background">
            <summary>
            ! The color of the background of the cell.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocCellStyle.ClrTopBorder">
            <summary>
            ! The color of the top border of the cell.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocCellStyle.ClrLeftBorder">
            <summary>
            ! The color of the left border of the cell.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocCellStyle.ClrBottomBorder">
            <summary>
            ! The color of the bottom border of the cell.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocCellStyle.ClrRightBorder">
            <summary>
            ! The color of the right border of the cell.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocCellStyle.TopBorderWidth">
            <summary>
            ! The width (pixels) of the top border.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocCellStyle.LeftBorderWidth">
            <summary>
            ! The width (pixels) of the left border.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocCellStyle.BottomBorderWidth">
            <summary>
            ! The width (pixels) of the bottom border.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocCellStyle.RightBorderWidth">
            <summary>
            ! The width (pixels) of the right border.
            </summary>
        </member>
        <member name="T:IDRSNET.IDRS_DOC_COLUMN">
            <summary>
            Internal Structure that contains a column.
            \ingroup module_ocr
            </summary>
        </member>
        <member name="M:IDRSNET.IDRS_DOC_COLUMN.#ctor(IDRSNET.CIDRSDocColumn)">
            <summary>
            Structure constructor that converts class CIDRSDocColumn to
            structure IDRS_DOC_COLUMN by copying each fields
            </summary>
            <param name="_class">Class to be converted</param>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_COLUMN.rcCoordinates">
            <summary>
            ! The coordinates of the columns
            </summary>
        </member>
        <member name="T:IDRSNET.CIDRSDocColumn">
            <summary>
            Public Class that contains a column.
            \ingroup module_ocr
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSDocColumn.#ctor">
            <summary>
            Default constructor of CIDRSDocColumn.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSDocColumn.Finalize">
            <summary>
            Destructor of CIDRSDocColumn.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSDocColumn.#ctor(IDRSNET.IDRS_DOC_COLUMN)">
            <summary>
            Class constructor that converts structure IDRS_DOC_COLUMN to
            class CIDRSDocColumn by copying each fields
            </summary>
            <param name="_struct">set fields based on the values of the structure</param>
        </member>
        <member name="M:IDRSNET.CIDRSDocColumn.Update(IDRSNET.IDRS_DOC_COLUMN)">
            <summary>
            Update the fields of the the class based on the input structure
            </summary>
            <param name="_struct">update fields based on the values of the structure</param>
        </member>
        <member name="M:IDRSNET.CIDRSDocColumn.ToStruct">
            <summary>
            Converts the class fields to a structure
            </summary>
            <returns>IDRS_DOC_COLUMN</returns>
        </member>
        <member name="P:IDRSNET.CIDRSDocColumn.Coordinates">
            <summary>
            ! The coordinates of the columns
            </summary>
        </member>
        <member name="T:IDRSNET.IDRS_DOC_FLOWING_PARAGRAPH_FORMAT">
            <summary>
            Internal Structure that contains a flowing paragraph element.
            \ingroup module_ocr
            Note about the difference between "flowing paragraphs" and paragraphs:
            <table border="0">
            <tr>
            <td>This is a </td><td></td>
            </tr><tr>
            <td>paragraph </td><td>I</td>
            </tr><tr>
            <td>flowing   </td><td>M</td>
            </tr><tr>
            <td>around an </td><td>A</td>
            </tr><tr>
            <td>image.    </td><td>G</td>
            </tr><tr>
            <td>This is a </td><td>E</td>
            </tr><tr>
            <td>paragraph </td><td></td>
            </tr><tr>
            <td colspan="2">flowing around an image.</td></tr>
            </table>
            This text contains 2 flowing paragraphs.
            The first flowing paragraphs contains one paragraph but the second flowing paragraph is split into 2 paragraphs, because the last line is much longer than the previous lines.
            Flowing paragraphs can be used for external formats having "flowing text" capabilities (e.g. RTF with columns).
            </summary>
        </member>
        <member name="M:IDRSNET.IDRS_DOC_FLOWING_PARAGRAPH_FORMAT.#ctor(IDRSNET.CIDRSDocFlowingParagraphFormat)">
            <summary>
            Structure constructor that converts class CIDRSDocFlowingParagraphFormat to
            structure IDRS_DOC_FLOWING_PARAGRAPH_FORMAT by copying each fields
            </summary>
            <param name="_class">Class to be converted</param>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_FLOWING_PARAGRAPH_FORMAT.xParagraphs">
            <summary>
            ! The paragraphs of the flowing paragraph.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_FLOWING_PARAGRAPH_FORMAT.uiParagraphCount">
            <summary>
            ! The number of paragraphs in the flowing paragraph.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_FLOWING_PARAGRAPH_FORMAT.rcCoordinates">
            <summary>
            ! The coordinates of the flowing paragraph in the image (pixels).
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_FLOWING_PARAGRAPH_FORMAT.pParagraphStyle">
            <summary>
            ! The paragraph style.
            </summary>
        </member>
        <member name="T:IDRSNET.CIDRSDocFlowingParagraphFormat">
            <summary>
            Public Class that contains a flowing paragraph element.
            \ingroup module_ocr
            Note about the difference between "flowing paragraphs" and paragraphs:
            <table border="0">
            <tr>
            <td>This is a </td><td></td>
            </tr><tr>
            <td>paragraph </td><td>I</td>
            </tr><tr>
            <td>flowing   </td><td>M</td>
            </tr><tr>
            <td>around an </td><td>A</td>
            </tr><tr>
            <td>image.    </td><td>G</td>
            </tr><tr>
            <td>This is a </td><td>E</td>
            </tr><tr>
            <td>paragraph </td><td></td>
            </tr><tr>
            <td colspan="2">flowing around an image.</td></tr>
            </table>
            This text contains 2 flowing paragraphs.
            The first flowing paragraphs contains one paragraph but the second flowing paragraph is split into 2 paragraphs, because the last line is much longer than the previous lines.
            Flowing paragraphs can be used for external formats having "flowing text" capabilities (e.g. RTF with columns).
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSDocFlowingParagraphFormat.#ctor">
            <summary>
            Default constructor of CIDRSDocFlowingParagraphFormat.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSDocFlowingParagraphFormat.Finalize">
            <summary>
            Destructor of CIDRSDocFlowingParagraphFormat.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSDocFlowingParagraphFormat.#ctor(IDRSNET.IDRS_DOC_FLOWING_PARAGRAPH_FORMAT)">
            <summary>
            Class constructor that converts structure IDRS_DOC_FLOWING_PARAGRAPH_FORMAT to
            class CIDRSDocFlowingParagraphFormat by copying each fields
            </summary>
            <param name="_struct">set fields based on the values of the structure</param>
        </member>
        <member name="M:IDRSNET.CIDRSDocFlowingParagraphFormat.Update(IDRSNET.IDRS_DOC_FLOWING_PARAGRAPH_FORMAT)">
            <summary>
            Update the fields of the the class based on the input structure
            </summary>
            <param name="_struct">update fields based on the values of the structure</param>
        </member>
        <member name="M:IDRSNET.CIDRSDocFlowingParagraphFormat.ToStruct">
            <summary>
            Converts the class fields to a structure
            </summary>
            <returns>IDRS_DOC_FLOWING_PARAGRAPH_FORMAT</returns>
        </member>
        <member name="P:IDRSNET.CIDRSDocFlowingParagraphFormat.Paragraphs">
            <summary>
            ! The paragraphs of the flowing paragraph.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocFlowingParagraphFormat.ParagraphCount">
            <summary>
            ! The number of paragraphs in the flowing paragraph.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocFlowingParagraphFormat.Coordinates">
            <summary>
            ! The coordinates of the flowing paragraph in the image (pixels).
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocFlowingParagraphFormat.ParagraphStyle">
            <summary>
            ! The paragraph style.
            </summary>
        </member>
        <member name="T:IDRSNET.IDRS_DOC_FONT">
            <summary>
            Internal Structure representing a font element
            \ingroup module_ocr
            </summary>
        </member>
        <member name="M:IDRSNET.IDRS_DOC_FONT.#ctor(IDRSNET.CIDRSDocFont)">
            <summary>
            Structure constructor that converts class CIDRSDocFont to
            structure IDRS_DOC_FONT by copying each fields
            </summary>
            <param name="_class">Class to be converted</param>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_FONT.uiSize">
            <summary>
            ! The point size x 10.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_FONT.uiStretch">
            <summary>
            ! The stretching factor. Percentage value (stretch &lt; 100 means narrower and > 100 wider).
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_FONT.strFamilyName">
            <summary>
            ! The font family name (e.g. "Times New Roman").
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_FONT.strFontName">
            <summary>
            ! The font font name (e.g. "TimesNewRomanPS-BoldItalicMT").
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_FONT.ui32Attributes">
            <summary>
            The font attributes (bold, italic, etc.).
            <see cref="T:IDRSNET.Constants.IDRS_TEXT_ATTRIBUTE"/> 
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_FONT.ucFamilyType">
            <summary>
            The font family type (serif, monotype, sanserif, ...)
            iDRS typeface family types.
            </summary>
        </member>
        <member name="T:IDRSNET.CIDRSDocFont">
            <summary>
            Public Class representing a font element
            \ingroup module_ocr
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSDocFont.#ctor">
            <summary>
            Default constructor of CIDRSDocFont.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSDocFont.Finalize">
            <summary>
            Destructor of CIDRSDocFont.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSDocFont.#ctor(IDRSNET.IDRS_DOC_FONT)">
            <summary>
            Class constructor that converts structure IDRS_DOC_FONT to
            class CIDRSDocFont by copying each fields
            </summary>
            <param name="_struct">set fields based on the values of the structure</param>
        </member>
        <member name="M:IDRSNET.CIDRSDocFont.Update(IDRSNET.IDRS_DOC_FONT)">
            <summary>
            Update the fields of the the class based on the input structure
            </summary>
            <param name="_struct">update fields based on the values of the structure</param>
        </member>
        <member name="M:IDRSNET.CIDRSDocFont.ToStruct">
            <summary>
            Converts the class fields to a structure
            </summary>
            <returns>IDRS_DOC_FONT</returns>
        </member>
        <member name="P:IDRSNET.CIDRSDocFont.Size">
            <summary>
            ! The point size x 10.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocFont.Stretch">
            <summary>
            ! The stretching factor. Percentage value (stretch &lt; 100 means narrower and > 100 wider).
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocFont.FamilyName">
            <summary>
            ! The font family name (e.g. "Times New Roman").
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocFont.FontName">
            <summary>
            ! The font font name (e.g. "TimesNewRomanPS-BoldItalicMT").
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocFont.Attributes">
            <summary>
            The font attributes (bold, italic, etc.).
            <see cref="T:IDRSNET.Constants.IDRS_TEXT_ATTRIBUTE"/> 
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocFont.FamilyType">
            <summary>
            The font family type (serif, monotype, sanserif, ...)
            iDRS typeface family types.
            </summary>
        </member>
        <member name="T:IDRSNET.IDRS_DOC_GEOMETRICAL_SHAPE">
            <summary>
            Internal Structure that contains a geometrical shape element.
            \ingroup module_ocr
            </summary>
        </member>
        <member name="M:IDRSNET.IDRS_DOC_GEOMETRICAL_SHAPE.#ctor(IDRSNET.CIDRSDocGeometricalShape)">
            <summary>
            Structure constructor that converts class CIDRSDocGeometricalShape to
            structure IDRS_DOC_GEOMETRICAL_SHAPE by copying each fields
            </summary>
            <param name="_class">Class to be converted</param>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_GEOMETRICAL_SHAPE.rcCoordinates">
            <summary>
            The coordinates of the geometrical shape.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_GEOMETRICAL_SHAPE.dSkewAngle">
            <summary>
            The skew angle for the geometrical shape in degrees.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_GEOMETRICAL_SHAPE.uiHeight">
            <summary>
            The height of the geometrical shape.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_GEOMETRICAL_SHAPE.uiWidth">
            <summary>
            The width of the geometrical shape.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_GEOMETRICAL_SHAPE.ptCenter">
            <summary>
            The coordinates of the center of the geometrical shape.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_GEOMETRICAL_SHAPE.gstGeometricalShapeType">
            <summary>
            The geometrical shape type.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_GEOMETRICAL_SHAPE.clrShape">
            <summary>
            The color of the shape.
            </summary>
        </member>
        <member name="T:IDRSNET.CIDRSDocGeometricalShape">
            <summary>
            Public Class that contains a geometrical shape element.
            \ingroup module_ocr
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSDocGeometricalShape.#ctor">
            <summary>
            Default constructor of CIDRSDocGeometricalShape.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSDocGeometricalShape.Finalize">
            <summary>
            Destructor of CIDRSDocGeometricalShape.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSDocGeometricalShape.#ctor(IDRSNET.IDRS_DOC_GEOMETRICAL_SHAPE)">
            <summary>
            Class constructor that converts structure IDRS_DOC_GEOMETRICAL_SHAPE to
            class CIDRSDocGeometricalShape by copying each fields
            </summary>
            <param name="_struct">set fields based on the values of the structure</param>
        </member>
        <member name="M:IDRSNET.CIDRSDocGeometricalShape.Update(IDRSNET.IDRS_DOC_GEOMETRICAL_SHAPE)">
            <summary>
            Update the fields of the the class based on the input structure
            </summary>
            <param name="_struct">update fields based on the values of the structure</param>
        </member>
        <member name="M:IDRSNET.CIDRSDocGeometricalShape.ToStruct">
            <summary>
            Converts the class fields to a structure
            </summary>
            <returns>IDRS_DOC_GEOMETRICAL_SHAPE</returns>
        </member>
        <member name="P:IDRSNET.CIDRSDocGeometricalShape.Coordinates">
            <summary>
            The coordinates of the geometrical shape.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocGeometricalShape.SkewAngle">
            <summary>
            The skew angle for the geometrical shape in degrees.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocGeometricalShape.Height">
            <summary>
            The height of the geometrical shape.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocGeometricalShape.Width">
            <summary>
            The width of the geometrical shape.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocGeometricalShape.Center">
            <summary>
            The coordinates of the center of the geometrical shape.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocGeometricalShape.GeometricalShapeType">
            <summary>
            The geometrical shape type.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocGeometricalShape.Shape">
            <summary>
            The color of the shape.
            </summary>
        </member>
        <member name="T:IDRSNET.IDRS_DOC_LINE">
            <summary>
            Internal Structure that contains a line element.
            \ingroup module_ocr
            </summary>
        </member>
        <member name="M:IDRSNET.IDRS_DOC_LINE.#ctor(IDRSNET.CIDRSDocLine)">
            <summary>
            Structure constructor that converts class CIDRSDocLine to
            structure IDRS_DOC_LINE by copying each fields
            </summary>
            <param name="_class">Class to be converted</param>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_LINE.xWords">
            <summary>
            ! The words of the line.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_LINE.uiWordCount">
            <summary>
            ! The number of words in the line.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_LINE.rcCoordinates">
            <summary>
            ! The coordinates of the line in the image (pixels).
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_LINE.uiBaseline">
            <summary>
            ! The baseline of the line in the image (pixels).
            </summary>
        </member>
        <member name="T:IDRSNET.CIDRSDocLine">
            <summary>
            Public Class that contains a line element.
            \ingroup module_ocr
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSDocLine.#ctor">
            <summary>
            Default constructor of CIDRSDocLine.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSDocLine.Finalize">
            <summary>
            Destructor of CIDRSDocLine.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSDocLine.#ctor(IDRSNET.IDRS_DOC_LINE)">
            <summary>
            Class constructor that converts structure IDRS_DOC_LINE to
            class CIDRSDocLine by copying each fields
            </summary>
            <param name="_struct">set fields based on the values of the structure</param>
        </member>
        <member name="M:IDRSNET.CIDRSDocLine.Update(IDRSNET.IDRS_DOC_LINE)">
            <summary>
            Update the fields of the the class based on the input structure
            </summary>
            <param name="_struct">update fields based on the values of the structure</param>
        </member>
        <member name="M:IDRSNET.CIDRSDocLine.ToStruct">
            <summary>
            Converts the class fields to a structure
            </summary>
            <returns>IDRS_DOC_LINE</returns>
        </member>
        <member name="P:IDRSNET.CIDRSDocLine.Words">
            <summary>
            ! The words of the line.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocLine.WordCount">
            <summary>
            ! The number of words in the line.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocLine.Coordinates">
            <summary>
            ! The coordinates of the line in the image (pixels).
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocLine.Baseline">
            <summary>
            ! The baseline of the line in the image (pixels).
            </summary>
        </member>
        <member name="T:IDRSNET.IDRS_DOC_PAGE">
            <summary>
            The IDRS_DOC_PAGE structure contains the properties of a page.
            \ingroup module_ocr
            </summary>
        </member>
        <member name="M:IDRSNET.IDRS_DOC_PAGE.#ctor(IDRSNET.CIDRSDocPage)">
            <summary>
            Structure constructor that converts class CIDRSDocPage to
            structure IDRS_DOC_PAGE by copying each fields
            </summary>
            <param name="_class">Class to be converted</param>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_PAGE.uiPageHeight">
            <summary>
            ! Page height (pixels)
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_PAGE.uiPageWidth">
            <summary>
            ! Page width (pixels)
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_PAGE.uiMarginTop">
            <summary>
            ! Page margin top
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_PAGE.uiMarginBottom">
            <summary>
            ! Page margin bottom
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_PAGE.uiMarginLeft">
            <summary>
            ! Page margin left
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_PAGE.uiMarginRight">
            <summary>
            ! Page margin right
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_PAGE.uiResolution">
            <summary>
            ! Page resolution (dpi)
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_PAGE.lMainLanguage">
            <summary>
            ! Page main language
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_PAGE.uiZoneCount">
            <summary>
            ! The number of zones in the page
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_PAGE.xZones">
            <summary>
            ! Pointer to the zones of the page (reading order)
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_PAGE.pFormat">
            <summary>
            ! Pointer to the formatting information
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_PAGE.xDetectedLanguages">
            <summary>
            Array containing the results of automatic language detection
            Up to IDRS_LNG_DETECTION_LIMIT can be detected.
            </summary>
        </member>
        <member name="T:IDRSNET.CIDRSDocPage">
            <summary>
            The IDRS_DOC_PAGE structure contains the properties of a page.
            \ingroup module_ocr
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSDocPage.#ctor">
            <summary>
            Default constructor of CIDRSDocPage.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSDocPage.Finalize">
            <summary>
            Destructor of CIDRSDocPage.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSDocPage.#ctor(IDRSNET.IDRS_DOC_PAGE)">
            <summary>
            Class constructor that converts structure IDRS_DOC_PAGE to
            class CIDRSDocPage by copying each fields
            </summary>
            <param name="_struct">set fields based on the values of the structure</param>
        </member>
        <member name="M:IDRSNET.CIDRSDocPage.Update(IDRSNET.IDRS_DOC_PAGE)">
            <summary>
            Update the fields of the the class based on the input structure
            </summary>
            <param name="_struct">update fields based on the values of the structure</param>
        </member>
        <member name="M:IDRSNET.CIDRSDocPage.ToStruct">
            <summary>
            Converts the class fields to a structure
            </summary>
            <returns>IDRS_DOC_PAGE</returns>
        </member>
        <member name="P:IDRSNET.CIDRSDocPage.PageHeight">
            <summary>
            ! Page height (pixels)
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocPage.PageWidth">
            <summary>
            ! Page width (pixels)
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocPage.MarginTop">
            <summary>
            ! Page margin top
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocPage.MarginBottom">
            <summary>
            ! Page margin bottom
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocPage.MarginLeft">
            <summary>
            ! Page margin left
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocPage.MarginRight">
            <summary>
            ! Page margin right
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocPage.Resolution">
            <summary>
            ! Page resolution (dpi)
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocPage.MainLanguage">
            <summary>
            ! Page main language
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocPage.ZoneCount">
            <summary>
            ! The number of zones in the page
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocPage.Zones">
            <summary>
            ! Pointer to the zones of the page (reading order)
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocPage.Format">
            <summary>
            ! Pointer to the formatting information
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocPage.DetectedLanguages">
            <summary>
            Array containing the results of automatic language detection
            Up to IDRS_LNG_DETECTION_LIMIT can be detected.
            </summary>
        </member>
        <member name="T:IDRSNET.IDRS_DOC_PAGE_FORMAT">
            <summary>
            IDRS_DOC_PAGE_FORMAT contains the page formatting properties
            \ingroup module_ocr
            </summary>
        </member>
        <member name="M:IDRSNET.IDRS_DOC_PAGE_FORMAT.#ctor(IDRSNET.CIDRSDocPageFormat)">
            <summary>
            Structure constructor that converts class CIDRSDocPageFormat to
            structure IDRS_DOC_PAGE_FORMAT by copying each fields
            </summary>
            <param name="_class">Class to be converted</param>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_PAGE_FORMAT.xFonts">
            <summary>
            ! The font table.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_PAGE_FORMAT.uiFontCount">
            <summary>
            ! The number of fonts in the table.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_PAGE_FORMAT.xSections">
            <summary>
            ! The sections
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_PAGE_FORMAT.uiSectionCount">
            <summary>
            ! The number of sections
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_PAGE_FORMAT.xGeometricalShapes">
            <summary>
            ! The geometrical shapes
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_PAGE_FORMAT.uiGeometricalShapeCount">
            <summary>
            ! The number of geometrical shapes
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_PAGE_FORMAT.uiCellStyleCount">
            <summary>
            ! The number of cell styles in the document
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_PAGE_FORMAT.xCellStyles">
            <summary>
            ! The cell styles
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_PAGE_FORMAT.uiParagraphStyleCount">
            <summary>
            ! The number of paragraph styles
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_PAGE_FORMAT.xParagraphStyles">
            <summary>
            ! The paragraph styles
            </summary>
        </member>
        <member name="T:IDRSNET.CIDRSDocPageFormat">
            <summary>
            IDRS_DOC_PAGE_FORMAT contains the page formatting properties
            \ingroup module_ocr
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSDocPageFormat.#ctor">
            <summary>
            Default constructor of CIDRSDocPageFormat.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSDocPageFormat.Finalize">
            <summary>
            Destructor of CIDRSDocPageFormat.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSDocPageFormat.#ctor(IDRSNET.IDRS_DOC_PAGE_FORMAT)">
            <summary>
            Class constructor that converts structure IDRS_DOC_PAGE_FORMAT to
            class CIDRSDocPageFormat by copying each fields
            </summary>
            <param name="_struct">set fields based on the values of the structure</param>
        </member>
        <member name="M:IDRSNET.CIDRSDocPageFormat.Update(IDRSNET.IDRS_DOC_PAGE_FORMAT)">
            <summary>
            Update the fields of the the class based on the input structure
            </summary>
            <param name="_struct">update fields based on the values of the structure</param>
        </member>
        <member name="M:IDRSNET.CIDRSDocPageFormat.ToStruct">
            <summary>
            Converts the class fields to a structure
            </summary>
            <returns>IDRS_DOC_PAGE_FORMAT</returns>
        </member>
        <member name="P:IDRSNET.CIDRSDocPageFormat.Fonts">
            <summary>
            ! The font table.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocPageFormat.FontCount">
            <summary>
            ! The number of fonts in the table.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocPageFormat.Sections">
            <summary>
            ! The sections
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocPageFormat.SectionCount">
            <summary>
            ! The number of sections
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocPageFormat.GeometricalShapes">
            <summary>
            ! The geometrical shapes
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocPageFormat.GeometricalShapeCount">
            <summary>
            ! The number of geometrical shapes
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocPageFormat.CellStyleCount">
            <summary>
            ! The number of cell styles in the document
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocPageFormat.CellStyles">
            <summary>
            ! The cell styles
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocPageFormat.ParagraphStyleCount">
            <summary>
            ! The number of paragraph styles
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocPageFormat.ParagraphStyles">
            <summary>
            ! The paragraph styles
            </summary>
        </member>
        <member name="T:IDRSNET.IDRS_DOC_PARAGRAPH">
            <summary>
            Internal Structure that contains a paragraph element.
            \ingroup module_ocr
            </summary>
        </member>
        <member name="M:IDRSNET.IDRS_DOC_PARAGRAPH.#ctor(IDRSNET.CIDRSDocParagraph)">
            <summary>
            Structure constructor that converts class CIDRSDocParagraph to
            structure IDRS_DOC_PARAGRAPH by copying each fields
            </summary>
            <param name="_class">Class to be converted</param>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_PARAGRAPH.xLines">
            <summary>
            ! The lines of the paragraph.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_PARAGRAPH.uiLineCount">
            <summary>
            ! The number of lines in the paragraph.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_PARAGRAPH.rcCoordinates">
            <summary>
            ! The coordinates of the paragraph in the image (pixels).
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_PARAGRAPH.pParagraphStyle">
            <summary>
            ! The paragraph style.
            </summary>
        </member>
        <member name="T:IDRSNET.CIDRSDocParagraph">
            <summary>
            Public Class that contains a paragraph element.
            \ingroup module_ocr
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSDocParagraph.#ctor">
            <summary>
            Default constructor of CIDRSDocParagraph.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSDocParagraph.Finalize">
            <summary>
            Destructor of CIDRSDocParagraph.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSDocParagraph.#ctor(IDRSNET.IDRS_DOC_PARAGRAPH)">
            <summary>
            Class constructor that converts structure IDRS_DOC_PARAGRAPH to
            class CIDRSDocParagraph by copying each fields
            </summary>
            <param name="_struct">set fields based on the values of the structure</param>
        </member>
        <member name="M:IDRSNET.CIDRSDocParagraph.Update(IDRSNET.IDRS_DOC_PARAGRAPH)">
            <summary>
            Update the fields of the the class based on the input structure
            </summary>
            <param name="_struct">update fields based on the values of the structure</param>
        </member>
        <member name="M:IDRSNET.CIDRSDocParagraph.ToStruct">
            <summary>
            Converts the class fields to a structure
            </summary>
            <returns>IDRS_DOC_PARAGRAPH</returns>
        </member>
        <member name="P:IDRSNET.CIDRSDocParagraph.Lines">
            <summary>
            ! The lines of the paragraph.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocParagraph.LineCount">
            <summary>
            ! The number of lines in the paragraph.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocParagraph.Coordinates">
            <summary>
            ! The coordinates of the paragraph in the image (pixels).
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocParagraph.ParagraphStyle">
            <summary>
            ! The paragraph style.
            </summary>
        </member>
        <member name="T:IDRSNET.IDRS_DOC_PARAGRAPH_STYLE">
            <summary>
            Internal Structure that contains a paragraph style.
            \ingroup module_ocr
            </summary>
        </member>
        <member name="M:IDRSNET.IDRS_DOC_PARAGRAPH_STYLE.#ctor(IDRSNET.CIDRSDocParagraphStyle)">
            <summary>
            Structure constructor that converts class CIDRSDocParagraphStyle to
            structure IDRS_DOC_PARAGRAPH_STYLE by copying each fields
            </summary>
            <param name="_class">Class to be converted</param>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_PARAGRAPH_STYLE.atAlign">
            <summary>
            ! The alignment type (center, right, left)
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_PARAGRAPH_STYLE.iTopMargin">
            <summary>
            ! Top margin.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_PARAGRAPH_STYLE.iLeftMargin">
            <summary>
            ! Left margin.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_PARAGRAPH_STYLE.iRightMargin">
            <summary>
            ! Right margin.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_PARAGRAPH_STYLE.iBottomMargin">
            <summary>
            ! Bottom margin.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_PARAGRAPH_STYLE.uiLineHeight">
            <summary>
            ! The line height.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_PARAGRAPH_STYLE.pFont">
            <summary>
            ! The font.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_PARAGRAPH_STYLE.pFontDropCap">
            <summary>
            ! The dropcap font.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_PARAGRAPH_STYLE.clrForeground">
            <summary>
            ! The foreground color.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_PARAGRAPH_STYLE.clrBackground">
            <summary>
            ! The background color.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_PARAGRAPH_STYLE.iFirstLineIndent">
            <summary>
            ! The indentation of the first line.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_PARAGRAPH_STYLE.xParagraphTabulations">
            <summary>
            ! The paragraph tabulations
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_PARAGRAPH_STYLE.uiParagraphTabulationCount">
            <summary>
            ! The number of paragraph tabulations
            </summary>
        </member>
        <member name="T:IDRSNET.CIDRSDocParagraphStyle">
            <summary>
            Public Class that contains a paragraph style.
            \ingroup module_ocr
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSDocParagraphStyle.#ctor">
            <summary>
            Default constructor of CIDRSDocParagraphStyle.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSDocParagraphStyle.Finalize">
            <summary>
            Destructor of CIDRSDocParagraphStyle.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSDocParagraphStyle.#ctor(IDRSNET.IDRS_DOC_PARAGRAPH_STYLE)">
            <summary>
            Class constructor that converts structure IDRS_DOC_PARAGRAPH_STYLE to
            class CIDRSDocParagraphStyle by copying each fields
            </summary>
            <param name="_struct">set fields based on the values of the structure</param>
        </member>
        <member name="M:IDRSNET.CIDRSDocParagraphStyle.Update(IDRSNET.IDRS_DOC_PARAGRAPH_STYLE)">
            <summary>
            Update the fields of the the class based on the input structure
            </summary>
            <param name="_struct">update fields based on the values of the structure</param>
        </member>
        <member name="M:IDRSNET.CIDRSDocParagraphStyle.ToStruct">
            <summary>
            Converts the class fields to a structure
            </summary>
            <returns>IDRS_DOC_PARAGRAPH_STYLE</returns>
        </member>
        <member name="P:IDRSNET.CIDRSDocParagraphStyle.Align">
            <summary>
            ! The alignment type (center, right, left)
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocParagraphStyle.TopMargin">
            <summary>
            ! Top margin.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocParagraphStyle.LeftMargin">
            <summary>
            ! Left margin.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocParagraphStyle.RightMargin">
            <summary>
            ! Right margin.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocParagraphStyle.BottomMargin">
            <summary>
            ! Bottom margin.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocParagraphStyle.LineHeight">
            <summary>
            ! The line height.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocParagraphStyle.Font">
            <summary>
            ! The font.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocParagraphStyle.FontDropCap">
            <summary>
            ! The dropcap font.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocParagraphStyle.Foreground">
            <summary>
            ! The foreground color.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocParagraphStyle.Background">
            <summary>
            ! The background color.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocParagraphStyle.FirstLineIndent">
            <summary>
            ! The indentation of the first line.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocParagraphStyle.ParagraphTabulations">
            <summary>
            ! The paragraph tabulations
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocParagraphStyle.ParagraphTabulationCount">
            <summary>
            ! The number of paragraph tabulations
            </summary>
        </member>
        <member name="T:IDRSNET.IDRS_DOC_PARAGRAPH_TABULATION">
            <summary>
            Internal Structure that contains a tabulation element
            \ingroup module_ocr
            </summary>
        </member>
        <member name="M:IDRSNET.IDRS_DOC_PARAGRAPH_TABULATION.#ctor(IDRSNET.CIDRSDocParagraphTabulation)">
            <summary>
            Structure constructor that converts class CIDRSDocParagraphTabulation to
            structure IDRS_DOC_PARAGRAPH_TABULATION by copying each fields
            </summary>
            <param name="_class">Class to be converted</param>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_PARAGRAPH_TABULATION.uiStopValue">
            <summary>
            ! The stop value in pixels.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_PARAGRAPH_TABULATION.uiReserved">
            <summary>
            !  For internal use only
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_PARAGRAPH_TABULATION.atAlign">
            <summary>
            ! The alignment type.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_PARAGRAPH_TABULATION.tlTabLeader">
            <summary>
            ! The tabulation leader.
            </summary>
        </member>
        <member name="T:IDRSNET.CIDRSDocParagraphTabulation">
            <summary>
            Public Class that contains a tabulation element
            \ingroup module_ocr
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSDocParagraphTabulation.#ctor">
            <summary>
            Default constructor of CIDRSDocParagraphTabulation.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSDocParagraphTabulation.Finalize">
            <summary>
            Destructor of CIDRSDocParagraphTabulation.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSDocParagraphTabulation.#ctor(IDRSNET.IDRS_DOC_PARAGRAPH_TABULATION)">
            <summary>
            Class constructor that converts structure IDRS_DOC_PARAGRAPH_TABULATION to
            class CIDRSDocParagraphTabulation by copying each fields
            </summary>
            <param name="_struct">set fields based on the values of the structure</param>
        </member>
        <member name="M:IDRSNET.CIDRSDocParagraphTabulation.Update(IDRSNET.IDRS_DOC_PARAGRAPH_TABULATION)">
            <summary>
            Update the fields of the the class based on the input structure
            </summary>
            <param name="_struct">update fields based on the values of the structure</param>
        </member>
        <member name="M:IDRSNET.CIDRSDocParagraphTabulation.ToStruct">
            <summary>
            Converts the class fields to a structure
            </summary>
            <returns>IDRS_DOC_PARAGRAPH_TABULATION</returns>
        </member>
        <member name="P:IDRSNET.CIDRSDocParagraphTabulation.StopValue">
            <summary>
            ! The stop value in pixels.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocParagraphTabulation.Reserved">
            <summary>
            !  For internal use only
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocParagraphTabulation.Align">
            <summary>
            ! The alignment type.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocParagraphTabulation.TabLeader">
            <summary>
            ! The tabulation leader.
            </summary>
        </member>
        <member name="T:IDRSNET.IDRS_DOC_SECTION">
            <summary>
            The IDRS_DOC_SECTION structure contains the properties of a section.
            \ingroup module_ocr
            </summary>
        </member>
        <member name="M:IDRSNET.IDRS_DOC_SECTION.#ctor(IDRSNET.CIDRSDocSection)">
            <summary>
            Structure constructor that converts class CIDRSDocSection to
            structure IDRS_DOC_SECTION by copying each fields
            </summary>
            <param name="_class">Class to be converted</param>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_SECTION.rcCoordinates">
            <summary>
            ! The coordinates of the section
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_SECTION.uiColumnCount">
            <summary>
            ! The number of columns in the section
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_SECTION.xColumns">
            <summary>
            ! The columns of the section
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_SECTION.xZones">
            <summary>
            ! The zones of the section
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_SECTION.uiZoneCount">
            <summary>
            ! The number of zone in the section
            </summary>
        </member>
        <member name="T:IDRSNET.CIDRSDocSection">
            <summary>
            The IDRS_DOC_SECTION structure contains the properties of a section.
            \ingroup module_ocr
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSDocSection.#ctor">
            <summary>
            Default constructor of CIDRSDocSection.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSDocSection.Finalize">
            <summary>
            Destructor of CIDRSDocSection.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSDocSection.#ctor(IDRSNET.IDRS_DOC_SECTION)">
            <summary>
            Class constructor that converts structure IDRS_DOC_SECTION to
            class CIDRSDocSection by copying each fields
            </summary>
            <param name="_struct">set fields based on the values of the structure</param>
        </member>
        <member name="M:IDRSNET.CIDRSDocSection.Update(IDRSNET.IDRS_DOC_SECTION)">
            <summary>
            Update the fields of the the class based on the input structure
            </summary>
            <param name="_struct">update fields based on the values of the structure</param>
        </member>
        <member name="M:IDRSNET.CIDRSDocSection.ToStruct">
            <summary>
            Converts the class fields to a structure
            </summary>
            <returns>IDRS_DOC_SECTION</returns>
        </member>
        <member name="P:IDRSNET.CIDRSDocSection.Coordinates">
            <summary>
            ! The coordinates of the section
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocSection.ColumnCount">
            <summary>
            ! The number of columns in the section
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocSection.Columns">
            <summary>
            ! The columns of the section
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocSection.Zones">
            <summary>
            ! The zones of the section
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocSection.ZoneCount">
            <summary>
            ! The number of zone in the section
            </summary>
        </member>
        <member name="T:IDRSNET.IDRS_DOC_TEXT_ELEMENT">
            <summary>
            Internal Structure that contains a text element.
            \ingroup module_ocr
            </summary>
        </member>
        <member name="M:IDRSNET.IDRS_DOC_TEXT_ELEMENT.#ctor(IDRSNET.CIDRSDocTextElement)">
            <summary>
            Structure constructor that converts class CIDRSDocTextElement to
            structure IDRS_DOC_TEXT_ELEMENT by copying each fields
            </summary>
            <param name="_class">Class to be converted</param>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_TEXT_ELEMENT.wstrText">
            <summary>
            ! The text solution of ocr engine
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_TEXT_ELEMENT.ucConfidenceLevel">
            <summary>
            The confidence level for the solution; by default computed by the OCR engine, otherwise computed by the integrator if a
            CAdvancedDecision object has been provided to the CPageRecognition class via CPageRecognition::SetAdvancedDecision().
            The confidence level ranges from 0 (best confidence) to 255 (worst confidence).
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_TEXT_ELEMENT.structAdvancedConfidence">
            <summary>
            ! The confidence level details
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_TEXT_ELEMENT.uiAlternativeSolutionCount">
            <summary>
            ! The number of alternative solutions.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_TEXT_ELEMENT.xAlternatives">
            <summary>
            ! The alternative solutions
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_TEXT_ELEMENT.rcCoordinates">
            <summary>
            ! The coordinates of the blob in the image (pixels).
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_TEXT_ELEMENT.lLanguage">
            <summary>
            ! The language.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_TEXT_ELEMENT.pFormat">
            <summary>
            ! Formatting information for the text element
            </summary>
        </member>
        <member name="T:IDRSNET.CIDRSDocTextElement">
            <summary>
            Public Class that contains a text element.
            \ingroup module_ocr
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSDocTextElement.#ctor">
            <summary>
            Default constructor of CIDRSDocTextElement.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSDocTextElement.Finalize">
            <summary>
            Destructor of CIDRSDocTextElement.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSDocTextElement.#ctor(IDRSNET.IDRS_DOC_TEXT_ELEMENT)">
            <summary>
            Class constructor that converts structure IDRS_DOC_TEXT_ELEMENT to
            class CIDRSDocTextElement by copying each fields
            </summary>
            <param name="_struct">set fields based on the values of the structure</param>
        </member>
        <member name="M:IDRSNET.CIDRSDocTextElement.Update(IDRSNET.IDRS_DOC_TEXT_ELEMENT)">
            <summary>
            Update the fields of the the class based on the input structure
            </summary>
            <param name="_struct">update fields based on the values of the structure</param>
        </member>
        <member name="M:IDRSNET.CIDRSDocTextElement.ToStruct">
            <summary>
            Converts the class fields to a structure
            </summary>
            <returns>IDRS_DOC_TEXT_ELEMENT</returns>
        </member>
        <member name="P:IDRSNET.CIDRSDocTextElement.Text">
            <summary>
            ! The text solution of ocr engine
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocTextElement.ConfidenceLevel">
            <summary>
            The confidence level for the solution; by default computed by the OCR engine, otherwise computed by the integrator if a
            CAdvancedDecision object has been provided to the CPageRecognition class via CPageRecognition::SetAdvancedDecision().
            The confidence level ranges from 0 (best confidence) to 255 (worst confidence).
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocTextElement.AdvancedConfidence">
            <summary>
            ! The confidence level details
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocTextElement.AlternativeSolutionCount">
            <summary>
            ! The number of alternative solutions.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocTextElement.Alternatives">
            <summary>
            ! The alternative solutions
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocTextElement.Coordinates">
            <summary>
            ! The coordinates of the blob in the image (pixels).
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocTextElement.Language">
            <summary>
            ! The language.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocTextElement.Format">
            <summary>
            ! Formatting information for the text element
            </summary>
        </member>
        <member name="T:IDRSNET.IDRS_DOC_TEXT_ELEMENT_ALTERNATIVE">
            <summary>
            Internal Structure that contains an alternative solution
            \ingroup module_ocr
            </summary>
        </member>
        <member name="M:IDRSNET.IDRS_DOC_TEXT_ELEMENT_ALTERNATIVE.#ctor(IDRSNET.CIDRSDocTextElementAlternative)">
            <summary>
            Structure constructor that converts class CIDRSDocTextElementAlternative to
            structure IDRS_DOC_TEXT_ELEMENT_ALTERNATIVE by copying each fields
            </summary>
            <param name="_class">Class to be converted</param>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_TEXT_ELEMENT_ALTERNATIVE.wstrText">
            <summary>
            ! The alternative solution text
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_TEXT_ELEMENT_ALTERNATIVE.ucConfidenceLevel">
            <summary>
            The confidence level for the solution; by default computed by the OCR engine, otherwise computed by the integrator if a
            CAdvancedDecision object has been provided to the CPageRecognition class via CPageRecognition::SetAdvancedDecision().
            The confidence level ranges from 0 (best confidence) to 255 (worst confidence).
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_TEXT_ELEMENT_ALTERNATIVE.structAdvancedConfidence">
            <summary>
            ! The confidence level details
            </summary>
        </member>
        <member name="T:IDRSNET.CIDRSDocTextElementAlternative">
            <summary>
            Public Class that contains an alternative solution
            \ingroup module_ocr
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSDocTextElementAlternative.#ctor">
            <summary>
            Default constructor of CIDRSDocTextElementAlternative.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSDocTextElementAlternative.Finalize">
            <summary>
            Destructor of CIDRSDocTextElementAlternative.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSDocTextElementAlternative.#ctor(IDRSNET.IDRS_DOC_TEXT_ELEMENT_ALTERNATIVE)">
            <summary>
            Class constructor that converts structure IDRS_DOC_TEXT_ELEMENT_ALTERNATIVE to
            class CIDRSDocTextElementAlternative by copying each fields
            </summary>
            <param name="_struct">set fields based on the values of the structure</param>
        </member>
        <member name="M:IDRSNET.CIDRSDocTextElementAlternative.Update(IDRSNET.IDRS_DOC_TEXT_ELEMENT_ALTERNATIVE)">
            <summary>
            Update the fields of the the class based on the input structure
            </summary>
            <param name="_struct">update fields based on the values of the structure</param>
        </member>
        <member name="M:IDRSNET.CIDRSDocTextElementAlternative.ToStruct">
            <summary>
            Converts the class fields to a structure
            </summary>
            <returns>IDRS_DOC_TEXT_ELEMENT_ALTERNATIVE</returns>
        </member>
        <member name="P:IDRSNET.CIDRSDocTextElementAlternative.Text">
            <summary>
            ! The alternative solution text
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocTextElementAlternative.ConfidenceLevel">
            <summary>
            The confidence level for the solution; by default computed by the OCR engine, otherwise computed by the integrator if a
            CAdvancedDecision object has been provided to the CPageRecognition class via CPageRecognition::SetAdvancedDecision().
            The confidence level ranges from 0 (best confidence) to 255 (worst confidence).
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocTextElementAlternative.AdvancedConfidence">
            <summary>
            ! The confidence level details
            </summary>
        </member>
        <member name="T:IDRSNET.IDRS_DOC_TEXT_ELEMENT_FORMAT">
            <summary>
            Text element formatting information
            \ingroup module_ocr
            </summary>
        </member>
        <member name="M:IDRSNET.IDRS_DOC_TEXT_ELEMENT_FORMAT.#ctor(IDRSNET.CIDRSDocTextElementFormat)">
            <summary>
            Structure constructor that converts class CIDRSDocTextElementFormat to
            structure IDRS_DOC_TEXT_ELEMENT_FORMAT by copying each fields
            </summary>
            <param name="_class">Class to be converted</param>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_TEXT_ELEMENT_FORMAT.bIsUnderlined">
            <summary>
            ! Underlined text?
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_TEXT_ELEMENT_FORMAT.bIsBold">
            <summary>
            ! Bold text?
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_TEXT_ELEMENT_FORMAT.bIsItalic">
            <summary>
            ! Italic text?
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_TEXT_ELEMENT_FORMAT.bIsFixedFont">
            <summary>
            ! Fixed font text?
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_TEXT_ELEMENT_FORMAT.bIsDropCapital">
            <summary>
            ! Drop capitals text?
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_TEXT_ELEMENT_FORMAT.bIsSupscript">
            <summary>
            ! Supscript text?
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_TEXT_ELEMENT_FORMAT.bIsSubscript">
            <summary>
            ! Subscript text?
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_TEXT_ELEMENT_FORMAT.bIsUnderlineStart">
            <summary>
            ! First one of being underlined?
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_TEXT_ELEMENT_FORMAT.bIsUnderlineEnd">
            <summary>
            ! Last one of being underlined?
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_TEXT_ELEMENT_FORMAT.tdTextDirection">
            <summary>
            ! The text direction.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_TEXT_ELEMENT_FORMAT.pFont">
            <summary>
            ! The font.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_TEXT_ELEMENT_FORMAT.clrForeground">
            <summary>
            ! The foreground color.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_TEXT_ELEMENT_FORMAT.clrBackground">
            <summary>
            ! The background color.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_TEXT_ELEMENT_FORMAT.uiBaseline">
            <summary>
            ! The baseline of the blob in the image (pixels).
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_TEXT_ELEMENT_FORMAT.xrcBlobCleanupRectangles">
            <summary>
            ! The blob cleanup rectangles
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_TEXT_ELEMENT_FORMAT.uiBlobCleanupRectangleCount">
            <summary>
            ! The number of blob cleanup rectangles
            </summary>
        </member>
        <member name="T:IDRSNET.CIDRSDocTextElementFormat">
            <summary>
            Text element formatting information
            \ingroup module_ocr
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSDocTextElementFormat.#ctor">
            <summary>
            Default constructor of CIDRSDocTextElementFormat.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSDocTextElementFormat.Finalize">
            <summary>
            Destructor of CIDRSDocTextElementFormat.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSDocTextElementFormat.#ctor(IDRSNET.IDRS_DOC_TEXT_ELEMENT_FORMAT)">
            <summary>
            Class constructor that converts structure IDRS_DOC_TEXT_ELEMENT_FORMAT to
            class CIDRSDocTextElementFormat by copying each fields
            </summary>
            <param name="_struct">set fields based on the values of the structure</param>
        </member>
        <member name="M:IDRSNET.CIDRSDocTextElementFormat.Update(IDRSNET.IDRS_DOC_TEXT_ELEMENT_FORMAT)">
            <summary>
            Update the fields of the the class based on the input structure
            </summary>
            <param name="_struct">update fields based on the values of the structure</param>
        </member>
        <member name="M:IDRSNET.CIDRSDocTextElementFormat.ToStruct">
            <summary>
            Converts the class fields to a structure
            </summary>
            <returns>IDRS_DOC_TEXT_ELEMENT_FORMAT</returns>
        </member>
        <member name="P:IDRSNET.CIDRSDocTextElementFormat.IsUnderlined">
            <summary>
            ! Underlined text?
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocTextElementFormat.IsBold">
            <summary>
            ! Bold text?
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocTextElementFormat.IsItalic">
            <summary>
            ! Italic text?
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocTextElementFormat.IsFixedFont">
            <summary>
            ! Fixed font text?
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocTextElementFormat.IsDropCapital">
            <summary>
            ! Drop capitals text?
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocTextElementFormat.IsSupscript">
            <summary>
            ! Supscript text?
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocTextElementFormat.IsSubscript">
            <summary>
            ! Subscript text?
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocTextElementFormat.IsUnderlineStart">
            <summary>
            ! First one of being underlined?
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocTextElementFormat.IsUnderlineEnd">
            <summary>
            ! Last one of being underlined?
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocTextElementFormat.TextDirection">
            <summary>
            ! The text direction.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocTextElementFormat.Font">
            <summary>
            ! The font.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocTextElementFormat.Foreground">
            <summary>
            ! The foreground color.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocTextElementFormat.Background">
            <summary>
            ! The background color.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocTextElementFormat.Baseline">
            <summary>
            ! The baseline of the blob in the image (pixels).
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocTextElementFormat.BlobCleanupRectangles">
            <summary>
            ! The blob cleanup rectangles
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocTextElementFormat.BlobCleanupRectangleCount">
            <summary>
            ! The number of blob cleanup rectangles
            </summary>
        </member>
        <member name="T:IDRSNET.IDRS_DOC_WORD">
            <summary>
            Internal Structure that contains a word element.
            \ingroup module_ocr
            </summary>
        </member>
        <member name="M:IDRSNET.IDRS_DOC_WORD.#ctor(IDRSNET.CIDRSDocWord)">
            <summary>
            Structure constructor that converts class CIDRSDocWord to
            structure IDRS_DOC_WORD by copying each fields
            </summary>
            <param name="_class">Class to be converted</param>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_WORD.uiTextElementCount">
            <summary>
            ! The number of blobs in the word.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_WORD.xTextElements">
            <summary>
            ! The blobs of the word.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_WORD.rcCoordinates">
            <summary>
            ! The coordinates of the word in the image (pixels).
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_WORD.bFoundInDictionary">
            <summary>
            ! dictionary presence
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_WORD.pFormat">
            <summary>
            ! Formatting information
            </summary>
        </member>
        <member name="T:IDRSNET.CIDRSDocWord">
            <summary>
            Public Class that contains a word element.
            \ingroup module_ocr
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSDocWord.#ctor">
            <summary>
            Default constructor of CIDRSDocWord.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSDocWord.Finalize">
            <summary>
            Destructor of CIDRSDocWord.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSDocWord.#ctor(IDRSNET.IDRS_DOC_WORD)">
            <summary>
            Class constructor that converts structure IDRS_DOC_WORD to
            class CIDRSDocWord by copying each fields
            </summary>
            <param name="_struct">set fields based on the values of the structure</param>
        </member>
        <member name="M:IDRSNET.CIDRSDocWord.Update(IDRSNET.IDRS_DOC_WORD)">
            <summary>
            Update the fields of the the class based on the input structure
            </summary>
            <param name="_struct">update fields based on the values of the structure</param>
        </member>
        <member name="M:IDRSNET.CIDRSDocWord.ToStruct">
            <summary>
            Converts the class fields to a structure
            </summary>
            <returns>IDRS_DOC_WORD</returns>
        </member>
        <member name="P:IDRSNET.CIDRSDocWord.TextElementCount">
            <summary>
            ! The number of blobs in the word.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocWord.TextElements">
            <summary>
            ! The blobs of the word.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocWord.Coordinates">
            <summary>
            ! The coordinates of the word in the image (pixels).
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocWord.FoundInDictionary">
            <summary>
            ! dictionary presence
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocWord.Format">
            <summary>
            ! Formatting information
            </summary>
        </member>
        <member name="T:IDRSNET.IDRS_DOC_WORD_FORMAT">
            <summary>
            Internal Structure that contains formatting information for a word elements
            \ingroup module_ocr
            </summary>
        </member>
        <member name="M:IDRSNET.IDRS_DOC_WORD_FORMAT.#ctor(IDRSNET.CIDRSDocWordFormat)">
            <summary>
            Structure constructor that converts class CIDRSDocWordFormat to
            structure IDRS_DOC_WORD_FORMAT by copying each fields
            </summary>
            <param name="_class">Class to be converted</param>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_WORD_FORMAT.uiParagraphTabulationCount">
            <summary>
            ! The number of paragraph tabulations
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_WORD_FORMAT.xParagraphTabulations">
            <summary>
            ! The paragraph tabulations
            </summary>
        </member>
        <member name="T:IDRSNET.CIDRSDocWordFormat">
            <summary>
            Public Class that contains formatting information for a word elements
            \ingroup module_ocr
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSDocWordFormat.#ctor">
            <summary>
            Default constructor of CIDRSDocWordFormat.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSDocWordFormat.Finalize">
            <summary>
            Destructor of CIDRSDocWordFormat.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSDocWordFormat.#ctor(IDRSNET.IDRS_DOC_WORD_FORMAT)">
            <summary>
            Class constructor that converts structure IDRS_DOC_WORD_FORMAT to
            class CIDRSDocWordFormat by copying each fields
            </summary>
            <param name="_struct">set fields based on the values of the structure</param>
        </member>
        <member name="M:IDRSNET.CIDRSDocWordFormat.Update(IDRSNET.IDRS_DOC_WORD_FORMAT)">
            <summary>
            Update the fields of the the class based on the input structure
            </summary>
            <param name="_struct">update fields based on the values of the structure</param>
        </member>
        <member name="M:IDRSNET.CIDRSDocWordFormat.ToStruct">
            <summary>
            Converts the class fields to a structure
            </summary>
            <returns>IDRS_DOC_WORD_FORMAT</returns>
        </member>
        <member name="P:IDRSNET.CIDRSDocWordFormat.ParagraphTabulationCount">
            <summary>
            ! The number of paragraph tabulations
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocWordFormat.ParagraphTabulations">
            <summary>
            ! The paragraph tabulations
            </summary>
        </member>
        <member name="T:IDRSNET.IDRS_DOC_ZONE">
            <summary>
            The IDRS_DOC_ZONE structure contains the properties of a zone.
            \ingroup module_ocr
            - a text zone (ztZoneType == IDRS_ZONE_TEXT ) contains flowing paragraphs
            - a table zone (ztZoneType == IDRS_ZONE_TABLE ) contains cells.
            </summary>
        </member>
        <member name="M:IDRSNET.IDRS_DOC_ZONE.#ctor(IDRSNET.CIDRSDocZone)">
            <summary>
            Structure constructor that converts class CIDRSDocZone to
            structure IDRS_DOC_ZONE by copying each fields
            </summary>
            <param name="_class">Class to be converted</param>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_ZONE.ztZoneType">
            <summary>
            ! The zone type.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_ZONE.uiZoneStyle">
            <summary>
            ! The zone style.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_ZONE.rcCoordinates">
            <summary>
            ! The bounding box of the zone
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_ZONE.pBarcodeZone">
            <summary>
            ! The barcode zone.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_ZONE.pTableZone">
            <summary>
            ! The table zone.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_ZONE.pTextZone">
            <summary>
            ! The text zone.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_ZONE.uiPointCount">
            <summary>
            ! The number of points
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_ZONE.xPoints">
            <summary>
            ! An array of points that defines the vertices of the zone (pixels).
            </summary>
        </member>
        <member name="T:IDRSNET.CIDRSDocZone">
            <summary>
            The IDRS_DOC_ZONE structure contains the properties of a zone.
            \ingroup module_ocr
            - a text zone (ztZoneType == IDRS_ZONE_TEXT ) contains flowing paragraphs
            - a table zone (ztZoneType == IDRS_ZONE_TABLE ) contains cells.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSDocZone.#ctor">
            <summary>
            Default constructor of CIDRSDocZone.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSDocZone.Finalize">
            <summary>
            Destructor of CIDRSDocZone.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSDocZone.#ctor(IDRSNET.IDRS_DOC_ZONE)">
            <summary>
            Class constructor that converts structure IDRS_DOC_ZONE to
            class CIDRSDocZone by copying each fields
            </summary>
            <param name="_struct">set fields based on the values of the structure</param>
        </member>
        <member name="M:IDRSNET.CIDRSDocZone.Update(IDRSNET.IDRS_DOC_ZONE)">
            <summary>
            Update the fields of the the class based on the input structure
            </summary>
            <param name="_struct">update fields based on the values of the structure</param>
        </member>
        <member name="M:IDRSNET.CIDRSDocZone.ToStruct">
            <summary>
            Converts the class fields to a structure
            </summary>
            <returns>IDRS_DOC_ZONE</returns>
        </member>
        <member name="P:IDRSNET.CIDRSDocZone.ZoneType">
            <summary>
            ! The zone type.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocZone.ZoneStyle">
            <summary>
            ! The zone style.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocZone.Coordinates">
            <summary>
            ! The bounding box of the zone
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocZone.BarcodeZone">
            <summary>
            ! The barcode zone.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocZone.TableZone">
            <summary>
            ! The table zone.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocZone.TextZone">
            <summary>
            ! The text zone.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocZone.PointCount">
            <summary>
            ! The number of points
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocZone.Points">
            <summary>
            ! An array of points that defines the vertices of the zone (pixels).
            </summary>
        </member>
        <member name="T:IDRSNET.IDRS_DOC_ZONE_BARCODE">
            <summary>
            Internal Structure that contains a barcode zone
            \ingroup module_barcode
            </summary>
        </member>
        <member name="M:IDRSNET.IDRS_DOC_ZONE_BARCODE.#ctor(IDRSNET.CIDRSDocZoneBarcode)">
            <summary>
            Structure constructor that converts class CIDRSDocZoneBarcode to
            structure IDRS_DOC_ZONE_BARCODE by copying each fields
            </summary>
            <param name="_class">Class to be converted</param>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_ZONE_BARCODE.uiBarcodeDataCount">
            <summary>
            ! Number of barcode data present in the barcode zone
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_ZONE_BARCODE.xBarcodeData">
            <summary>
            ! Barcode data vector
            </summary>
        </member>
        <member name="T:IDRSNET.CIDRSDocZoneBarcode">
            <summary>
            Public Class that contains a barcode zone
            \ingroup module_barcode
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSDocZoneBarcode.#ctor">
            <summary>
            Default constructor of CIDRSDocZoneBarcode.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSDocZoneBarcode.Finalize">
            <summary>
            Destructor of CIDRSDocZoneBarcode.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSDocZoneBarcode.#ctor(IDRSNET.IDRS_DOC_ZONE_BARCODE)">
            <summary>
            Class constructor that converts structure IDRS_DOC_ZONE_BARCODE to
            class CIDRSDocZoneBarcode by copying each fields
            </summary>
            <param name="_struct">set fields based on the values of the structure</param>
        </member>
        <member name="M:IDRSNET.CIDRSDocZoneBarcode.Update(IDRSNET.IDRS_DOC_ZONE_BARCODE)">
            <summary>
            Update the fields of the the class based on the input structure
            </summary>
            <param name="_struct">update fields based on the values of the structure</param>
        </member>
        <member name="M:IDRSNET.CIDRSDocZoneBarcode.ToStruct">
            <summary>
            Converts the class fields to a structure
            </summary>
            <returns>IDRS_DOC_ZONE_BARCODE</returns>
        </member>
        <member name="P:IDRSNET.CIDRSDocZoneBarcode.BarcodeDataCount">
            <summary>
            ! Number of barcode data present in the barcode zone
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocZoneBarcode.BarcodeData">
            <summary>
            ! Barcode data vector
            </summary>
        </member>
        <member name="T:IDRSNET.IDRS_DOC_ZONE_TABLE">
            <summary>
            Internal Structure that contains a zone with table format
            \ingroup module_ocr
            </summary>
        </member>
        <member name="M:IDRSNET.IDRS_DOC_ZONE_TABLE.#ctor(IDRSNET.CIDRSDocZoneTable)">
            <summary>
            Structure constructor that converts class CIDRSDocZoneTable to
            structure IDRS_DOC_ZONE_TABLE by copying each fields
            </summary>
            <param name="_class">Class to be converted</param>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_ZONE_TABLE.uiCellCount">
            <summary>
            ! The number of cells in the zone.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_ZONE_TABLE.xCells">
            <summary>
            ! The cells of the table.
            </summary>
        </member>
        <member name="T:IDRSNET.CIDRSDocZoneTable">
            <summary>
            Public Class that contains a zone with table format
            \ingroup module_ocr
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSDocZoneTable.#ctor">
            <summary>
            Default constructor of CIDRSDocZoneTable.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSDocZoneTable.Finalize">
            <summary>
            Destructor of CIDRSDocZoneTable.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSDocZoneTable.#ctor(IDRSNET.IDRS_DOC_ZONE_TABLE)">
            <summary>
            Class constructor that converts structure IDRS_DOC_ZONE_TABLE to
            class CIDRSDocZoneTable by copying each fields
            </summary>
            <param name="_struct">set fields based on the values of the structure</param>
        </member>
        <member name="M:IDRSNET.CIDRSDocZoneTable.Update(IDRSNET.IDRS_DOC_ZONE_TABLE)">
            <summary>
            Update the fields of the the class based on the input structure
            </summary>
            <param name="_struct">update fields based on the values of the structure</param>
        </member>
        <member name="M:IDRSNET.CIDRSDocZoneTable.ToStruct">
            <summary>
            Converts the class fields to a structure
            </summary>
            <returns>IDRS_DOC_ZONE_TABLE</returns>
        </member>
        <member name="P:IDRSNET.CIDRSDocZoneTable.CellCount">
            <summary>
            ! The number of cells in the zone.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocZoneTable.Cells">
            <summary>
            ! The cells of the table.
            </summary>
        </member>
        <member name="T:IDRSNET.IDRS_DOC_ZONE_TEXT">
            <summary>
            Internal Structure that contains a text zone element
            \ingroup module_ocr
            </summary>
        </member>
        <member name="M:IDRSNET.IDRS_DOC_ZONE_TEXT.#ctor(IDRSNET.CIDRSDocZoneText)">
            <summary>
            Structure constructor that converts class CIDRSDocZoneText to
            structure IDRS_DOC_ZONE_TEXT by copying each fields
            </summary>
            <param name="_class">Class to be converted</param>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_ZONE_TEXT.uiLineCount">
            <summary>
            ! The number of lines of text
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_ZONE_TEXT.xLines">
            <summary>
            ! The lines of text in this text zone
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_ZONE_TEXT.pFormat">
            <summary>
            ! The formatting data
            </summary>
        </member>
        <member name="T:IDRSNET.CIDRSDocZoneText">
            <summary>
            Public Class that contains a text zone element
            \ingroup module_ocr
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSDocZoneText.#ctor">
            <summary>
            Default constructor of CIDRSDocZoneText.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSDocZoneText.Finalize">
            <summary>
            Destructor of CIDRSDocZoneText.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSDocZoneText.#ctor(IDRSNET.IDRS_DOC_ZONE_TEXT)">
            <summary>
            Class constructor that converts structure IDRS_DOC_ZONE_TEXT to
            class CIDRSDocZoneText by copying each fields
            </summary>
            <param name="_struct">set fields based on the values of the structure</param>
        </member>
        <member name="M:IDRSNET.CIDRSDocZoneText.Update(IDRSNET.IDRS_DOC_ZONE_TEXT)">
            <summary>
            Update the fields of the the class based on the input structure
            </summary>
            <param name="_struct">update fields based on the values of the structure</param>
        </member>
        <member name="M:IDRSNET.CIDRSDocZoneText.ToStruct">
            <summary>
            Converts the class fields to a structure
            </summary>
            <returns>IDRS_DOC_ZONE_TEXT</returns>
        </member>
        <member name="P:IDRSNET.CIDRSDocZoneText.LineCount">
            <summary>
            ! The number of lines of text
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocZoneText.Lines">
            <summary>
            ! The lines of text in this text zone
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocZoneText.Format">
            <summary>
            ! The formatting data
            </summary>
        </member>
        <member name="T:IDRSNET.IDRS_DOC_ZONE_TEXT_FORMAT">
            <summary>
            Internal Structure containing the formatting information for a text element
            \ingroup module_ocr
            </summary>
        </member>
        <member name="M:IDRSNET.IDRS_DOC_ZONE_TEXT_FORMAT.#ctor(IDRSNET.CIDRSDocZoneTextFormat)">
            <summary>
            Structure constructor that converts class CIDRSDocZoneTextFormat to
            structure IDRS_DOC_ZONE_TEXT_FORMAT by copying each fields
            </summary>
            <param name="_class">Class to be converted</param>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_ZONE_TEXT_FORMAT.tdTextDirection">
            <summary>
            ! The text direction in the zone.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_ZONE_TEXT_FORMAT.xFlowingParagraphs">
            <summary>
            The flowing paragraphs of the zone.
            xFlowingParagraphs is NULL if the zone is not a text zone.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_DOC_ZONE_TEXT_FORMAT.uiFlowingParagraphCount">
            <summary>
            ! The number of flowing paragraphs in the zone.
            </summary>
        </member>
        <member name="T:IDRSNET.CIDRSDocZoneTextFormat">
            <summary>
            Public Class containing the formatting information for a text element
            \ingroup module_ocr
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSDocZoneTextFormat.#ctor">
            <summary>
            Default constructor of CIDRSDocZoneTextFormat.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSDocZoneTextFormat.Finalize">
            <summary>
            Destructor of CIDRSDocZoneTextFormat.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSDocZoneTextFormat.#ctor(IDRSNET.IDRS_DOC_ZONE_TEXT_FORMAT)">
            <summary>
            Class constructor that converts structure IDRS_DOC_ZONE_TEXT_FORMAT to
            class CIDRSDocZoneTextFormat by copying each fields
            </summary>
            <param name="_struct">set fields based on the values of the structure</param>
        </member>
        <member name="M:IDRSNET.CIDRSDocZoneTextFormat.Update(IDRSNET.IDRS_DOC_ZONE_TEXT_FORMAT)">
            <summary>
            Update the fields of the the class based on the input structure
            </summary>
            <param name="_struct">update fields based on the values of the structure</param>
        </member>
        <member name="M:IDRSNET.CIDRSDocZoneTextFormat.ToStruct">
            <summary>
            Converts the class fields to a structure
            </summary>
            <returns>IDRS_DOC_ZONE_TEXT_FORMAT</returns>
        </member>
        <member name="P:IDRSNET.CIDRSDocZoneTextFormat.TextDirection">
            <summary>
            ! The text direction in the zone.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocZoneTextFormat.FlowingParagraphs">
            <summary>
            The flowing paragraphs of the zone.
            xFlowingParagraphs is NULL if the zone is not a text zone.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSDocZoneTextFormat.FlowingParagraphCount">
            <summary>
            ! The number of flowing paragraphs in the zone.
            </summary>
        </member>
        <member name="T:IDRSNET.idrs_exception">
            <summary>
            To be replaced with actual description in the future.
            </summary>
        </member>
        <member name="F:IDRSNET.idrs_exception.fileName">
            <summary>
            To be replaced with actual description in the future.
            </summary>
        </member>
        <member name="F:IDRSNET.idrs_exception.fileLine">
            <summary>
            To be replaced with actual description in the future.
            </summary>
        </member>
        <member name="F:IDRSNET.idrs_exception.ErrorCode">
            <summary>
            To be replaced with actual description in the future.
            </summary>
        </member>
        <member name="T:IDRSNET.CIDRSException">
            <summary>
            To be replaced with actual description in the future.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSException.#ctor">
            <summary>
            To be replaced with actual description in the future.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSException.Finalize">
            <summary>
            To be replaced with actual description in the future.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSException.SourceFile">
            <summary>
            To be replaced with actual description in the future.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSException.SourceLine">
            <summary>
            To be replaced with actual description in the future.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSException.ErrorCode">
            <summary>
            To be replaced with actual description in the future.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSException.ToString">
            <summary>
            To be replaced with actual description in the future.
            </summary>
        </member>
        <member name="T:IDRSNET.IDRS_FONT">
            <summary>
            The IDRS_FONT structure defines a font.
            </summary>
        </member>
        <member name="M:IDRSNET.IDRS_FONT.#ctor(IDRSNET.CIDRSFont)">
            <summary>
            Structure constructor that converts class CIDRSFont to
            structure IDRS_FONT by copying each fields
            </summary>
            <param name="_class">Class to be converted</param>
        </member>
        <member name="F:IDRSNET.IDRS_FONT.uiTypefaceId">
            <summary>
            The typeface identifier for the font.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_FONT.uiSize">
            <summary>
            The point size x 10.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_FONT.uiStretch">
            <summary>
            The stretching factor.
            Percentage value (stretch &lt; 100 means narrower and > 100 wider).
            </summary>
        </member>
        <member name="T:IDRSNET.CIDRSFont">
            <summary>
            The IDRS_FONT structure defines a font.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSFont.#ctor">
            <summary>
            Default constructor of CIDRSFont.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSFont.Finalize">
            <summary>
            Destructor of CIDRSFont.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSFont.#ctor(IDRSNET.IDRS_FONT)">
            <summary>
            Class constructor that converts structure IDRS_FONT to
            class CIDRSFont by copying each fields
            </summary>
            <param name="_struct">set fields based on the values of the structure</param>
        </member>
        <member name="M:IDRSNET.CIDRSFont.Update(IDRSNET.IDRS_FONT)">
            <summary>
            Update the fields of the the class based on the input structure
            </summary>
            <param name="_struct">update fields based on the values of the structure</param>
        </member>
        <member name="M:IDRSNET.CIDRSFont.ToStruct">
            <summary>
            Converts the class fields to a structure
            </summary>
            <returns>IDRS_FONT</returns>
        </member>
        <member name="P:IDRSNET.CIDRSFont.TypefaceId">
            <summary>
            The typeface identifier for the font.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSFont.Size">
            <summary>
            The point size x 10.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSFont.Stretch">
            <summary>
            The stretching factor.
            Percentage value (stretch &lt; 100 means narrower and > 100 wider).
            </summary>
        </member>
        <member name="T:IDRSNET.IDRS_GEOMETRICAL_SHAPE">
            <summary>
            The IDRS_GEOMETRICAL_SHAPE structure defines a geometrical shape.
            </summary>
        </member>
        <member name="M:IDRSNET.IDRS_GEOMETRICAL_SHAPE.#ctor(IDRSNET.CIDRSGeometricalShape)">
            <summary>
            Structure constructor that converts class CIDRSGeometricalShape to
            structure IDRS_GEOMETRICAL_SHAPE by copying each fields
            </summary>
            <param name="_class">Class to be converted</param>
        </member>
        <member name="F:IDRSNET.IDRS_GEOMETRICAL_SHAPE.rcCoordinates">
            <summary>
            The coordinates of the geometrical shape.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_GEOMETRICAL_SHAPE.dSkewAngle">
            <summary>
            The skew angle for the geometrical shape in degrees.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_GEOMETRICAL_SHAPE.uiHeight">
            <summary>
            The height of the geometrical shape.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_GEOMETRICAL_SHAPE.uiWidth">
            <summary>
            The width of the geometrical shape.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_GEOMETRICAL_SHAPE.ptCenter">
            <summary>
            The coordinates of the center of the geometrical shape.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_GEOMETRICAL_SHAPE.gstGeometricalShapeType">
            <summary>
            The geometrical shape type.
            <see cref="T:IDRSNET.IDRS_GEOMETRICAL_SHAPE_TYPE"/> 
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_GEOMETRICAL_SHAPE.uiColorId">
            <summary>
            The identifier for the shape color.
            </summary>
        </member>
        <member name="T:IDRSNET.CIDRSGeometricalShape">
            <summary>
            The IDRS_GEOMETRICAL_SHAPE structure defines a geometrical shape.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSGeometricalShape.#ctor">
            <summary>
            Default constructor of CIDRSGeometricalShape.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSGeometricalShape.Finalize">
            <summary>
            Destructor of CIDRSGeometricalShape.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSGeometricalShape.#ctor(IDRSNET.IDRS_GEOMETRICAL_SHAPE)">
            <summary>
            Class constructor that converts structure IDRS_GEOMETRICAL_SHAPE to
            class CIDRSGeometricalShape by copying each fields
            </summary>
            <param name="_struct">set fields based on the values of the structure</param>
        </member>
        <member name="M:IDRSNET.CIDRSGeometricalShape.Update(IDRSNET.IDRS_GEOMETRICAL_SHAPE)">
            <summary>
            Update the fields of the the class based on the input structure
            </summary>
            <param name="_struct">update fields based on the values of the structure</param>
        </member>
        <member name="M:IDRSNET.CIDRSGeometricalShape.ToStruct">
            <summary>
            Converts the class fields to a structure
            </summary>
            <returns>IDRS_GEOMETRICAL_SHAPE</returns>
        </member>
        <member name="P:IDRSNET.CIDRSGeometricalShape.Coordinates">
            <summary>
            The coordinates of the geometrical shape.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSGeometricalShape.SkewAngle">
            <summary>
            The skew angle for the geometrical shape in degrees.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSGeometricalShape.Height">
            <summary>
            The height of the geometrical shape.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSGeometricalShape.Width">
            <summary>
            The width of the geometrical shape.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSGeometricalShape.Center">
            <summary>
            The coordinates of the center of the geometrical shape.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSGeometricalShape.GeometricalShapeType">
            <summary>
            The geometrical shape type.
            <see cref="T:IDRSNET.IDRS_GEOMETRICAL_SHAPE_TYPE"/> 
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSGeometricalShape.ColorId">
            <summary>
            The identifier for the shape color.
            </summary>
        </member>
        <member name="T:IDRSNET.IDRS_IMAGE_SIZE">
            <summary>
            Internal Structures that holds the properties defining the size of an image.
            \ingroup module_core module_image_file
            </summary>
        </member>
        <member name="M:IDRSNET.IDRS_IMAGE_SIZE.#ctor(IDRSNET.CIDRSImageSize)">
            <summary>
            Structure constructor that converts class CIDRSImageSize to
            structure IDRS_IMAGE_SIZE by copying each fields
            </summary>
            <param name="_class">Class to be converted</param>
        </member>
        <member name="F:IDRSNET.IDRS_IMAGE_SIZE.uiWidth">
            <summary>
            The width in pixels of the image. 
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_IMAGE_SIZE.uiHeight">
            <summary>
            uiHeight The height in pixels of the image. 
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_IMAGE_SIZE.uiByteWidth">
            <summary>
            The width in bytes of the image. 
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_IMAGE_SIZE.uiImageSize">
            <summary>
            The size of the image (bytes) 
            </summary>
        </member>
        <member name="T:IDRSNET.CIDRSImageSize">
            <summary>
            Public Classs that holds the properties defining the size of an image.
            \ingroup module_core module_image_file
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSImageSize.#ctor">
            <summary>
            Default constructor of CIDRSImageSize.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSImageSize.Finalize">
            <summary>
            Destructor of CIDRSImageSize.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSImageSize.#ctor(IDRSNET.IDRS_IMAGE_SIZE)">
            <summary>
            Class constructor that converts structure IDRS_IMAGE_SIZE to
            class CIDRSImageSize by copying each fields
            </summary>
            <param name="_struct">set fields based on the values of the structure</param>
        </member>
        <member name="M:IDRSNET.CIDRSImageSize.Update(IDRSNET.IDRS_IMAGE_SIZE)">
            <summary>
            Update the fields of the the class based on the input structure
            </summary>
            <param name="_struct">update fields based on the values of the structure</param>
        </member>
        <member name="M:IDRSNET.CIDRSImageSize.ToStruct">
            <summary>
            Converts the class fields to a structure
            </summary>
            <returns>IDRS_IMAGE_SIZE</returns>
        </member>
        <member name="P:IDRSNET.CIDRSImageSize.Width">
            <summary>
            The width in pixels of the image. 
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSImageSize.Height">
            <summary>
            uiHeight The height in pixels of the image. 
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSImageSize.ByteWidth">
            <summary>
            The width in bytes of the image. 
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSImageSize.ImageSize">
            <summary>
            The size of the image (bytes) 
            </summary>
        </member>
        <member name="T:IDRSNET.IDRS_LANGUAGE_CANDIDATE">
            <summary>
            Internal Structure used to retrieve the candidates for language detection.
            </summary>
        </member>
        <member name="M:IDRSNET.IDRS_LANGUAGE_CANDIDATE.#ctor(IDRSNET.CIDRSLanguageCandidate)">
            <summary>
            Structure constructor that converts class CIDRSLanguageCandidate to
            structure IDRS_LANGUAGE_CANDIDATE by copying each fields
            </summary>
            <param name="_class">Class to be converted</param>
        </member>
        <member name="F:IDRSNET.IDRS_LANGUAGE_CANDIDATE.evLanguageId">
            <summary>
            The language ID
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_LANGUAGE_CANDIDATE.ucConfidenceLevel">
            <summary>
            The confidence level associated.
            The confidence level ranges from 0 (best confidence) to 255 (worst confidence).
            </summary>
        </member>
        <member name="T:IDRSNET.CIDRSLanguageCandidate">
            <summary>
            Public Class used to retrieve the candidates for language detection.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSLanguageCandidate.#ctor">
            <summary>
            Default constructor of CIDRSLanguageCandidate.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSLanguageCandidate.Finalize">
            <summary>
            Destructor of CIDRSLanguageCandidate.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSLanguageCandidate.#ctor(IDRSNET.IDRS_LANGUAGE_CANDIDATE)">
            <summary>
            Class constructor that converts structure IDRS_LANGUAGE_CANDIDATE to
            class CIDRSLanguageCandidate by copying each fields
            </summary>
            <param name="_struct">set fields based on the values of the structure</param>
        </member>
        <member name="M:IDRSNET.CIDRSLanguageCandidate.Update(IDRSNET.IDRS_LANGUAGE_CANDIDATE)">
            <summary>
            Update the fields of the the class based on the input structure
            </summary>
            <param name="_struct">update fields based on the values of the structure</param>
        </member>
        <member name="M:IDRSNET.CIDRSLanguageCandidate.ToStruct">
            <summary>
            Converts the class fields to a structure
            </summary>
            <returns>IDRS_LANGUAGE_CANDIDATE</returns>
        </member>
        <member name="P:IDRSNET.CIDRSLanguageCandidate.LanguageId">
            <summary>
            The language ID
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSLanguageCandidate.ConfidenceLevel">
            <summary>
            The confidence level associated.
            The confidence level ranges from 0 (best confidence) to 255 (worst confidence).
            </summary>
        </member>
        <member name="T:IDRSNET.IDRS_MODULE">
            <summary>
            IDRS_MODULE contains all the iDRS modules identifiers.
            iDRS is composed of many different modules, modular to your project requirements.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_MODULE.IDRS_MODULE_OCR">
            <summary>
            The character recognition engine.
            The module provides ocr recognition capabilities. 
            
            In order to extend the recognition capabilities, the following extensions are available:
            - <see cref="F:IDRSNET.IDRS_EXTENSION.IDRS_OCR_EXTENSION_ASIAN"/> 
            - <see cref="F:IDRSNET.IDRS_EXTENSION.IDRS_OCR_EXTENSION_ASIAN2"/> 
            - <see cref="F:IDRSNET.IDRS_EXTENSION.IDRS_OCR_EXTENSION_ASIAN3"/> 
            - <see cref="F:IDRSNET.IDRS_EXTENSION.IDRS_OCR_EXTENSION_HEBREW"/> 
            - <see cref="F:IDRSNET.IDRS_EXTENSION.IDRS_OCR_EXTENSION_BANKING_FONTS"/> 
            - <see cref="F:IDRSNET.IDRS_EXTENSION.IDRS_OCR_EXTENSION_HAND_WRITE"/> 
            - <see cref="F:IDRSNET.IDRS_EXTENSION.IDRS_OCR_EXTENSION_ARABIC"/> 
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_MODULE.IDRS_MODULE_BARCODE">
            <summary>
            The barcode recognition engine.
            The barcode module will identify barcodes located anywhere on the page.
            The barcodes can be used as separators and their content can be used for renaming files for example.
            
            In order to extend the barcode recognition capabilities, the following extensions are available:
            - <see cref="F:IDRSNET.IDRS_EXTENSION.IDRS_BARCODE_EXTENSION_PDF417"/> 
            - <see cref="F:IDRSNET.IDRS_EXTENSION.IDRS_BARCODE_EXTENSION_QRCODE"/> 
            - <see cref="F:IDRSNET.IDRS_EXTENSION.IDRS_BARCODE_EXTENSION_ENGINE_EVO_I"/> 
            - <see cref="F:IDRSNET.IDRS_EXTENSION.IDRS_BARCODE_EXTENSION_DATAMATRIX"/> 
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_MODULE.IDRS_MODULE_PREPRO">
            <summary>
            The image preprocessing module.
            Before doing the OCR, the images may need to be optimized for the OCR process. This is done by different pre-processing functions.
            The IDRS_MODULE_PREPRO module allows you to clean-up the images for optimized OCR such as deskew, despeckle, binarize, etc. 
            
            The following extensions are available to enhance the image preprocessing:
            - <see cref="F:IDRSNET.IDRS_EXTENSION.IDRS_PREPRO_EXTENSION_ADVANCED_PREPRO"/> 
            - <see cref="F:IDRSNET.IDRS_EXTENSION.IDRS_PREPRO_EXTENSION_MOBILE_CAPTURE"/> 
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_MODULE.IDRS_MODULE_DOCUMENT_OUTPUT">
            <summary>
            The document output module.
            Once the recognition of the document has been done, you might still need to generate an output file. This is done by the document output module.
            The following extensions are available to enhance the output document:
            - <see cref="F:IDRSNET.IDRS_EXTENSION.IDRS_DOCUMENT_OUTPUT_IHQC_EXTENSION"/> 
            - <see cref="F:IDRSNET.IDRS_EXTENSION.IDRS_DOCUMENT_OUTPUT_JPEG2000_EXTENSION"/> 
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_MODULE.IDRS_MODULE_DOCUMENT_OUTPUT_LITE">
            <summary>
            The document output module light.
            Same purpose as the regular "document output module" with limited document creation capabilities.
            The following extensions are available to enable output capabilities:
            - <see cref="F:IDRSNET.IDRS_EXTENSION.IDRS_DOCUMENT_OUTPUT_LITE_EXTENSION_SEARCHABLE_PDF"/> 
            - <see cref="F:IDRSNET.IDRS_EXTENSION.IDRS_DOCUMENT_OUTPUT_LITE_EXTENSION_EDITABLE_RTF"/> 
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_MODULE.IDRS_MODULE_IMAGE_FILE">
            <summary>
            The iDRS Image File module.
            This module adds image loading/saving capabilities to iDRS SDK.
            The following extensions are available to enhance image loading capabilities:
            - <see cref="F:IDRSNET.IDRS_EXTENSION.IDRS_FILE_EXTENSION_JBIG2"/> 
            - <see cref="F:IDRSNET.IDRS_EXTENSION.IDRS_FILE_EXTENSION_JPEG2000"/> 
            - <see cref="F:IDRSNET.IDRS_EXTENSION.IDRS_FILE_EXTENSION_PDF"/> 
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_MODULE.IDRS_MODULE_RESERVED1">
            <summary>
            Value reserved for iDRS internal usage
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_MODULE.IDRS_MODULE_RESERVED2">
            <summary>
            Value reserved for iDRS internal usage
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_MODULE.IDRS_MODULE_RESERVED3">
            <summary>
            Value reserved for iDRS internal usage
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_MODULE.IDRS_MODULE_RESERVED4">
            <summary>
            Value reserved for iDRS internal usage
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_MODULE.IDRS_MODULE_RESERVED5">
            <summary>
            Value reserved for iDRS internal usage
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_MODULE.IDRS_MODULE_RESERVED6">
            <summary>
            Value reserved for iDRS internal usage
            </summary>
        </member>
        <member name="T:IDRSNET.IDRS_EXTENSION">
            <summary>
            IDRS_EXTENSION enum contains all the extensions available in iDRS SDK.
            </summary>
            <remarks>An extension cannot be loaded without it's corresponding module</remarks>
        </member>
        <member name="F:IDRSNET.IDRS_EXTENSION.IDRS_EXTENSION_NONE">
            <summary>
            ! None
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_EXTENSION.IDRS_BARCODE_EXTENSION_PDF417">
            <summary>
            ! iDRS SDK offers PDF 417 recognition capability of this type of 2-dimensional barcodes containing much more information than the 1-dimensional barcodes. <see cref="F:IDRSNET.IDRS_BARCODE_TYPE.IDRS_BARCODE_PDF417"/> 
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_EXTENSION.IDRS_BARCODE_EXTENSION_QRCODE">
            <summary>
            iDRS offer the recognition of the QR code which is another specification of 2-dimensional barcodes, specifically suited
            for encoding Japanese Kanji and Kana characters. <see cref="F:IDRSNET.IDRS_BARCODE_TYPE.IDRS_BARCODE_QR_CODE"/> 
            This extension allow also to recognize Aztec barcodes, another 2-dimensional barcode specification having the advantage of not requiring a quiet zone. <see cref="F:IDRSNET.IDRS_BARCODE_TYPE.IDRS_BARCODE_AZTEC"/> 
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_EXTENSION.IDRS_BARCODE_EXTENSION_ENGINE_EVO_I">
            <summary>
            ! iDRS can use an evolution of the barcode engine.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_EXTENSION.IDRS_BARCODE_EXTENSION_DATAMATRIX">
            <summary>
            ! iDRS also offer the recognition of the DataMatrix which is a 2-dimensional barcode. <see cref="F:IDRSNET.IDRS_BARCODE_TYPE.IDRS_BARCODE_DATAMATRIX"/> 
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_EXTENSION.IDRS_OCR_EXTENSION_ASIAN">
            <summary>
            Asian add-on extends the OCR languages with for 4 additional languages: Traditional Chinese, Simplified Chinese, Japanese and Korean.
            </summary>
            <remarks>
            This extension is no longer supported. Attempting to set it up will throw a CIDRSException. We recommend to use IDRS_OCR_EXTENSION_ASIAN2 instead, the newest Asian engine from I.R.I.S
            <see cref="T:IDRSNET.CIDRSException"/> 
            </remarks>
        </member>
        <member name="F:IDRSNET.IDRS_EXTENSION.IDRS_OCR_EXTENSION_HEBREW">
            <summary>
            ! Hebrew add-on extends the OCR languages with the Hebrew language.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_EXTENSION.IDRS_OCR_EXTENSION_BANKING_FONTS">
            <summary>
            Banking Fonts - MICR.
            The following banking fonts can be recognized: OCR-A, OCR-B, E13B and CMC-7.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_EXTENSION.IDRS_OCR_EXTENSION_HAND_WRITE">
            <summary>
            Standard HAND_WRITE.
            I.R.I.S. has developed its own Intelligent Character Recognition (HAND_WRITE) engine for the recognition of all handwritten characters based on the Latin
            alphabet.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_EXTENSION.IDRS_OCR_EXTENSION_ARABIC">
            <summary>
            ! Arabic add-on extends the OCR languages with the Arabic and Farsi languages.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_EXTENSION.IDRS_PREPRO_EXTENSION_ADVANCED_PREPRO">
            <summary>
            The advanced preprocessing extension.
            This extension allows to do black border removal, line removal, advanced despeckling, color conversion, etc.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_EXTENSION.IDRS_DOCUMENT_OUTPUT_IHQC_EXTENSION">
            <summary>
            The intelligent High Quality Compression extension.
            This extension allows to do create highly compressed PDF.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_EXTENSION.IDRS_DOCUMENT_OUTPUT_JPEG2000_EXTENSION">
            <summary>
            The JPEG 2000 Compression extension.
            This extension allows to use the JPEG 2000 compression engine
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_EXTENSION.IDRS_DOCUMENT_OUTPUT_LITE_EXTENSION_SEARCHABLE_PDF">
            <summary>
            The searchable PDF extension.
            This extension offers a limited set of PDF output features:
            PDF 1.7, PDF Image-Text
            but none of:
            bookmarks, JPEG 2000, iHQC, embedded fonts, encryption, certificate, change of resolution, header, footer.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_EXTENSION.IDRS_DOCUMENT_OUTPUT_LITE_EXTENSION_EDITABLE_RTF">
            <summary>
            The editable RTF extension.
            This extension offers a limited set of RTF output features:
            Layout: recreate source document
            JPEG quality factor
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_EXTENSION.IDRS_IMAGE_FILE_EXTENSION_JPEG">
            <summary>
            The JPEG compression support
            </summary>
            <remarks>
            This extension is not needed anymore to support JPEG images; it is kept only for backward compatibility reason.
            Code using that extension will still be able to compile.
            </remarks>
        </member>
        <member name="F:IDRSNET.IDRS_EXTENSION.IDRS_FILE_EXTENSION_JBIG2">
            <summary>
            JBIG2 compression support
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_EXTENSION.IDRS_FILE_EXTENSION_JPEG2000">
            <summary>
            JPEG 2000 compression support
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_EXTENSION.IDRS_OCR_EXTENSION_ASIAN2">
            <summary>
            Asian2 engine is the newest Asian engine from I.R.I.S.
            This add-on extends the recognition to 4 OCR languages: Traditional Chinese, Simplified Chinese, Japanese and Korean.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_EXTENSION.IDRS_FILE_EXTENSION_PDF">
            <summary>
            Enables iDRS SDK to load PDF files as an input.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_EXTENSION.IDRS_PREPRO_EXTENSION_MOBILE_CAPTURE">
            <summary>
            Enables perspective correction of images created using a camera
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_EXTENSION.IDRS_OCR_EXTENSION_ASIAN3">
            <summary>
            Asian 3 OCR engine
            This extension enables the combination of IRIS enhanced Asian engine (Asian2) with a 3rd party OCR Engine.
            This allows to improve speed performance, without compromising OCR accuracy.
            </summary>
            <remarks>
            The engine combination is available for the moment for Japanese language only; for other Asian languages,
            only IRIS enhanced Asian engine (Asian2) will be run.
            Combination for other Asian languages will be available in a future release.
            </remarks>
        </member>
        <member name="T:IDRSNET.IDRS_LICENSE_TYPE">
            <summary>
            IDRS_LICENSE_TYPE enum contains iDRS license types.
            iDRS manages different license type, depending on your project requirements. The license type goes with the protection type.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_LICENSE_TYPE.IDRS_LICENSE_CUSTOM_SOFTWARE">
            <summary>
            Custom software protection.
            I.R.I.S. provides to the integrator other types of protection depending on the constraints of the project of the integrator.
            Usually, this type of protection is proposed by I.R.I.S. under a very specific license agreement for large deployment projects and for a business level
            that represents substantial yearly revenue for I.R.I.S.
            </summary>
        </member>
        <member name="T:IDRSNET.CIDRSLicense">
            <summary>
            The CIDRSLicense class stores the licensing information for a module in iDRS SDK
            \ingroup module_core
            The class stores the following information:
            - <b>module identifier</b> - IDRS_MODULE
            - <b>license type</b> - IDRS_LICENSE_TYPE
            - <b>software key</b> that unlocks the module features
            - <b>address of the licensing server</b> - used in case license type is IDRS_LICENSE_SOFTWARE
            - <b>list of extensions to enable</b>
            This class should be used in conjunction with CIDRSSetup to specify which iDRS SDK modules and extensions will be enabled in integrator's applications.
            </summary>
            <remarks>
            For IDRS_MODULE_OCR, please see CIDRSLicenseOcr
            <see cref="T:IDRSNET.IDRS_MODULE"/> for a list with the modules available in iDRS SDK
            <see cref="T:IDRSNET.IDRS_EXTENSION"/> for a list with the extensions available in iDRS SDK
            <see cref="T:IDRSNET.CIDRSSetup"/> for CIDRSLicense usage details
            </remarks>
        </member>
        <member name="M:IDRSNET.CIDRSLicense.#ctor">
            <summary>
            Default constructor
            Creates the object but it doesn't initialize the inner structures
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSLicense.#ctor(IDRSNET.IDRS_MODULE,IDRSNET.IDRS_LICENSE_TYPE,System.String)">
            <summary>
            Creates a CIDRSLicense object and initializes it with the supplied information
            </summary>
            <param name="mModule">Module identifier</param>
            <param name="ltLicenseType">License type</param>
            <param name="strSoftwareKey">Pointer to a null terminated IDRS_CHAR buffer containing the software key for unlocking the module features.</param>
        </member>
        <member name="M:IDRSNET.CIDRSLicense.Finalize">
            <summary>
            Destructor of CIDRSLicense.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSLicense.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSLicense.GetPointer">
            <summary>
            Internal virtual  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CIDRSLicense.SetPointer(System.IntPtr)">
            <summary>
            Internal virtual  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CIDRSLicense object</param>
        </member>
        <member name="M:IDRSNET.CIDRSLicense.IsExtensionEnabled(IDRSNET.IDRS_EXTENSION)">
            <summary>
            Verifies if the extension specified as argument is enabled
            </summary>
            <param name="eExtension">The extension to be verified</param>
            <returns>IDRS_TRUE if the specified extension is enable</returns>
            <returns>IDRS_FALSE otherwise</returns>
            <exception>CIDRSException if the supplied extension is invalid for the current module</exception>
        </member>
        <member name="M:IDRSNET.CIDRSLicense.GetExtensionSoftwareKey(IDRSNET.IDRS_EXTENSION)">
            <summary>
            Returns a constant pointer to a NULL terminated IDRS_CHAR buffer containing the extension software key
            </summary>
            <param name="eExtension">The extension to be verified</param>
            <returns>constant pointer to a NULL terminated IDRS_CHAR buffer containing the extension software key</returns>
            <exception>CIDRSException if the supplied extension is invalid for the current module</exception>
        </member>
        <member name="M:IDRSNET.CIDRSLicense.EnableExtension(IDRSNET.IDRS_EXTENSION,System.String)">
            <summary>
            Enables an extension for the current module
            </summary>
            <param name="eExtension">The extension to be verified</param>
            <param name="strExtensionSoftwareKey">constant pointer to a NULL terminated IDRS_CHAR buffer containing the extension software key</param>
            <exception>CIDRSException if the supplied extension is invalid for the current module</exception>
        </member>
        <member name="M:IDRSNET.CIDRSLicense.DisableExtension(IDRSNET.IDRS_EXTENSION)">
            <summary>
            Disables an extension for the current module
            </summary>
            <param name="eExtension">The extension to be verified</param>
            <exception>CIDRSException if the supplied extension is invalid for the current module</exception>
        </member>
        <member name="M:IDRSNET.CIDRSLicense.GetExtensionAt(System.UInt32)">
            <summary>
            Returns the extension at a specified index
            CIDRSLicense class contains an internal vector with all the extensions available for the current module.
            The integrators can obtain in a programmatic way all the extensions available for the current module.
            </summary>
            <param name="uiIndex">zero based index where to search for the extension</param>
            <returns>the extension identified found at the supplied index</returns>
            <exception>CIDRSException if the index is out of bounds</exception>
        </member>
        <member name="M:IDRSNET.CIDRSLicense.IsNull">
            <summary>
            IsNull checks if the license object is initialized
            </summary>
            <returns>IDRS_TRUE if the license object is initialized with data</returns>
            <returns>IDRS_FALSE if the license object contains no data</returns>
        </member>
        <member name="P:IDRSNET.CIDRSLicense.LicenseType">
            <summary>
            Get/Set the license type used by this license object
            </summary>
            
        </member>
        <member name="P:IDRSNET.CIDRSLicense.ExtensionCount">
            <summary>
            Returns the number of extension supported by the current module
            
            </summary>
            
        </member>
        <member name="P:IDRSNET.CIDRSLicense.Module">
            <summary>
            Returns the module for this license object
            
            </summary>
            
        </member>
        <member name="P:IDRSNET.CIDRSLicense.SoftwareKey">
            <summary>
            Returns a constant pointer to a NULL terminated IDRS_CHAR buffer containing the module software key
            
            </summary>
            
        </member>
        <member name="T:IDRSNET.CIDRSLicenseOcr">
            <summary>
            The CIDRSLicenseOcr class stores the licensing information for <see cref="F:IDRSNET.IDRS_MODULE.IDRS_MODULE_OCR"/> module
            \ingroup module_core module_ocr
            The class inherits from <see cref="T:IDRSNET.CIDRSLicense"/> class and keeps the inherited functionality unchanged. The extra piece of information is represented by the path to the OCR resource files.
            <see cref="T:IDRSNET.CIDRSLicense"/> for inherited functionality
            <see cref="F:IDRSNET.IDRS_MODULE.IDRS_MODULE_OCR"/> for ocr module details and available extensions
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSLicenseOcr.#ctor">
            <summary>
            Default constructor
            Creates the object but it doesn't initialize the inner structures
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSLicenseOcr.#ctor(IDRSNET.IDRS_LICENSE_TYPE,System.String)">
            <summary>
            Creates a CIDRSLicenseOcr object and initializes it with the supplied information
            </summary>
            <param name="ltLicenseType">License type</param>
            <param name="strSoftwareKey">Pointer to a null terminated IDRS_CHAR buffer containing the software key for unlocking the module features.</param>
        </member>
        <member name="M:IDRSNET.CIDRSLicenseOcr.#ctor(IDRSNET.IDRS_LICENSE_TYPE,System.String,System.String)">
            <summary>
            Creates a CIDRSLicenseOcr object and initializes it with the supplied information
            </summary>
            <param name="ltLicenseType">License type</param>
            <param name="strSoftwareKey">Pointer to a NULL terminated IDRS_CHAR buffer containing the software key for unlocking the module features.</param>
            <param name="strResourcesPath">Pointer to a NULL terminated IDRS_TCHAR buffer containing the path to the ocr resource files</param>
            <exception>CIDRSException of the buffer containing the path to the ocr resource files is greater than <see cref="F:IDRSNET.Constants.IDRS_MAX_PATH"/> </exception>
        </member>
        <member name="M:IDRSNET.CIDRSLicenseOcr.Finalize">
            <summary>
            Destructor of CIDRSLicenseOcr.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSLicenseOcr.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSLicenseOcr.GetPointer">
            <summary>
            Internal override  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CIDRSLicenseOcr.SetPointer(System.IntPtr)">
            <summary>
            Internal override  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CIDRSLicenseOcr object</param>
        </member>
        <member name="P:IDRSNET.CIDRSLicenseOcr.ResourcesPath">
            <summary>
            Get/Set the resources path for the ocr engine.
            </summary>
            
        </member>
        <member name="T:IDRSNET.IDRS_LIST">
            <summary>
            The IDRS_LIST structure defines a list.
            </summary>
        </member>
        <member name="M:IDRSNET.IDRS_LIST.#ctor(IDRSNET.CIDRSList)">
            <summary>
            Structure constructor that converts class CIDRSList to
            structure IDRS_LIST by copying each fields
            </summary>
            <param name="_class">Class to be converted</param>
        </member>
        <member name="F:IDRSNET.IDRS_LIST.ucType">
            <summary>
            The list type.
            iDRS list types.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_LIST.ucStyle">
            <summary>
            The list style.
            iDRS list style.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_LIST.uiStart">
            <summary>
            The beginning number of a numbered list.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_LIST.wcPost">
            <summary>
            The character after the number for an ordered list.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_LIST.rcCoordinates">
            <summary>
            The coordinates of the list.
            </summary>
        </member>
        <member name="T:IDRSNET.CIDRSList">
            <summary>
            The IDRS_LIST structure defines a list.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSList.#ctor">
            <summary>
            Default constructor of CIDRSList.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSList.Finalize">
            <summary>
            Destructor of CIDRSList.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSList.#ctor(IDRSNET.IDRS_LIST)">
            <summary>
            Class constructor that converts structure IDRS_LIST to
            class CIDRSList by copying each fields
            </summary>
            <param name="_struct">set fields based on the values of the structure</param>
        </member>
        <member name="M:IDRSNET.CIDRSList.Update(IDRSNET.IDRS_LIST)">
            <summary>
            Update the fields of the the class based on the input structure
            </summary>
            <param name="_struct">update fields based on the values of the structure</param>
        </member>
        <member name="M:IDRSNET.CIDRSList.ToStruct">
            <summary>
            Converts the class fields to a structure
            </summary>
            <returns>IDRS_LIST</returns>
        </member>
        <member name="P:IDRSNET.CIDRSList.Type">
            <summary>
            The list type.
            iDRS list types.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSList.Style">
            <summary>
            The list style.
            iDRS list style.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSList.Start">
            <summary>
            The beginning number of a numbered list.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSList.Post">
            <summary>
            The character after the number for an ordered list.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSList.Coordinates">
            <summary>
            The coordinates of the list.
            </summary>
        </member>
        <member name="T:IDRSNET.IDRS_MARGINS">
            <summary>
            ! Internal Structure containing the margins for a page element
            </summary>
        </member>
        <member name="M:IDRSNET.IDRS_MARGINS.#ctor(IDRSNET.CIDRSMargins)">
            <summary>
            Structure constructor that converts class CIDRSMargins to
            structure IDRS_MARGINS by copying each fields
            </summary>
            <param name="_class">Class to be converted</param>
        </member>
        <member name="F:IDRSNET.IDRS_MARGINS.iMarginLeft">
            <summary>
            ! Left margin
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_MARGINS.iMarginTop">
            <summary>
            ! Top margin
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_MARGINS.iMarginRight">
            <summary>
            ! Right margin
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_MARGINS.iMarginBottom">
            <summary>
            ! Bottom margin
            </summary>
        </member>
        <member name="T:IDRSNET.CIDRSMargins">
            <summary>
            ! Public Class containing the margins for a page element
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSMargins.#ctor">
            <summary>
            Default constructor of CIDRSMargins.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSMargins.Finalize">
            <summary>
            Destructor of CIDRSMargins.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSMargins.#ctor(IDRSNET.IDRS_MARGINS)">
            <summary>
            Class constructor that converts structure IDRS_MARGINS to
            class CIDRSMargins by copying each fields
            </summary>
            <param name="_struct">set fields based on the values of the structure</param>
        </member>
        <member name="M:IDRSNET.CIDRSMargins.Update(IDRSNET.IDRS_MARGINS)">
            <summary>
            Update the fields of the the class based on the input structure
            </summary>
            <param name="_struct">update fields based on the values of the structure</param>
        </member>
        <member name="M:IDRSNET.CIDRSMargins.ToStruct">
            <summary>
            Converts the class fields to a structure
            </summary>
            <returns>IDRS_MARGINS</returns>
        </member>
        <member name="P:IDRSNET.CIDRSMargins.MarginLeft">
            <summary>
            ! Left margin
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSMargins.MarginTop">
            <summary>
            ! Top margin
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSMargins.MarginRight">
            <summary>
            ! Right margin
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSMargins.MarginBottom">
            <summary>
            ! Bottom margin
            </summary>
        </member>
        <member name="T:IDRSNET.CIDRSObj">
            <summary>
            Abstract Class to represent CIDRSObj
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSObj.GetPointer">
            <summary>
            Get the instance pointer
            </summary>
            <returns>IntPtr to the class</returns>
        </member>
        <member name="M:IDRSNET.CIDRSObj.SetPointer(System.IntPtr)">
            <summary>
            Set the instance pointer
            </summary>
            <param name="ptr">instance pointer</param>
        </member>
        <member name="T:IDRSNET.CIDRSObjArray`1">
            <summary>
            Templated Class for managing array of CIDRSObj
            It represents a collection of elements that can be individually accessed by index.
            </summary>
            <typeparam name="T">The type of elements in the list</typeparam>
        </member>
        <member name="M:IDRSNET.CIDRSObjArray`1.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSObjArray`1.#ctor(System.IntPtr)">
            <summary>
            Copy constructor from an internal pointer. For internal use only.
            </summary>
            <param name="ptr">Pointer of another CIDRSObjArray&lt;T&gt;</param>
        </member>
        <member name="M:IDRSNET.CIDRSObjArray`1.Finalize">
            <summary>
            Destructor for CIDRSObjArray&lt;T&gt;
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSObjArray`1.Dispose(System.Boolean)">
            <summary>
            Dispose method for CIDRSObjArray&lt;T&gt;
            </summary>
            <param name="disposing">Specifies if managed objects need disposing&lt;T&gt;. </param>
        </member>
        <member name="M:IDRSNET.CIDRSObjArray`1.Dispose">
            <summary>
            Dispose method needed by IDisposable
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSObjArray`1.GetPointer">
            <summary>
            Get the instance pointer. For internal use only.
            </summary>
            <returns>A pointer to an internal instance.</returns>
        </member>
        <member name="P:IDRSNET.CIDRSObjArray`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at specified index.</returns>
        </member>
        <member name="P:IDRSNET.CIDRSObjArray`1.Count">
            <summary>
            Gets the number of elements contained in the CIDRSObjArray&lt;T&gt;.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSObjArray`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the CIDRSObjArray&lt;T&gt; is read-only.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSObjArray`1.Add(`0)">
            <summary>
            Adds an object to the end of the CIDRSObjArray&lt;T&gt;.
            </summary>
            <param name="item">The object to be added to the end of the CIDRSObjArray&lt;T&gt;.</param>
        </member>
        <member name="M:IDRSNET.CIDRSObjArray`1.Contains(`0)">
            <summary>
            Determines whether an element is in the CIDRSObjArray&lt;T&gt;.
            </summary>
            <param name="item">The object to locate in the CIDRSObjArray&lt;T&gt;</param>
            <returns>true if item is found in the CIDRSObjArray&lt;T&gt;; otherwise, false.</returns>
        </member>
        <member name="M:IDRSNET.CIDRSObjArray`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the entire CIDRSObjArray&lt;T&gt; to a compatible one-dimensional array,
            starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from CIDRSObjArray&lt;T&gt;.
            The Array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:IDRSNET.CIDRSObjArray`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates thru the CIDRSObjArray&lt;T&gt;.
            </summary>
            <returns>A CIDRSObjArray&lt;T&gt;.Enumerator for the CIDRSObjArray&lt;T&gt;.</returns>
        </member>
        <member name="M:IDRSNET.CIDRSObjArray`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates thru the CIDRSObjArray&lt;T&gt;.
            </summary>
            <returns>A CIDRSObjArray&lt;T&gt;.Enumerator for the CIDRSObjArray&lt;T&gt;.</returns>
        </member>
        <member name="M:IDRSNET.CIDRSObjArray`1.IndexOf(`0)">
            <summary>
            Returns the zero-based index of the first occurrence of a value in the CIDRSObjArray&lt;T&gt; or in a portion of it.
            </summary>
            <param name="item">The object to locate in the CIDRSObjArray&lt;T&gt;</param>
            <returns>The zero-based index of the first occurence of a value.</returns>
        </member>
        <member name="M:IDRSNET.CIDRSObjArray`1.Clear">
            <summary>
            Removes all elements from the CIDRSObjArray&lt;T&gt;.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSObjArray`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an element into the CIDRSObjArray&lt;T&gt; at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert.</param>
        </member>
        <member name="M:IDRSNET.CIDRSObjArray`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the CIDRSObjArray&lt;T&gt;.
            </summary>
            <param name="item">The object to remove from the CIDRSObjArray&lt;T&gt;.</param>
            <returns>true if item is successfully removed; otherwise, false. 
            This method also returns false if item was not found in the CIDRSObjArray&lt;T&gt;.</returns>
        </member>
        <member name="M:IDRSNET.CIDRSObjArray`1.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the CIDRSObjArray&lt;T&gt;.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="T:IDRSNET.IDRS_PARAGRAPH_STYLE">
            <summary>
            The IDRS_PARAGRAPH_STYLE structure defines a paragraph style.
            </summary>
        </member>
        <member name="M:IDRSNET.IDRS_PARAGRAPH_STYLE.#ctor(IDRSNET.CIDRSParagraphStyle)">
            <summary>
            Structure constructor that converts class CIDRSParagraphStyle to
            structure IDRS_PARAGRAPH_STYLE by copying each fields
            </summary>
            <param name="_class">Class to be converted</param>
        </member>
        <member name="F:IDRSNET.IDRS_PARAGRAPH_STYLE.atAlign">
            <summary>
            The alignment type (center, right, left).
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_PARAGRAPH_STYLE.iTopMargin">
            <summary>
            ! Top margin.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_PARAGRAPH_STYLE.iLeftMargin">
            <summary>
            ! Left margin.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_PARAGRAPH_STYLE.iRightMargin">
            <summary>
            ! Right margin.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_PARAGRAPH_STYLE.iBottomMargin">
            <summary>
            ! Bottom margin.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_PARAGRAPH_STYLE.uiLineHeight">
            <summary>
            The line height.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_PARAGRAPH_STYLE.iFontId">
            <summary>
            The font identifier.
            -1 for none.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_PARAGRAPH_STYLE.iFontDropCapId">
            <summary>
            The dropcap font.
            -1 for none.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_PARAGRAPH_STYLE.uiForegroundColorId">
            <summary>
            The foreground color.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_PARAGRAPH_STYLE.uiBgColorId">
            <summary>
            The background color identifier.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_PARAGRAPH_STYLE.iFirstLineIndent">
            <summary>
            The indentation of the first line.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_PARAGRAPH_STYLE.uiParagraphTabulationCount">
            <summary>
            The number of paragraph tabulations.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_PARAGRAPH_STYLE.xParagraphTabulations">
            <summary>
            The paragraph tabulations.
            </summary>
        </member>
        <member name="T:IDRSNET.CIDRSParagraphStyle">
            <summary>
            The IDRS_PARAGRAPH_STYLE structure defines a paragraph style.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSParagraphStyle.#ctor">
            <summary>
            Default constructor of CIDRSParagraphStyle.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSParagraphStyle.Finalize">
            <summary>
            Destructor of CIDRSParagraphStyle.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSParagraphStyle.#ctor(IDRSNET.IDRS_PARAGRAPH_STYLE)">
            <summary>
            Class constructor that converts structure IDRS_PARAGRAPH_STYLE to
            class CIDRSParagraphStyle by copying each fields
            </summary>
            <param name="_struct">set fields based on the values of the structure</param>
        </member>
        <member name="M:IDRSNET.CIDRSParagraphStyle.Update(IDRSNET.IDRS_PARAGRAPH_STYLE)">
            <summary>
            Update the fields of the the class based on the input structure
            </summary>
            <param name="_struct">update fields based on the values of the structure</param>
        </member>
        <member name="M:IDRSNET.CIDRSParagraphStyle.ToStruct">
            <summary>
            Converts the class fields to a structure
            </summary>
            <returns>IDRS_PARAGRAPH_STYLE</returns>
        </member>
        <member name="P:IDRSNET.CIDRSParagraphStyle.Align">
            <summary>
            The alignment type (center, right, left).
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSParagraphStyle.TopMargin">
            <summary>
            ! Top margin.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSParagraphStyle.LeftMargin">
            <summary>
            ! Left margin.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSParagraphStyle.RightMargin">
            <summary>
            ! Right margin.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSParagraphStyle.BottomMargin">
            <summary>
            ! Bottom margin.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSParagraphStyle.LineHeight">
            <summary>
            The line height.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSParagraphStyle.FontId">
            <summary>
            The font identifier.
            -1 for none.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSParagraphStyle.FontDropCapId">
            <summary>
            The dropcap font.
            -1 for none.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSParagraphStyle.ForegroundColorId">
            <summary>
            The foreground color.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSParagraphStyle.BgColorId">
            <summary>
            The background color identifier.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSParagraphStyle.FirstLineIndent">
            <summary>
            The indentation of the first line.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSParagraphStyle.ParagraphTabulationCount">
            <summary>
            The number of paragraph tabulations.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSParagraphStyle.ParagraphTabulations">
            <summary>
            The paragraph tabulations.
            </summary>
        </member>
        <member name="T:IDRSNET.IDRS_PARAGRAPH_TABULATION">
            <summary>
            The IDRS_PARAGRAPH_TABULATION structure defines a paragraph tabulation.
            </summary>
        </member>
        <member name="M:IDRSNET.IDRS_PARAGRAPH_TABULATION.#ctor(IDRSNET.CIDRSParagraphTabulation)">
            <summary>
            Structure constructor that converts class CIDRSParagraphTabulation to
            structure IDRS_PARAGRAPH_TABULATION by copying each fields
            </summary>
            <param name="_class">Class to be converted</param>
        </member>
        <member name="F:IDRSNET.IDRS_PARAGRAPH_TABULATION.uiId">
            <summary>
            The identifier for the paragraph tabulation.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_PARAGRAPH_TABULATION.uiCellWidth">
            <summary>
            The associated cell width in pixels ( for table rendering )
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_PARAGRAPH_TABULATION.uiStopValue">
            <summary>
            The stop value in pixels.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_PARAGRAPH_TABULATION.uiLeftPadding">
            <summary>
            The left padding ( for table rendering )
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_PARAGRAPH_TABULATION.uiRightPadding">
            <summary>
            The right padding ( for table rendering )
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_PARAGRAPH_TABULATION.atAlign">
            <summary>
            The alignment type.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_PARAGRAPH_TABULATION.tlTabLeader">
            <summary>
            The tabulation leader.
            </summary>
        </member>
        <member name="T:IDRSNET.CIDRSParagraphTabulation">
            <summary>
            The IDRS_PARAGRAPH_TABULATION structure defines a paragraph tabulation.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSParagraphTabulation.#ctor">
            <summary>
            Default constructor of CIDRSParagraphTabulation.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSParagraphTabulation.Finalize">
            <summary>
            Destructor of CIDRSParagraphTabulation.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSParagraphTabulation.#ctor(IDRSNET.IDRS_PARAGRAPH_TABULATION)">
            <summary>
            Class constructor that converts structure IDRS_PARAGRAPH_TABULATION to
            class CIDRSParagraphTabulation by copying each fields
            </summary>
            <param name="_struct">set fields based on the values of the structure</param>
        </member>
        <member name="M:IDRSNET.CIDRSParagraphTabulation.Update(IDRSNET.IDRS_PARAGRAPH_TABULATION)">
            <summary>
            Update the fields of the the class based on the input structure
            </summary>
            <param name="_struct">update fields based on the values of the structure</param>
        </member>
        <member name="M:IDRSNET.CIDRSParagraphTabulation.ToStruct">
            <summary>
            Converts the class fields to a structure
            </summary>
            <returns>IDRS_PARAGRAPH_TABULATION</returns>
        </member>
        <member name="P:IDRSNET.CIDRSParagraphTabulation.Id">
            <summary>
            The identifier for the paragraph tabulation.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSParagraphTabulation.CellWidth">
            <summary>
            The associated cell width in pixels ( for table rendering )
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSParagraphTabulation.StopValue">
            <summary>
            The stop value in pixels.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSParagraphTabulation.LeftPadding">
            <summary>
            The left padding ( for table rendering )
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSParagraphTabulation.RightPadding">
            <summary>
            The right padding ( for table rendering )
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSParagraphTabulation.Align">
            <summary>
            The alignment type.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSParagraphTabulation.TabLeader">
            <summary>
            The tabulation leader.
            </summary>
        </member>
        <member name="T:IDRSNET.IDRS_PERSPECTIVE_CORNERS">
            <summary>
            The IDRS_PERSPECTIVE_CORNERS structure contains the four corners of a quadrilateral that represent the area of the document that has being photographed.
            Note that corners must be given in clockwise order (top-left, top-right, bottom-right, bottom-left)
            \ingroup module_prepro_mobile_capture
            </summary>
        </member>
        <member name="M:IDRSNET.IDRS_PERSPECTIVE_CORNERS.#ctor(IDRSNET.CIDRSPerspectiveCorners)">
            <summary>
            Structure constructor that converts class CIDRSPerspectiveCorners to
            structure IDRS_PERSPECTIVE_CORNERS by copying each fields
            </summary>
            <param name="_class">Class to be converted</param>
        </member>
        <member name="F:IDRSNET.IDRS_PERSPECTIVE_CORNERS.xiX">
            <summary>
            ! The x coordinates for the 4 corners.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_PERSPECTIVE_CORNERS.xiY">
            <summary>
            ! The y coordinates for the 4 corners.
            </summary>
        </member>
        <member name="T:IDRSNET.CIDRSPerspectiveCorners">
            <summary>
            The IDRS_PERSPECTIVE_CORNERS structure contains the four corners of a quadrilateral that represent the area of the document that has being photographed.
            Note that corners must be given in clockwise order (top-left, top-right, bottom-right, bottom-left)
            \ingroup module_prepro_mobile_capture
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSPerspectiveCorners.#ctor">
            <summary>
            Default constructor of CIDRSPerspectiveCorners.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSPerspectiveCorners.Finalize">
            <summary>
            Destructor of CIDRSPerspectiveCorners.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSPerspectiveCorners.#ctor(IDRSNET.IDRS_PERSPECTIVE_CORNERS)">
            <summary>
            Class constructor that converts structure IDRS_PERSPECTIVE_CORNERS to
            class CIDRSPerspectiveCorners by copying each fields
            </summary>
            <param name="_struct">set fields based on the values of the structure</param>
        </member>
        <member name="M:IDRSNET.CIDRSPerspectiveCorners.Update(IDRSNET.IDRS_PERSPECTIVE_CORNERS)">
            <summary>
            Update the fields of the the class based on the input structure
            </summary>
            <param name="_struct">update fields based on the values of the structure</param>
        </member>
        <member name="M:IDRSNET.CIDRSPerspectiveCorners.ToStruct">
            <summary>
            Converts the class fields to a structure
            </summary>
            <returns>IDRS_PERSPECTIVE_CORNERS</returns>
        </member>
        <member name="P:IDRSNET.CIDRSPerspectiveCorners.X">
            <summary>
            ! The x coordinates for the 4 corners.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSPerspectiveCorners.Y">
            <summary>
            ! The y coordinates for the 4 corners.
            </summary>
        </member>
        <member name="T:IDRSNET.IDRS_POINT">
            <summary>
            Internal Structure defines the coordinates of a point in iDRS
            </summary>
        </member>
        <member name="M:IDRSNET.IDRS_POINT.#ctor(IDRSNET.CIDRSPoint)">
            <summary>
            Structure constructor that converts class CIDRSPoint to
            structure IDRS_POINT by copying each fields
            </summary>
            <param name="_class">Class to be converted</param>
        </member>
        <member name="F:IDRSNET.IDRS_POINT.uiX">
            <summary>
            X 
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_POINT.uiY">
            <summary>
            Y 
            </summary>
        </member>
        <member name="T:IDRSNET.CIDRSPoint">
            <summary>
            Public Class defines the coordinates of a point in iDRS
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSPoint.#ctor">
            <summary>
            Default constructor of CIDRSPoint.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSPoint.Finalize">
            <summary>
            Destructor of CIDRSPoint.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSPoint.#ctor(IDRSNET.IDRS_POINT)">
            <summary>
            Class constructor that converts structure IDRS_POINT to
            class CIDRSPoint by copying each fields
            </summary>
            <param name="_struct">set fields based on the values of the structure</param>
        </member>
        <member name="M:IDRSNET.CIDRSPoint.Update(IDRSNET.IDRS_POINT)">
            <summary>
            Update the fields of the the class based on the input structure
            </summary>
            <param name="_struct">update fields based on the values of the structure</param>
        </member>
        <member name="M:IDRSNET.CIDRSPoint.ToStruct">
            <summary>
            Converts the class fields to a structure
            </summary>
            <returns>IDRS_POINT</returns>
        </member>
        <member name="M:IDRSNET.CIDRSPoint.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Creates a CIDRSPoint instance
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSPoint.X">
            <summary>
            X 
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSPoint.Y">
            <summary>
            Y 
            </summary>
        </member>
        <member name="T:IDRSNET.IDRS_RECT">
            <summary>
            Internal Structure that defines the upper-left and lower-right corners of a rectangle.
            </summary>
        </member>
        <member name="M:IDRSNET.IDRS_RECT.#ctor(IDRSNET.CIDRSRect)">
            <summary>
            Structure constructor that converts class CIDRSRect to
            structure IDRS_RECT by copying each fields
            </summary>
            <param name="_class">Class to be converted</param>
        </member>
        <member name="F:IDRSNET.IDRS_RECT.uiTop">
            <summary>
            Top. 
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_RECT.uiLeft">
            <summary>
            Left. 
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_RECT.uiBottom">
            <summary>
            Bottom. 
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_RECT.uiRight">
            <summary>
            Right. 
            </summary>
        </member>
        <member name="T:IDRSNET.CIDRSRect">
            <summary>
            Public Class that defines the upper-left and lower-right corners of a rectangle.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSRect.#ctor">
            <summary>
            Default constructor of CIDRSRect.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSRect.Finalize">
            <summary>
            Destructor of CIDRSRect.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSRect.#ctor(IDRSNET.IDRS_RECT)">
            <summary>
            Class constructor that converts structure IDRS_RECT to
            class CIDRSRect by copying each fields
            </summary>
            <param name="_struct">set fields based on the values of the structure</param>
        </member>
        <member name="M:IDRSNET.CIDRSRect.Update(IDRSNET.IDRS_RECT)">
            <summary>
            Update the fields of the the class based on the input structure
            </summary>
            <param name="_struct">update fields based on the values of the structure</param>
        </member>
        <member name="M:IDRSNET.CIDRSRect.ToStruct">
            <summary>
            Converts the class fields to a structure
            </summary>
            <returns>IDRS_RECT</returns>
        </member>
        <member name="M:IDRSNET.CIDRSRect.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Creates a CIDRSRect instance
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSRect.Top">
            <summary>
            Top. 
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSRect.Left">
            <summary>
            Left. 
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSRect.Bottom">
            <summary>
            Bottom. 
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSRect.Right">
            <summary>
            Right. 
            </summary>
        </member>
        <member name="T:IDRSNET.IDRS_SECTION">
            <summary>
            The IDRS_SECTION structure defines a section.
            </summary>
        </member>
        <member name="M:IDRSNET.IDRS_SECTION.#ctor(IDRSNET.CIDRSSection)">
            <summary>
            Structure constructor that converts class CIDRSSection to
            structure IDRS_SECTION by copying each fields
            </summary>
            <param name="_class">Class to be converted</param>
        </member>
        <member name="F:IDRSNET.IDRS_SECTION.bHasVerticalLines">
            <summary>
            Flag for the presence of a vertical line between columns.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_SECTION.rcCoordinates">
            <summary>
            The coordinates of the section.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_SECTION.uiColumnCount">
            <summary>
            The number of columns in the section.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_SECTION.xrcColumnsCoordinates">
            <summary>
            The columns of the section.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_SECTION.uiZonesWithinColumnsCount">
            <summary>
            The number of zones within columns in the section.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_SECTION.xzicZonesWithinColumns">
            <summary>
            The definitions of the zones within columns in the section.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_SECTION.uiZonesOutsideColumnsCount">
            <summary>
            The number of zones outside columns in the section.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_SECTION.xuiZonesOutsideColumnsIds">
            <summary>
            The identifiers for the zones outside columns in the section.
            </summary>
        </member>
        <member name="T:IDRSNET.CIDRSSection">
            <summary>
            The IDRS_SECTION structure defines a section.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSSection.#ctor">
            <summary>
            Default constructor of CIDRSSection.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSSection.Finalize">
            <summary>
            Destructor of CIDRSSection.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSSection.#ctor(IDRSNET.IDRS_SECTION)">
            <summary>
            Class constructor that converts structure IDRS_SECTION to
            class CIDRSSection by copying each fields
            </summary>
            <param name="_struct">set fields based on the values of the structure</param>
        </member>
        <member name="M:IDRSNET.CIDRSSection.Update(IDRSNET.IDRS_SECTION)">
            <summary>
            Update the fields of the the class based on the input structure
            </summary>
            <param name="_struct">update fields based on the values of the structure</param>
        </member>
        <member name="M:IDRSNET.CIDRSSection.ToStruct">
            <summary>
            Converts the class fields to a structure
            </summary>
            <returns>IDRS_SECTION</returns>
        </member>
        <member name="P:IDRSNET.CIDRSSection.HasVerticalLines">
            <summary>
            Flag for the presence of a vertical line between columns.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSSection.Coordinates">
            <summary>
            The coordinates of the section.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSSection.ColumnCount">
            <summary>
            The number of columns in the section.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSSection.ColumnsCoordinates">
            <summary>
            The columns of the section.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSSection.ZonesWithinColumnsCount">
            <summary>
            The number of zones within columns in the section.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSSection.ZonesWithinColumns">
            <summary>
            The definitions of the zones within columns in the section.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSSection.ZonesOutsideColumnsCount">
            <summary>
            The number of zones outside columns in the section.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSSection.ZonesOutsideColumnsIds">
            <summary>
            The identifiers for the zones outside columns in the section.
            </summary>
        </member>
        <member name="T:IDRSNET.CIDRSSetup">
            <summary>
            The CIDRSSetup class manages the iDRS SDK licensing information
            \ingroup module_core
            The class is responsible with the following tasks:
            - <b>license management </b> - handles licenses verification and in-memory storage
            - <b>setup/unload modules </b> - loads and unloads the modules based on the supplied licenses
            The class exposes static functions for license management and it stores all the licenses in internal structures. For each module type there is only one license available.
            During module setup, the following steps are performed in order:
            - license verification
            - module loading
            - extension loading
            If any of the above steps fails, an CIDRSException will be thrown and the process will stop.
            
            Each license object can be updated after it is setup. With every update, all the steps described above will be executed.
            The following code snippet shows how to create a license, enable an extension for it and setup it in iDRS SDK:
            \code
            IDRS::CIDRSLicense aLicense(IDRS_MODULE_PREPRO, IDRS_LICENSE_SOFTWARE, "unlock key");
            aLicense.EnableExtension(IDRS_PREPRO_EXTENSION_ADVANCED_PREPRO, "adv prepro unlock key");
            IDRS::CIDRSSetup::SetupModule(aLicense);
            \endcode
            <see cref="T:IDRSNET.CIDRSLicense"/> 
            <see cref="T:IDRSNET.IDRS_MODULE"/> 
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSSetup.SetupModule(IDRSNET.CIDRSLicense)">
            <summary>
            Setup the supplied CIDRSLicense
            The function checks that the supplied license is valid and loads the necessary resources for the module.
            </summary>
            <param name="argIdrsLicense">The license object contains all the licensing information for a iDRS module.</param>
            <exception>CIDRSException if any error occurs during license verification or module and extension loading.</exception>
        </member>
        <member name="M:IDRSNET.CIDRSSetup.Unload">
            <summary>
            Unload iDRS SDK.
            </summary>
            <returns>IDRS_TRUE if iDRS was unloaded successful.</returns>
            <returns>IDRS_FALSE if iDRS is used and can't be unloaded.</returns>
            <remarks>The objects that keep the modules and extensions binaries in memory are reference counted, so the binaries will be unloaded from memory when all the objects that use them are destroyed</remarks>
        </member>
        <member name="M:IDRSNET.CIDRSSetup.IsModuleReady(IDRSNET.IDRS_MODULE)">
            <summary>
            Tests if the given module is ready.
            </summary>
            <param name="mModuleId">The identifier for the module.</param>
            <returns>IDRS_TRUE if the module is ready.</returns>
            <returns>IDRS_FALSE if the module is not ready.</returns>
            <see cref="T:IDRSNET.IDRS_MODULE"/> for available modules in iDRS SDK
        </member>
        <member name="M:IDRSNET.CIDRSSetup.IsExtensionReady(IDRSNET.IDRS_MODULE,IDRSNET.IDRS_EXTENSION)">
            <summary>
            Tests if the given extension is ready.
            </summary>
            <param name="mModuleId">The identifier for the module.</param>
            <param name="eExtensionId">The identifier for the extension.</param>
            <returns>IDRS_TRUE if the module is ready.</returns>
            <returns>IDRS_FALSE if the module is not ready.</returns>
            <see cref="T:IDRSNET.IDRS_MODULE"/> for available modules in iDRS SDK and their extensions
            <see cref="T:IDRSNET.IDRS_EXTENSION"/> for available extensions in iDRS SDK
        </member>
        <member name="M:IDRSNET.CIDRSSetup.GetLicenseInformation(IDRSNET.IDRS_MODULE,IDRSNET.CIDRSSetupLicenseInformation)">
            <summary>
            Gets the licensing information for a specified module.
            </summary>
            <param name="mModule">Module identifier</param>
            <param name="argSetupLicenseInformation">detailed license information to fill in</param>
            <remarks>
            For custom licenses or server licenses the value in bHasVolumePolicy and bHasRefill will be IDRS_FALSE.
            All the other information (shown below) is irrelevant:
            uiTotalVolume, uiConsumedVolume, tCurrentRefillDate, uiRefillPeriodDays, uiRefillPeriodMonths, uiRefillPeriodYears.
            For Desktop licenses the Refill Policy and Volume Limitation are applicable, and uiTotalVolume, uiConsumedVolume, tCurrentRefillDate,
            uiRefillPeriodDays, uiRefillPeriodMonths, uiRefillPeriodYears will have relevant information.
            For Trial licenses the Refill Policy is not set but Volume Limitation is applicable.
            tCurrentRefillDate, uiRefillPeriodDays, uiRefillPeriodMonths and uiRefillPeriodYears will be zero.
            uiTotalVolume, uiConsumedVolume will contain relevant information.
            </remarks>
            <returns>IDRS_SUCCESS if the license information can be retrieved.</returns>
            <remarks>
            IDRS_WARNING_NOT_RELEVANT will be returned if license is custom or server license.
            And error code otherwise.
            </remarks>
        </member>
        <member name="M:IDRSNET.CIDRSSetup.GetLicenseInformation(IDRSNET.IDRS_MODULE,IDRSNET.IDRS_EXTENSION,IDRSNET.CIDRSSetupLicenseInformation)">
            <summary>
            Gets the licensing information for a specified extension.
            </summary>
            <param name="mModule">Module identifier</param>
            <param name="eExtension">Extension identifier</param>
            <param name="argSetupLicenseInformation">detailed license information to fill in</param>
            <remarks>
            For custom licenses or server licenses the value in bHasVolumePolicy and bHasRefill will be IDRS_FALSE.
            uiTotalVolume, uiConsumedVolume, tCurrentRefillDate, uiRefillPeriodDays, uiRefillPeriodMonths, uiRefillPeriodYears
            will be zero. This information is not relevant.
            For Desktop licenses the Refill Policy and Volume Limitation are applicable, and uiTotalVolume, uiConsumedVolume, tCurrentRefillDate,
            uiRefillPeriodDays, uiRefillPeriodMonths, uiRefillPeriodYears will have relevant information.
            For Trial licenses the Refill Policy is not set but Volume Limitation is applicable.
            tCurrentRefillDate, uiRefillPeriodDays, uiRefillPeriodMonths and uiRefillPeriodYears will be zero (not relevant).
            uiTotalVolume, uiConsumedVolume will contain relevant information.
            </remarks>
            <returns>IDRS_SUCCESS if the license information can be retrieved.</returns>
            <remarks>
            IDRS_WARNING_NOT_RELEVANT will be returned if license is custom or server license.
            And error code otherwise.
            </remarks>
        </member>
        <member name="M:IDRSNET.CIDRSSetup.SetLoggerCallback(IDRSNET.ILogger,IDRSNET.ILogger.eSeverityLevel)">
            <summary>
            Sets the callback object used to log events.
            The object used as a callback object will be called every time iDRS receives a message during an
            operation, of severity level equal or higher than the level provided by user.
            This logger callback is expected to be called for log messages that are not part of sessions
            </summary>
            <remarks>The supplied callback object should be able to handle messages arriving from different threads, possibly at the same time</remarks>
            <remarks>The logger callback class should inherit from ILogger interface</remarks>
            <param name="pCallback">The callback object pointer</param>
            <param name="evLevel">The severity level threshold for which calls to logger callback class should be performed.</param>
        </member>
        <member name="P:IDRSNET.CIDRSSetup.InternalLibraryPath">
            <summary>
            Get/Set the path where the internal libraries are expected to be found.
            iDRS will use this path to load the internal libraries.
            </summary>
            <remarks>This feature is not available on OSX and iOS platforms</remarks>
        </member>
        <member name="P:IDRSNET.CIDRSSetup.IdrsDescription">
            <summary>
            Gets a short description of the iDRS.
            
            </summary>
            
        </member>
        <member name="P:IDRSNET.CIDRSSetup.IdrsRevision">
            <summary>
            Gets the revision of the iDRS.
            
            </summary>
            
        </member>
        <member name="P:IDRSNET.CIDRSSetup.TemporaryFolder">
            <summary>
            Get/Set the temporary folder that will be used by iDRS SDK for storing temporary files and folders.
            </summary>
            <remarks>By default, the iDRS uses the system temporary folder.</remarks>
            <remarks>
            If the platform doesn't have a notion of system-wide temporary folder, with default configuration an exception
            will be thrown whenever a temporary file needs to be created.
            </remarks>
            <remarks>
            Passing NULL value as temporary folder will reset the temporary folder location to system temporary folder, or throw an exception
            if the platform has no notion of system-wide temporary folder.
            </remarks>
            <remarks>
            On platforms with no notion of system-wide temporary folder, an exception will be thrown unless SetTemporaryFolder()
            has been previously called.
            </remarks>
        </member>
        <member name="M:IDRSNET.CIDRSSetup.SetDllImportResolverCallback(System.Runtime.InteropServices.DllImportResolver)">
            <summary>
            To be replaced with actual description in the future.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSSetup.NativeDllSearchPaths">
            <summary>
            Allows an integrator to register custom native libraries search path depending on current OS and architecture.
            </summary>
            <remarks>
            By default, the iDRS will search native libraries in the same folder than the .NET assembly.
            </remarks>
        </member>
        <member name="T:IDRSNET.IDRS_SETUP_LICENSE_INFORMATION">
            <summary>
            Internal Structure detailing license information
            </summary>
        </member>
        <member name="M:IDRSNET.IDRS_SETUP_LICENSE_INFORMATION.#ctor(IDRSNET.CIDRSSetupLicenseInformation)">
            <summary>
            Structure constructor that converts class CIDRSSetupLicenseInformation to
            structure IDRS_SETUP_LICENSE_INFORMATION by copying each fields
            </summary>
            <param name="_class">Class to be converted</param>
        </member>
        <member name="F:IDRSNET.IDRS_SETUP_LICENSE_INFORMATION.ltLicenseType">
            <summary>
            License type 
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_SETUP_LICENSE_INFORMATION.bHasVolumePolicy">
            <summary>
            Boolean flag that will be set to IDRS_TRUE if there's a volume policy in the license, IDRS_FALSE otherwise 
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_SETUP_LICENSE_INFORMATION.uiTotalVolume">
            <summary>
            Total available usage volume 
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_SETUP_LICENSE_INFORMATION.uiConsumedVolume">
            <summary>
            Consumed volume 
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_SETUP_LICENSE_INFORMATION.bRefillPolicy">
            <summary>
            Boolean flag indicating whether there's a refill policy in place for the license 
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_SETUP_LICENSE_INFORMATION.tCurrentRefillDate">
            <summary>
            Next date when the license will be refilled, given the refill period (valid only if a refill policy is set for the module license) 
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_SETUP_LICENSE_INFORMATION.uiRefillPeriodDays">
            <summary>
            Number of days after which the license will be refilled (valid only if a refill policy is set for the module license) 
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_SETUP_LICENSE_INFORMATION.uiRefillPeriodMonths">
            <summary>
            Number of months after which the license will be refilled (valid only if a refill policy is set for the module license) 
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_SETUP_LICENSE_INFORMATION.uiRefillPeriodYears">
            <summary>
            Number of years after which the license will be refilled (valid only if a refill policy is set for the module license) 
            </summary>
        </member>
        <member name="T:IDRSNET.CIDRSSetupLicenseInformation">
            <summary>
            Public Class detailing license information
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSSetupLicenseInformation.#ctor">
            <summary>
            Default constructor of CIDRSSetupLicenseInformation.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSSetupLicenseInformation.Finalize">
            <summary>
            Destructor of CIDRSSetupLicenseInformation.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSSetupLicenseInformation.#ctor(IDRSNET.IDRS_SETUP_LICENSE_INFORMATION)">
            <summary>
            Class constructor that converts structure IDRS_SETUP_LICENSE_INFORMATION to
            class CIDRSSetupLicenseInformation by copying each fields
            </summary>
            <param name="_struct">set fields based on the values of the structure</param>
        </member>
        <member name="M:IDRSNET.CIDRSSetupLicenseInformation.Update(IDRSNET.IDRS_SETUP_LICENSE_INFORMATION)">
            <summary>
            Update the fields of the the class based on the input structure
            </summary>
            <param name="_struct">update fields based on the values of the structure</param>
        </member>
        <member name="M:IDRSNET.CIDRSSetupLicenseInformation.ToStruct">
            <summary>
            Converts the class fields to a structure
            </summary>
            <returns>IDRS_SETUP_LICENSE_INFORMATION</returns>
        </member>
        <member name="P:IDRSNET.CIDRSSetupLicenseInformation.LicenseType">
            <summary>
            License type 
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSSetupLicenseInformation.HasVolumePolicy">
            <summary>
            Boolean flag that will be set to IDRS_TRUE if there's a volume policy in the license, IDRS_FALSE otherwise 
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSSetupLicenseInformation.TotalVolume">
            <summary>
            Total available usage volume 
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSSetupLicenseInformation.ConsumedVolume">
            <summary>
            Consumed volume 
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSSetupLicenseInformation.RefillPolicy">
            <summary>
            Boolean flag indicating whether there's a refill policy in place for the license 
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSSetupLicenseInformation.CurrentRefillDate">
            <summary>
            Next date when the license will be refilled, given the refill period (valid only if a refill policy is set for the module license) 
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSSetupLicenseInformation.RefillPeriodDays">
            <summary>
            Number of days after which the license will be refilled (valid only if a refill policy is set for the module license) 
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSSetupLicenseInformation.RefillPeriodMonths">
            <summary>
            Number of months after which the license will be refilled (valid only if a refill policy is set for the module license) 
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSSetupLicenseInformation.RefillPeriodYears">
            <summary>
            Number of years after which the license will be refilled (valid only if a refill policy is set for the module license) 
            </summary>
        </member>
        <member name="T:IDRSNET.IDRS_SKEW_ANGLE">
            <summary>
            Internal Structure that contains the data for a skew angle.
            \ingroup module_prepro
            </summary>
        </member>
        <member name="M:IDRSNET.IDRS_SKEW_ANGLE.#ctor(IDRSNET.CIDRSSkewAngle)">
            <summary>
            Structure constructor that converts class CIDRSSkewAngle to
            structure IDRS_SKEW_ANGLE by copying each fields
            </summary>
            <param name="_class">Class to be converted</param>
        </member>
        <member name="F:IDRSNET.IDRS_SKEW_ANGLE.dAngle">
            <summary>
            ! The skew angle (degrees)
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_SKEW_ANGLE.iX">
            <summary>
            ! For internal use
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_SKEW_ANGLE.iY">
            <summary>
            ! For internal use
            </summary>
        </member>
        <member name="T:IDRSNET.CIDRSSkewAngle">
            <summary>
            Public Class that contains the data for a skew angle.
            \ingroup module_prepro
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSSkewAngle.#ctor">
            <summary>
            Default constructor of CIDRSSkewAngle.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSSkewAngle.Finalize">
            <summary>
            Destructor of CIDRSSkewAngle.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSSkewAngle.#ctor(IDRSNET.IDRS_SKEW_ANGLE)">
            <summary>
            Class constructor that converts structure IDRS_SKEW_ANGLE to
            class CIDRSSkewAngle by copying each fields
            </summary>
            <param name="_struct">set fields based on the values of the structure</param>
        </member>
        <member name="M:IDRSNET.CIDRSSkewAngle.Update(IDRSNET.IDRS_SKEW_ANGLE)">
            <summary>
            Update the fields of the the class based on the input structure
            </summary>
            <param name="_struct">update fields based on the values of the structure</param>
        </member>
        <member name="M:IDRSNET.CIDRSSkewAngle.ToStruct">
            <summary>
            Converts the class fields to a structure
            </summary>
            <returns>IDRS_SKEW_ANGLE</returns>
        </member>
        <member name="P:IDRSNET.CIDRSSkewAngle.Angle">
            <summary>
            ! The skew angle (degrees)
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSSkewAngle.X">
            <summary>
            ! For internal use
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSSkewAngle.Y">
            <summary>
            ! For internal use
            </summary>
        </member>
        <member name="T:IDRSNET.IDRS_TEXT_DISTANCES">
            <summary>
            ! Internal Structure containing the distances for a page floating zone
            </summary>
        </member>
        <member name="M:IDRSNET.IDRS_TEXT_DISTANCES.#ctor(IDRSNET.CIDRSTextDistances)">
            <summary>
            Structure constructor that converts class CIDRSTextDistances to
            structure IDRS_TEXT_DISTANCES by copying each fields
            </summary>
            <param name="_class">Class to be converted</param>
        </member>
        <member name="F:IDRSNET.IDRS_TEXT_DISTANCES.iDistanceTop">
            <summary>
            ! Distance top
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_TEXT_DISTANCES.iDistanceLeft">
            <summary>
            ! Distance left
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_TEXT_DISTANCES.iDistanceBottom">
            <summary>
            ! Distance bottom
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_TEXT_DISTANCES.iDistanceRight">
            <summary>
            ! Distance right
            </summary>
        </member>
        <member name="T:IDRSNET.CIDRSTextDistances">
            <summary>
            ! Public Class containing the distances for a page floating zone
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSTextDistances.#ctor">
            <summary>
            Default constructor of CIDRSTextDistances.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSTextDistances.Finalize">
            <summary>
            Destructor of CIDRSTextDistances.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSTextDistances.#ctor(IDRSNET.IDRS_TEXT_DISTANCES)">
            <summary>
            Class constructor that converts structure IDRS_TEXT_DISTANCES to
            class CIDRSTextDistances by copying each fields
            </summary>
            <param name="_struct">set fields based on the values of the structure</param>
        </member>
        <member name="M:IDRSNET.CIDRSTextDistances.Update(IDRSNET.IDRS_TEXT_DISTANCES)">
            <summary>
            Update the fields of the the class based on the input structure
            </summary>
            <param name="_struct">update fields based on the values of the structure</param>
        </member>
        <member name="M:IDRSNET.CIDRSTextDistances.ToStruct">
            <summary>
            Converts the class fields to a structure
            </summary>
            <returns>IDRS_TEXT_DISTANCES</returns>
        </member>
        <member name="P:IDRSNET.CIDRSTextDistances.DistanceTop">
            <summary>
            ! Distance top
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSTextDistances.DistanceLeft">
            <summary>
            ! Distance left
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSTextDistances.DistanceBottom">
            <summary>
            ! Distance bottom
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSTextDistances.DistanceRight">
            <summary>
            ! Distance right
            </summary>
        </member>
        <member name="T:IDRSNET.IDRS_TYPEFACE">
            <summary>
            The IDRS_TYPEFACE structure defines a typeface.
            </summary>
        </member>
        <member name="M:IDRSNET.IDRS_TYPEFACE.#ctor(IDRSNET.CIDRSTypeface)">
            <summary>
            Structure constructor that converts class CIDRSTypeface to
            structure IDRS_TYPEFACE by copying each fields
            </summary>
            <param name="_class">Class to be converted</param>
        </member>
        <member name="F:IDRSNET.IDRS_TYPEFACE.strFamilyName">
            <summary>
            The typeface family name.
            See <a href="page8.html">page8</a> Font names supported by iDRS.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_TYPEFACE.strFontName">
            <summary>
            The typeface font name.
            See <a href="page8.html">page8</a> Font names supported by iDRS.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_TYPEFACE.ui32Attributes">
            <summary>
            The typeface attributes.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_TYPEFACE.bIsAsian">
            <summary>
            The asian flag.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_TYPEFACE.ucFamilyType">
            <summary>
            The typeface family type.
            iDRS typeface family types.
            </summary>
        </member>
        <member name="T:IDRSNET.CIDRSTypeface">
            <summary>
            The IDRS_TYPEFACE structure defines a typeface.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSTypeface.#ctor">
            <summary>
            Default constructor of CIDRSTypeface.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSTypeface.Finalize">
            <summary>
            Destructor of CIDRSTypeface.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSTypeface.#ctor(IDRSNET.IDRS_TYPEFACE)">
            <summary>
            Class constructor that converts structure IDRS_TYPEFACE to
            class CIDRSTypeface by copying each fields
            </summary>
            <param name="_struct">set fields based on the values of the structure</param>
        </member>
        <member name="M:IDRSNET.CIDRSTypeface.Update(IDRSNET.IDRS_TYPEFACE)">
            <summary>
            Update the fields of the the class based on the input structure
            </summary>
            <param name="_struct">update fields based on the values of the structure</param>
        </member>
        <member name="M:IDRSNET.CIDRSTypeface.ToStruct">
            <summary>
            Converts the class fields to a structure
            </summary>
            <returns>IDRS_TYPEFACE</returns>
        </member>
        <member name="P:IDRSNET.CIDRSTypeface.FamilyName">
            <summary>
            The typeface family name.
            See <a href="page8.html">page8</a> Font names supported by iDRS.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSTypeface.FontName">
            <summary>
            The typeface font name.
            See <a href="page8.html">page8</a> Font names supported by iDRS.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSTypeface.Attributes">
            <summary>
            The typeface attributes.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSTypeface.IsAsian">
            <summary>
            The asian flag.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSTypeface.FamilyType">
            <summary>
            The typeface family type.
            iDRS typeface family types.
            </summary>
        </member>
        <member name="T:IDRSNET.IDRS_VECTOR">
            <summary>
            Internal Structure that defines the coordinates of an horizontal vector.
            </summary>
        </member>
        <member name="M:IDRSNET.IDRS_VECTOR.#ctor(IDRSNET.CIDRSVector)">
            <summary>
            Structure constructor that converts class CIDRSVector to
            structure IDRS_VECTOR by copying each fields
            </summary>
            <param name="_class">Class to be converted</param>
        </member>
        <member name="F:IDRSNET.IDRS_VECTOR.uiX0">
            <summary>
            X0. 
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_VECTOR.uiX1">
            <summary>
            X1. 
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_VECTOR.uiY">
            <summary>
            Y. 
            </summary>
        </member>
        <member name="T:IDRSNET.CIDRSVector">
            <summary>
            Public Class that defines the coordinates of an horizontal vector.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSVector.#ctor">
            <summary>
            Default constructor of CIDRSVector.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSVector.Finalize">
            <summary>
            Destructor of CIDRSVector.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSVector.#ctor(IDRSNET.IDRS_VECTOR)">
            <summary>
            Class constructor that converts structure IDRS_VECTOR to
            class CIDRSVector by copying each fields
            </summary>
            <param name="_struct">set fields based on the values of the structure</param>
        </member>
        <member name="M:IDRSNET.CIDRSVector.Update(IDRSNET.IDRS_VECTOR)">
            <summary>
            Update the fields of the the class based on the input structure
            </summary>
            <param name="_struct">update fields based on the values of the structure</param>
        </member>
        <member name="M:IDRSNET.CIDRSVector.ToStruct">
            <summary>
            Converts the class fields to a structure
            </summary>
            <returns>IDRS_VECTOR</returns>
        </member>
        <member name="M:IDRSNET.CIDRSVector.#ctor(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Creates a CIDRSVector instance
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSVector.X0">
            <summary>
            X0. 
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSVector.X1">
            <summary>
            X1. 
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSVector.Y">
            <summary>
            Y. 
            </summary>
        </member>
        <member name="T:IDRSNET.IDRS_ZONES_IN_COLUMN">
            <summary>
            The IDRS_ZONES_IN_COLUMN structure defines a link between some zones and a column.
            </summary>
        </member>
        <member name="M:IDRSNET.IDRS_ZONES_IN_COLUMN.#ctor(IDRSNET.CIDRSZonesInColumn)">
            <summary>
            Structure constructor that converts class CIDRSZonesInColumn to
            structure IDRS_ZONES_IN_COLUMN by copying each fields
            </summary>
            <param name="_class">Class to be converted</param>
        </member>
        <member name="F:IDRSNET.IDRS_ZONES_IN_COLUMN.uiColumnId">
            <summary>
            The identifier for the column.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ZONES_IN_COLUMN.uiZonesCount">
            <summary>
            The number of zones in the section.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_ZONES_IN_COLUMN.xuiZonesIds">
            <summary>
            The identifier for the zones of the section.
            </summary>
        </member>
        <member name="T:IDRSNET.CIDRSZonesInColumn">
            <summary>
            The IDRS_ZONES_IN_COLUMN structure defines a link between some zones and a column.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSZonesInColumn.#ctor">
            <summary>
            Default constructor of CIDRSZonesInColumn.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSZonesInColumn.Finalize">
            <summary>
            Destructor of CIDRSZonesInColumn.
            </summary>
        </member>
        <member name="M:IDRSNET.CIDRSZonesInColumn.#ctor(IDRSNET.IDRS_ZONES_IN_COLUMN)">
            <summary>
            Class constructor that converts structure IDRS_ZONES_IN_COLUMN to
            class CIDRSZonesInColumn by copying each fields
            </summary>
            <param name="_struct">set fields based on the values of the structure</param>
        </member>
        <member name="M:IDRSNET.CIDRSZonesInColumn.Update(IDRSNET.IDRS_ZONES_IN_COLUMN)">
            <summary>
            Update the fields of the the class based on the input structure
            </summary>
            <param name="_struct">update fields based on the values of the structure</param>
        </member>
        <member name="M:IDRSNET.CIDRSZonesInColumn.ToStruct">
            <summary>
            Converts the class fields to a structure
            </summary>
            <returns>IDRS_ZONES_IN_COLUMN</returns>
        </member>
        <member name="P:IDRSNET.CIDRSZonesInColumn.ColumnId">
            <summary>
            The identifier for the column.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSZonesInColumn.ZonesCount">
            <summary>
            The number of zones in the section.
            </summary>
        </member>
        <member name="P:IDRSNET.CIDRSZonesInColumn.ZonesIds">
            <summary>
            The identifier for the zones of the section.
            </summary>
        </member>
        <member name="T:IDRSNET.CImage">
            <summary>
            The CImage class manages images for iDRS.
            \ingroup module_core module_image_file
            An image is a buffer of pixels and some characteristics such as width, height, resolution.
            The class CImage offers a set of convenient methods for loading, saving and manipulating image pixels.
            Internally the class stores the data in uncompressed format.
            <see cref="T:IDRSNET.CImageProperties.ColorMode"/> for color modes
            </summary>
        </member>
        <member name="M:IDRSNET.CImage.#ctor(IDRSNET.CIDRS)">
            <summary>
            Create creates an empty image.
            </summary>
            <param name="argIDRS">- CIDRS handle object</param>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CImage.#ctor(IDRSNET.CIDRS,System.UInt32,System.UInt32,IDRSNET.CImageProperties.ColorMode,System.UInt32)">
            <summary>
            Create creates an image buffer with the given characteristics.
            </summary>
            <pre>uiWidth != 0 &amp;&amp; uiHeight != 0</pre>
            <pre>colorMode == BLACK_AND_WHITE || itImgType == GREYSCALE || itImgType == COLOR</pre>
            <param name="argIDRS">- CIDRS handle object</param>
            <param name="uiWidth">The width in pixels of the image.</param>
            <param name="uiHeight">The height in pixels of the image.</param>
            <param name="colorMode">The image color mode.</param>
            <param name="uiResolution">The resolution of the image.</param>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CImage.#ctor(IDRSNET.CIDRS,System.String,System.UInt32)">
            <summary>
            Creates an image and initializes the internal buffer with data from the specified file
            </summary>
            <param name="argIDRS">- CIDRS handle object</param>
            <param name="strFileName">The name of the input file.</param>
            <param name="uiImageIndex">The 0 based index of the image to load from the provided file</param>
            <remarks>Please consult the documentation for the image types supported by iDRS SDK.</remarks>
            <remarks>
            iDRS default image plugin will throw an exception if uiImageIndex is different than 0 for
            non-multipage formats (any other than TIFF and PDF).
            <see cref="F:IDRSNET.IDRS_MODULE.IDRS_MODULE_IMAGE_FILE"/> 
            </remarks>
        </member>
        <member name="M:IDRSNET.CImage.#ctor(IDRSNET.CIDRS,System.IO.Stream,System.UInt32)">
            <summary>
            Creates an image and initializes the internal buffer with data from the supplied stream
            </summary>
            <param name="argIDRS">- CIDRS handle object</param>
            <param name="argInputStream">The input stream</param>
            <param name="uiImageIndex">The 0 based index of the image to load from the provided file</param>
            <remarks>Please consult the documentation for the image types supported by iDRS SDK.</remarks>
            <remarks>
            iDRS default image plugin will throw an exception if uiImageIndex is different than 0 for
            non-multipage formats (any other than TIFF and PDF).
            </remarks>
            <remarks>
            The provided stream must contain one file.
            <see cref="F:IDRSNET.IDRS_MODULE.IDRS_MODULE_IMAGE_FILE"/> 
            </remarks>
        </member>
        <member name="M:IDRSNET.CImage.#ctor(IDRSNET.CIDRS,System.String,IDRSNET.CImageLoadOptions)">
            <summary>
            Creates an image and initializes the internal buffer with data from the specified file
            </summary>
            <param name="argIDRS">- CIDRS handle object</param>
            <param name="strFileName">The name of the input file.</param>
            <param name="argImageLoadOptions">a reference to a CImageLoadOptions object.</param>
            <see cref="F:IDRSNET.IDRS_MODULE.IDRS_MODULE_IMAGE_FILE"/> 
        </member>
        <member name="M:IDRSNET.CImage.#ctor(IDRSNET.CIDRS,System.IO.Stream,IDRSNET.CImageLoadOptions)">
            <summary>
            Creates an image and initializes the internal buffer with data from the specified file
            </summary>
            <param name="argIDRS">- CIDRS handle object</param>
            <param name="argInputStream">The input stream</param>
            <param name="argImageLoadOptions">a reference to a CImageLoadOptions object.</param>
            <remarks>
            The provided stream must contain one file.
            <see cref="F:IDRSNET.IDRS_MODULE.IDRS_MODULE_IMAGE_FILE"/> 
            </remarks>
        </member>
        <member name="M:IDRSNET.CImage.#ctor(IDRSNET.CImage)">
            <summary>
            Creates an image and initializes it with the content of the supplied image parameter
            </summary>
            <param name="argImage">- the source image that will be copied to the newly created image</param>
        </member>
        <member name="M:IDRSNET.CImage.Finalize">
            <summary>
            Destructor of CImage.
            </summary>
        </member>
        <member name="M:IDRSNET.CImage.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CImage.GetPointer">
            <summary>
            Internal virtual  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CImage.SetPointer(System.IntPtr)">
            <summary>
            Internal virtual  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CImage object</param>
        </member>
        <member name="M:IDRSNET.CImage.GetPageCount(IDRSNET.CIDRS,System.String)">
            <summary>
            Retrieves the page count for multiple page documents
            This function can be used in all page formats. Multiple page formats ( TIFF, PDF )
            and single page formats. For single page formats the page count will be 1.
            IMAGE_FILE module is required to use an image as an input, and IDRS_FILE_EXTENSION_PDF
            is required for pdf file input. Function will first check if all required modules are enabled
            and throw an exception in any different case
            </summary>
            <param name="argIDRS">- CIDRS handle object</param>
            <param name="strFileName">The name of the input file.</param>
            <returns>The number of pages of the document.</returns>
        </member>
        <member name="M:IDRSNET.CImage.GetPageCount(IDRSNET.CIDRS,System.IO.Stream)">
            <summary>
            Retrieves the page count for multiple page documents
            This function can be used in all page formats. Multiple page formats ( TIFF, PDF )
            and single page formats. For single page formats the page count will be 1.
            IMAGE_FILE module is required to use an image as an input, and IDRS_FILE_EXTENSION_PDF
            is required for pdf file input. Function will first check if all required modules are enabled
            and throw an exception in any different case
            </summary>
            <param name="argIDRS">- CIDRS handle object</param>
            <param name="argInputStream">The input stream object</param>
            <returns>The number of pages of the document.</returns>
        </member>
        <member name="M:IDRSNET.CImage.GetPageCount(IDRSNET.CIDRS,System.String,IDRSNET.IBaseImagePlugin)">
            <summary>
            Retrieves the page count for multiple page documents
            This function can be used in all page formats. Multiple page formats ( TIFF, PDF )
            and single page formats. For single page formats the page count will be 1.
            IMAGE_FILE module is required to use an image as an input, and IDRS_FILE_EXTENSION_PDF
            is required for pdf file input. Function will first check if all required modules are enabled
            and throw an exception in any different case
            </summary>
            <param name="argIDRS">- CIDRS handle object</param>
            <param name="strFileName">The name of the input file.</param>
            <param name="argImagePlugin">The image plugin to use for loading</param>
            <returns>The number of pages of the document.</returns>
        </member>
        <member name="M:IDRSNET.CImage.GetPageCount(IDRSNET.CIDRS,System.IO.Stream,IDRSNET.IBaseImagePlugin)">
            <summary>
            Retrieves the page count for multiple page documents
            This function can be used in all page formats. Multiple page formats ( TIFF, PDF )
            and single page formats. For single page formats the page count will be 1.
            IMAGE_FILE module is required to use an image as an input, and IDRS_FILE_EXTENSION_PDF
            is required for pdf file input. Function will first check if all required modules are enabled
            and throw an exception in any different case
            </summary>
            <param name="argIDRS">- CIDRS handle object</param>
            <param name="argInputStream">The input stream</param>
            <param name="argImagePlugin">The image plugin to use for loading</param>
            <returns>The number of pages of the document.</returns>
        </member>
        <member name="M:IDRSNET.CImage.GetPageCount(IDRSNET.CIDRS,System.String,IDRSNET.CImageLoadOptions)">
            <summary>
            Retrieves the page count for multiple page documents
            This function can be used in all page formats. Multiple page formats ( TIFF, PDF )
            and single page formats. For single page formats the page count will be 1.
            IMAGE_FILE module is required to use an image as an input, and IDRS_FILE_EXTENSION_PDF
            is required for pdf file input. Function will first check if all required modules are enabled
            and throw an exception in any different case
            </summary>
            <param name="argIDRS">- CIDRS handle object</param>
            <param name="strFileName">The name of the input file.</param>
            <param name="argLoadOptions">The image load options</param>
            <returns>The number of pages of the document.</returns>
        </member>
        <member name="M:IDRSNET.CImage.GetPageCount(IDRSNET.CIDRS,System.IO.Stream,IDRSNET.CImageLoadOptions)">
            <summary>
            Retrieves the page count for multiple page documents
            This function can be used in all page formats. Multiple page formats ( TIFF, PDF )
            and single page formats. For single page formats the page count will be 1.
            IMAGE_FILE module is required to use an image as an input, and IDRS_FILE_EXTENSION_PDF
            is required for pdf file input. Function will first check if all required modules are enabled
            and throw an exception in any different case
            </summary>
            <param name="argIDRS">- CIDRS handle object</param>
            <param name="argInputStream">The input stream</param>
            <param name="argLoadOptions">The image load options</param>
            <returns>The number of pages of the document.</returns>
        </member>
        <member name="M:IDRSNET.CImage.CreateBitmap(System.UInt32,System.UInt32,IDRSNET.CImageProperties.ColorMode,System.UInt32)">
            <summary>
            CreateBitmap modifies the current image buffer to fit to the specified characteristics.
            </summary>
            <pre>! IsNull ()</pre>
            <pre>uiWidth != 0 &amp;&amp; uiHeight != 0</pre>
            <pre>itImgType == BLACK_AND_WHITE || itImgType == GREYSCALE || itImgType == COLOR</pre>
            <param name="uiWidth">The width in pixels of the image.</param>
            <param name="uiHeight">The height in pixels of the image.</param>
            <param name="colorMode">The color mode</param>
            <param name="uiResolution">The resolution of the image.</param>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CImage.CreateBitmap(System.UInt32,System.UInt32,IDRSNET.CImageProperties.ColorMode,System.UInt32,IDRSNET.ILineReader)">
            <summary>
            CreateBitmap modifies the current image buffer to meet the characteristics and sets its lines using the
            given line reader.
            </summary>
            <pre>! IsNull ()</pre>
            <pre>uiWidth != 0 &amp;&amp; uiHeight != 0</pre>
            <param name="uiWidth">The width in pixels of the image.</param>
            <param name="uiHeight">The height in pixels of the image.</param>
            <param name="colorMode">The color mode</param>
            <param name="uiResolution">The resolution of the image.</param>
            <param name="lrLineReader">The object that provides the lines of the image.</param>
            <see cref="T:IDRSNET.ILineReader"/> 
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CImage.Clone">
            <summary>
            Clone the current image.
            </summary>
            <pre>! IsNull ()</pre>
            <returns>The cloned image.</returns>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CImage.Load(System.String,System.UInt32)">
            <summary>
            Load loads an image from a file.
            </summary>
            <pre>! IsNull ()</pre>
            <param name="strFileName">The name of the input file.</param>
            <param name="uiImageIndex">The 0 based index of the image to load from the provided file</param>
            <remarks>
            This function requires the imaging module to be enabled in order to load a file.
            For more information about imaging modules and available image types, please consult @ref page9
            </remarks>
            <remarks>
            iDRS default image plugin will throw an exception if uiImageIndex is different than 0 for
            non-multipage formats (any other than TIFF and PDF).
            </remarks>
        </member>
        <member name="M:IDRSNET.CImage.Load(System.IO.Stream,System.UInt32)">
            <summary>
            Load loads an image from a stream.
            </summary>
            <pre>! IsNull ()</pre>
            <param name="argInputStream">The stream containing the image to be loaded</param>
            <param name="uiImageIndex">The 0 based index of the image to load from the provided file</param>
            <remarks>
            This function requires the imaging module to be enabled in order to load a file.
            For more information about imaging modules and available image types, please consult @ref page9
            </remarks>
            <remarks>
            iDRS default image plugin will throw an exception if uiImageIndex is different than 0 for
            non-multipage formats (any other than TIFF and PDF).
            </remarks>
            <remarks>
            The provided stream must contain one file.
            
            </remarks>
        </member>
        <member name="M:IDRSNET.CImage.Load(System.String,IDRSNET.IBaseImagePlugin,System.UInt32)">
            <summary>
            Load loads an image from a file.
            </summary>
            <pre>! IsNull ()</pre>
            <param name="strFileName">The name of the input file.</param>
            <param name="argImagePlugin">The image plugin to use for loading</param>
            <param name="uiImageIndex">The 0 based index of the image to load from the provided file</param>
            <remarks>If the specified image plugin is not able to load the specified file, an exception will be thrown</remarks>
        </member>
        <member name="M:IDRSNET.CImage.Load(System.IO.Stream,IDRSNET.IBaseImagePlugin,System.UInt32)">
            <summary>
            Load loads an image from a stream.
            </summary>
            <pre>! IsNull ()</pre>
            <param name="argInputStream">The stream containing the image to be loaded.</param>
            <param name="argImagePlugin">The image plugin to use for loading</param>
            <param name="uiImageIndex">The 0 based index of the image to load from the provided file</param>
            <remarks>If the specified image plugin is not able to load the specified file, an exception will be thrown</remarks>
        </member>
        <member name="M:IDRSNET.CImage.Load(System.String,IDRSNET.CImageLoadOptions)">
            <summary>
            Load loads an image from a file, using options for loading.
            </summary>
            <pre>! IsNull ()</pre>
            <param name="strFileName">The name of the input file.</param>
            <param name="argImageLoadOptions">a reference to a CImageLoadOptions object.</param>
            <remarks>
            This function requires the imaging module to be enabled in order to load a file.
            For more information about imaging modules and available image types, please consult @ref page9
            </remarks>
        </member>
        <member name="M:IDRSNET.CImage.Load(System.IO.Stream,IDRSNET.CImageLoadOptions)">
            <summary>
            Load loads an image from a stream, using options for loading.
            </summary>
            <pre>! IsNull ()</pre>
            <param name="argInputStream">The stream containing the image to be loaded.</param>
            <param name="argImageLoadOptions">a reference to a CImageLoadOptions object.</param>
            <remarks>The provided stream must contain one file.</remarks>
            <remarks>
            This function requires the imaging module to be enabled in order to load a file.
            For more information about imaging modules and available image types, please consult @ref page9
            </remarks>
        </member>
        <member name="M:IDRSNET.CImage.Save(System.String,IDRSNET.CImageFileFormat.FileFormat,IDRSNET.CImageOptions)">
            <summary>
            Save saves an image to a file.
            </summary>
            <pre>! IsNull ()</pre>
            <pre>! argImageOptions.IsNull ()</pre>
            <param name="strFileName">The name of the output file.</param>
            <param name="ffFileFormat">The file format.</param>
            <param name="argImageOptions">The file format options.</param>
            <remarks>
            This function requires the imaging module to be enabled in order to save a file.
            For more information about imaging modules and available image types, please consult @ref page9
            </remarks>
        </member>
        <member name="M:IDRSNET.CImage.Save(System.String,IDRSNET.CImageFileFormat.FileFormat)">
            <summary>
            Save saves an image to a file using the default params for the specified format
            During save the default parameters will be used:
            - TIFF black &amp; white image: CImageOptionsTiff::IDRS_CCITT4 compression
            - TIFF greyscale &amp; color image: CImageOptionsTiff::IDRS_PACKBITS compression
            - JPEG, JBIG2, JPEG2000: default jpeg compression level IDRS_DFLT_DOCUMENT_OUTPUT_IMG_JPEG_QUALITY
            - PNG: Standard png mode
            - BMP: No compression
            - PDF: append to existing files, compression quality factor IDRS_DFLT_DOCUMENT_OUTPUT_IMG_JPEG_QUALITY
            </summary>
            <pre>! IsNull ()</pre>
            <param name="strFileName">The name of the output file.</param>
            <param name="ffFileFormat">The file format.</param>
            <remarks>
            This function requires the imaging module to be enabled in order to save a file.
            For more information about imaging modules and available image types, please consult @ref page9
            </remarks>
        </member>
        <member name="M:IDRSNET.CImage.Save(System.String,IDRSNET.IBaseImagePlugin,IDRSNET.CImageFileFormat.FileFormat,IDRSNET.CImageOptions)">
            <summary>
            Saves an image to a file using the supplied image plugin
            In case the supplied image plugin does not know how to save the indicated file format,
            the function with throw IDRS_ERROR_FILE_FORMAT
            </summary>
            <pre>! IsNull ()</pre>
            <pre>! argImageOptions.IsNull ()</pre>
            <param name="strFileName">The name of the output file.</param>
            <param name="argImagePlugin">The image plugin to use.</param>
            <param name="ffFileFormat">The file format</param>
            <param name="argImageOptions">The file format options.</param>
        </member>
        <member name="M:IDRSNET.CImage.Save(System.String,IDRSNET.IBaseImagePlugin,IDRSNET.CImageFileFormat.FileFormat)">
            <summary>
            Saves an image to a file using the supplied image plugin using the default params for the specified format
            During save the default parameters will be used:
            - TIFF black &amp; white image: CImageOptionsTiff::IDRS_CCITT4 compression
            - TIFF greyscale &amp; color image: CImageOptionsTiff::IDRS_PACKBITS compression
            - JPEG, JBIG2, JPEG2000: default jpeg compression level IDRS_DFLT_DOCUMENT_OUTPUT_IMG_JPEG_QUALITY
            - PNG: Standard png mode
            - BMP: No compression
            - PDF: append to existing files, compression quality factor IDRS_DFLT_DOCUMENT_OUTPUT_IMG_JPEG_QUALITY
            In case the supplied image plugin does not know how to save the indicated file format,
            the function with throw IDRS_ERROR_FILE_FORMAT
            </summary>
            <pre>! IsNull ()</pre>
            <param name="strFileName">The name of the output file.</param>
            <param name="argImagePlugin">The image plugin to use.</param>
            <param name="ffFileFormat">The file format</param>
        </member>
        <member name="M:IDRSNET.CImage.Save(System.IO.Stream,IDRSNET.CImageFileFormat.FileFormat,IDRSNET.CImageOptions)">
            <summary>
            Saves an image to a stream
            </summary>
            <pre>! IsNull ()</pre>
            <pre>! argImageOptions.IsNull ()</pre>
            <param name="objStream">The Stream object where to write the compressed image</param>
            <param name="ffFileFormat">The file format</param>
            <param name="argImageOptions">The file format options.</param>
            <remarks>
            This function requires the imaging module to be enabled in order to save a file.
            For more information about imaging modules and available image types, please consult @ref page9
            </remarks>
        </member>
        <member name="M:IDRSNET.CImage.Save(System.IO.Stream,IDRSNET.CImageFileFormat.FileFormat)">
            <summary>
            Saves an image to a stream using the default params for the specified format
            During save the default parameters will be used:
            - TIFF black &amp; white image: CImageOptionsTiff::IDRS_CCITT4 compression
            - TIFF greyscale &amp; color image: CImageOptionsTiff::IDRS_PACKBITS compression
            - JPEG, JBIG2, JPEG2000: default jpeg compression level IDRS_DFLT_DOCUMENT_OUTPUT_IMG_JPEG_QUALITY
            - PNG: Standard png mode
            - BMP: No compression
            - PDF: append to existing files, compression quality factor IDRS_DFLT_DOCUMENT_OUTPUT_IMG_JPEG_QUALITY
            </summary>
            <pre>! IsNull ()</pre>
            <param name="objStream">The Stream object where to write the compressed image</param>
            <param name="ffFileFormat">The file format</param>
            <remarks>
            This function requires the imaging module to be enabled in order to save a file.
            For more information about imaging modules and available image types, please consult @ref page9
            </remarks>
        </member>
        <member name="M:IDRSNET.CImage.Save(System.IO.Stream,IDRSNET.IBaseImagePlugin,IDRSNET.CImageFileFormat.FileFormat,IDRSNET.CImageOptions)">
            <summary>
            Saves an image to a stream using the supplied image plugin
            In case the supplied image plugin does not know how to save the indicated file format,
            the function with throw IDRS_ERROR_FILE_FORMAT
            </summary>
            <pre>! IsNull ()</pre>
            <pre>! argImageOptions.IsNull ()</pre>
            <param name="objStream">The Stream object where to write the compressed image</param>
            <param name="argImagePlugin">The image plugin to use.</param>
            <param name="ffFileFormat">The file format</param>
            <param name="argImageOptions">The file format options.</param>
        </member>
        <member name="M:IDRSNET.CImage.Save(System.IO.Stream,IDRSNET.IBaseImagePlugin,IDRSNET.CImageFileFormat.FileFormat)">
            <summary>
            Saves an image to a stream using the supplied image plugin using the default params for the specified format
            During save the default parameters will be used:
            - TIFF black &amp; white image: CImageOptionsTiff::IDRS_CCITT4 compression
            - TIFF greyscale &amp; color image: CImageOptionsTiff::IDRS_PACKBITS compression
            - JPEG, JBIG2, JPEG2000: default jpeg compression level IDRS_DFLT_DOCUMENT_OUTPUT_IMG_JPEG_QUALITY
            - PNG: Standard png mode
            - BMP: No compression
            - PDF: append to existing files, compression quality factor IDRS_DFLT_DOCUMENT_OUTPUT_IMG_JPEG_QUALITY
            In case the supplied image plugin does not know how to save the indicated file format,
            the function with throw IDRS_ERROR_FILE_FORMAT
            </summary>
            <pre>! IsNull ()</pre>
            <param name="objStream">The Stream object where to write the compressed image</param>
            <param name="argImagePlugin">The image plugin to use.</param>
            <param name="ffFileFormat">The file format</param>
        </member>
        <member name="M:IDRSNET.CImage.GetProperties(System.UInt32@,System.UInt32@,IDRSNET.CImageProperties.ColorMode@,System.UInt32@)">
            <summary>
            GetProperties retrieves the main properties of the image: size, type and resolution.
            </summary>
            <pre>! IsNull ()</pre>
        </member>
        <member name="M:IDRSNET.CImage.DetectResolution">
            <summary>
            Estimates the resolution of the image
            </summary>
            <returns>The resolution in DPI</returns>
            <exception>CIDRSException if an error occured</exception>
            <remarks>
            The mobile capture extension (IDRS_PREPRO_EXTENSION_MOBILE_CAPTURE) must be enabled to use this feature
            <see cref="F:IDRSNET.IDRS_EXTENSION.IDRS_PREPRO_EXTENSION_MOBILE_CAPTURE"/> for information about the mobile capture extension
            </remarks>
        </member>
        <member name="M:IDRSNET.CImage.IsDefaultResolution">
            <summary>
            Provides the information, if the current resolution parameter is the default one.
            </summary>
            <returns>IDRS_TRUE if the current resolution is set by default in the iDRS, IDRS_FALSE otherwise.</returns>
        </member>
        <member name="P:IDRSNET.CImage.ImageSize">
            <summary>
            Gets the image size, in bytes
            
            </summary>
            
            <pre> ! IsNull () </pre>
        </member>
        <member name="P:IDRSNET.CImage.ColorMode">
            <summary>
            Returns the color mode of the image
            
            </summary>
            <remarks>If the image is not yet initialized, the returned color mode value is ColorMode::UNKNOWN</remarks>
        </member>
        <member name="P:IDRSNET.CImage.BitsPerPixel">
            <summary>
            Gets the image bit per pixels info
            
            </summary>
            
            <pre> ! IsNull () </pre>
        </member>
        <member name="P:IDRSNET.CImage.Height">
            <summary>
            Gets the image width, in pixels
            
            </summary>
            
            <pre> ! IsNull () </pre>
        </member>
        <member name="P:IDRSNET.CImage.Width">
            <summary>
            Gets the image width, in pixels
            
            </summary>
            
            <pre> ! IsNull () </pre>
        </member>
        <member name="P:IDRSNET.CImage.ImagePixels">
            <summary>
            Gets the image pixels data
            
            </summary>
            
            <pre> ! IsNull () </pre>
        </member>
        <member name="P:IDRSNET.CImage.IDRS">
            <summary>
            Returns the CIDRS handle used
            
            </summary>
            
        </member>
        <member name="P:IDRSNET.CImage.ByteWidth">
            <summary>
            Gets the image byte width
            
            </summary>
            <remarks>iDRS greyscale images are 8 bits per pixel with no alignment. This means that byte width equals the pixel width.</remarks>
            <remarks>iDRS color images are 24 bits per pixel with no alignment. This means that byte width is equal to 3 times the pixel width.</remarks>
            <remarks>iDRS black and white images are one bit per pixel, aligned on 32 bits.</remarks>
            <pre> ! IsNull () </pre>
        </member>
        <member name="P:IDRSNET.CImage.Resolution">
            <summary>
            Get/Set the image resolution.
            </summary>
            
            <pre> ! IsNull () </pre>
        </member>
        <member name="T:IDRSNET.CImageFileFormat">
            <summary>
            The CImageFileFormat class manages some image file format for iDRS.
            \ingroup module_core module_image_file
            </summary>
        </member>
        <member name="T:IDRSNET.CImageFileFormat.FileFormat">
            <summary>
            The image file formats handled by iDRS.
            </summary>
        </member>
        <member name="F:IDRSNET.CImageFileFormat.FileFormat.IDRS_TIFF">
            <summary>
            Tiff
            </summary>
        </member>
        <member name="F:IDRSNET.CImageFileFormat.FileFormat.IDRS_PNG">
            <summary>
            Png
            </summary>
        </member>
        <member name="F:IDRSNET.CImageFileFormat.FileFormat.IDRS_JPEG">
            <summary>
            Jpeg
            </summary>
        </member>
        <member name="F:IDRSNET.CImageFileFormat.FileFormat.IDRS_BMP">
            <summary>
            Bmp
            </summary>
        </member>
        <member name="F:IDRSNET.CImageFileFormat.FileFormat.IDRS_JPEG_2000">
            <summary>
            Jpeg 2000
            </summary>
        </member>
        <member name="F:IDRSNET.CImageFileFormat.FileFormat.IDRS_JBIG_2">
            <summary>
            JBig2
            </summary>
        </member>
        <member name="F:IDRSNET.CImageFileFormat.FileFormat.IDRS_CUSTOM">
            <summary>
            Custom
            </summary>
        </member>
        <member name="F:IDRSNET.CImageFileFormat.FileFormat.IDRS_PDF">
            <summary>
            PDF image file.
            </summary>
        </member>
        <member name="T:IDRSNET.CImageLimits">
            <summary>
            CImageLimits class contains helper methods useful when working with images
            \ingroup module_core module_image_file
            </summary>
        </member>
        <member name="M:IDRSNET.CImageLimits.GetCharacterMaxHeight(System.UInt32)">
            <summary>
            GetCharacterMaxHeight returns the maximum character height, at the supplied resolution
            </summary>
            <param name="uiResolution">Image resolution</param>
            <returns>The maximum character height in pixels for the supplied resolution</returns>
        </member>
        <member name="M:IDRSNET.CImageLimits.GetLineMaxHeight(System.UInt32)">
            <summary>
            GetLineMaxHeight returns the maximum line height, at the supplied resolution
            </summary>
            <param name="uiResolution">Image resolution</param>
            <returns>The maximum line height in pixels for the supplied resolution</returns>
        </member>
        <member name="M:IDRSNET.CImageLimits.CheckPageLimits(IDRSNET.CPage)">
            <summary>
            CheckPageLimits verifies the limits of the supplied CPage object
            </summary>
            <param name="argPage">CPage object that will be verified</param>
            <returns>IDRS_TRUE if argPage contains an image that can be used for recognition</returns>
            <returns>IDRS_FALSE if argPage internal image is not suitable for recognition</returns>
        </member>
        <member name="M:IDRSNET.CImageLimits.CheckPageLimits(System.UInt32,System.UInt32)">
            <summary>
            CheckPageLimits verifies if the supplied width and height are within the minimum and maximum image limits
            </summary>
            <param name="uiWidth">Image width</param>
            <param name="uiHeight">Image height</param>
            <returns>IDRS_TRUE if the width and height are ok</returns>
            <returns>IDRS_FALSE if the width or height of the image exceeds the max limits</returns>
        </member>
        <member name="M:IDRSNET.CImageLimits.CheckPageResolution(IDRSNET.CPage)">
            <summary>
            CheckPageLimits verifies the resolution of the supplied CPage object is in the min and max resolution interval
            </summary>
            <param name="argPage">CPage object that will be verified</param>
            <returns>IDRS_TRUE if the argPage contains an image with a resolution that can be used for recognition</returns>
            <returns>IDRS_FALSE if the argPage internal image has a resolution not suitable for recognition</returns>
        </member>
        <member name="M:IDRSNET.CImageLimits.CheckPageResolution(System.UInt32)">
            <summary>
            CheckPageResolution verifies that the supplied resolution is within recognition accepted limits
            </summary>
            <param name="uiResolution">resolution to verify</param>
            <returns>IDRS_TRUE if the supplied resolution can be used for recognition</returns>
            <returns>IDRS_FALSE if the supplied resolution is not suitable for recognition</returns>
        </member>
        <member name="P:IDRSNET.CImageLimits.ImageMaxHeight">
            <summary>
            GetImageMaxHeight returns the maximum height in pixels for an image to be used with iDRS SDK
            
            </summary>
            
        </member>
        <member name="P:IDRSNET.CImageLimits.ImageMaxSize">
            <summary>
            GetImageMaxSize returns the maximum number of pixels for an image to be used with iDRS SDK
            
            </summary>
            
        </member>
        <member name="P:IDRSNET.CImageLimits.ImageMaxWidth">
            <summary>
            GetImageMaxWidth returns the maximum width in pixels for an image to be used with iDRS SDK
            
            </summary>
            
        </member>
        <member name="P:IDRSNET.CImageLimits.ImageMinResolution">
            <summary>
            GetImageMinResolution returns the minimum resolution in dpi that can be used by the recognition engine
            
            </summary>
            
        </member>
        <member name="P:IDRSNET.CImageLimits.ImageMaxResolution">
            <summary>
            GetImageMaxResolution returns the maximum resolution in dpi that can be used by the recognition engine
            
            </summary>
            
        </member>
        <member name="T:IDRSNET.CImageLoadOptions">
            <summary>
            The CImageLoadOptions is the base class to hold the options for loading an image file.
            </summary>
            <remarks>
            At the moment, only TIFF and PDF image formats have access to specific load options.
            \ingroup module_image_file
            </remarks>
        </member>
        <member name="M:IDRSNET.CImageLoadOptions.#ctor(IDRSNET.CImageFileFormat.FileFormat)">
            <summary>
            Creates a new instance of CImageLoadOptions and initializes it with the supplied file format.
            </summary>
            <param name="evFileFormat">The file format</param>
            <returns>The newly created CImageLoadOptions object</returns>
            <remarks>
            This Create() method will not accept as argument CImageFileFormat::IDRS_TIFF or CImageFileFormat::IDRS_PDF;
            For these formats, the dedicated load options class (CImageLoadOptionsTiff and CImageLoadOptionsPdf) must be used instead.
            </remarks>
            <remarks>
            This Create() method will not accept as argument CImageFileFormat::IDRS_JPEG_2000 or CImageFileFormat::IDRS_JBIG_2;
            The iDRS do not support these formats in input (i.e. loading).
            </remarks>
        </member>
        <member name="M:IDRSNET.CImageLoadOptions.Finalize">
            <summary>
            Destructor of CImageLoadOptions.
            </summary>
        </member>
        <member name="M:IDRSNET.CImageLoadOptions.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CImageLoadOptions.GetPointer">
            <summary>
            Internal virtual  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CImageLoadOptions.SetPointer(System.IntPtr)">
            <summary>
            Internal virtual  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CImageLoadOptions object</param>
        </member>
        <member name="P:IDRSNET.CImageLoadOptions.FileFormat">
            <summary>
            Get the file format where the loading options will apply
            
            </summary>
            
        </member>
        <member name="T:IDRSNET.CImageLoadOptionsPdf">
            <summary>
            CImageLoadOptionsPdf contains the options for loading image to pdf file format
            \ingroup module_image_file
            </summary>
        </member>
        <member name="T:IDRSNET.CImageLoadOptionsPdf.eBlackAndWhiteDetectionMode">
            <summary>
            Detection mode for black and white pages.
            When rasterizing a PDF page, black and white pages will become greyscale due to image smoothing (improves image quality).
            In order to avoid this, extra computation can be performed in order to detect original black and white pages and restore
            original color mode.
            </summary>
        </member>
        <member name="F:IDRSNET.CImageLoadOptionsPdf.eBlackAndWhiteDetectionMode.BLACK_AND_WHITE_DETECTION_DISABLED">
            <summary>
            No detection
            Black and white pages will be loaded in greyscale; image visual aspect will be better and OCR generally better, but
            will generate larger output files.
            </summary>
        </member>
        <member name="F:IDRSNET.CImageLoadOptionsPdf.eBlackAndWhiteDetectionMode.BLACK_AND_WHITE_DETECTION_FAST">
            <summary>
            Fast detection
            The PDF page will be inspected and loaded as black and white if containing only BW images. Any other cases will
            generate a greyscale image.
            </summary>
        </member>
        <member name="F:IDRSNET.CImageLoadOptionsPdf.eBlackAndWhiteDetectionMode.BLACK_AND_WHITE_DETECTION_ACCURATE">
            <summary>
            Complete detection
            The PDF page raster will be analyzed in details to detect black and white content. This mode is the slowest and most accurate.
            </summary>
        </member>
        <member name="M:IDRSNET.CImageLoadOptionsPdf.#ctor(System.UInt32,System.Boolean)">
            <summary>
            Creates a new CImageLoadOptionsPdf object and initializes its internal data structures
            </summary>
            <param name="uiPageIndex">The index of the page to load (0-based)</param>
            <param name="bKeepAnnotations">The flag indicating if annotations should be kept when loading the page</param>
            <returns>The newly created object</returns>
        </member>
        <member name="M:IDRSNET.CImageLoadOptionsPdf.Finalize">
            <summary>
            Destructor of CImageLoadOptionsPdf.
            </summary>
        </member>
        <member name="M:IDRSNET.CImageLoadOptionsPdf.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CImageLoadOptionsPdf.GetPointer">
            <summary>
            Internal override  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CImageLoadOptionsPdf.SetPointer(System.IntPtr)">
            <summary>
            Internal override  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CImageLoadOptionsPdf object</param>
        </member>
        <member name="P:IDRSNET.CImageLoadOptionsPdf.LoadingResolution">
            <summary>
            Get/Set the loading resolution value
            By default the loading resolution is set to 300dpi
            </summary>
            
        </member>
        <member name="P:IDRSNET.CImageLoadOptionsPdf.AllowIncompleteTextLoading">
            <summary>
            Get/Set the flag to allow incomplete text loading
            iDRS does not support unicode characters with value higher than U+FFFF
            When this flag is set to IDRS_TRUE and such character is encountered, it will be replaced by U+FFFD (replacement character).
            When this flag is set to IDRS_FALSE, exception IDRS_ERROR_IMAGE_FILE_PDF_UNSUPPORTED_CHARACTER will be thrown instead
            By default the flag is set to IDRS_TRUE
            </summary>
            
        </member>
        <member name="P:IDRSNET.CImageLoadOptionsPdf.LoadPageContent">
            <summary>
            Get/Set the flag to load page content.
            If this flag is activated, your CPage object will be filled with the page content data such as:
            - Paragraphs, lines of text
            - Font information
            - Graphical zones
            By default the flag is set to IDRS_FALSE
            </summary>
            
        </member>
        <member name="P:IDRSNET.CImageLoadOptionsPdf.KeepAnnotations">
            <summary>
            Get/Set the flag for keeping annotations when loading a PDF page
            </summary>
            
        </member>
        <member name="P:IDRSNET.CImageLoadOptionsPdf.CustomFontsPath">
            <summary>
            Get/Set the path to custom fonts that can be used when loading the pdf files.
            The custom fonts folder is used whenever iDRS is trying to read a pdf file that contains a font not known by pdfium.
            This scenario typically occurs on Linux platform, where there's no standard API for accessing the fonts on the system.
            By default the custom fonts path is set to NULL
            </summary>
            
        </member>
        <member name="P:IDRSNET.CImageLoadOptionsPdf.AllowIncompleteRendering">
            <summary>
            Get/Set the flag to allow incomplete rendering
            In some cases, glyphs are not found in the specified font in the pdf document but we can also continue
            rendering and these glyphs will be empty in the output
            By default the flag is set to IDRS_TRUE, if set to IDRS_FALSE we will stop rendering and throw an exception
            </summary>
            
        </member>
        <member name="P:IDRSNET.CImageLoadOptionsPdf.OpenPassword">
            <summary>
            Get/Set the user/owner password to open the protected input PDF
            </summary>
            
        </member>
        <member name="P:IDRSNET.CImageLoadOptionsPdf.BlackAndWhiteDetectionMode">
            <summary>
            Get/Set the black and white detection mode.
            </summary>
            <remarks>The default detection mode is BLACK_AND_WHITE_DETECTION_ACCURATE.</remarks>
        </member>
        <member name="T:IDRSNET.CImageLoadOptionsTiff">
            <summary>
            CImageLoadOptionsTiff contains the options for loading image to tiff file format
            \ingroup module_image_file
            </summary>
        </member>
        <member name="M:IDRSNET.CImageLoadOptionsTiff.#ctor(System.UInt32)">
            <summary>
            Create a new instance of CImageLoadOptionsTiff.
            </summary>
            <param name="uiPageIndex">The index of the page to load (0-based)</param>
            <returns>The newly created CImageLoadOptionsTiff object</returns>
        </member>
        <member name="M:IDRSNET.CImageLoadOptionsTiff.Finalize">
            <summary>
            Destructor of CImageLoadOptionsTiff.
            </summary>
        </member>
        <member name="M:IDRSNET.CImageLoadOptionsTiff.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CImageLoadOptionsTiff.GetPointer">
            <summary>
            Internal override  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CImageLoadOptionsTiff.SetPointer(System.IntPtr)">
            <summary>
            Internal override  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CImageLoadOptionsTiff object</param>
        </member>
        <member name="P:IDRSNET.CImageLoadOptionsTiff.PageIndex">
            <summary>
            Get/Set the index of the page to load.
            </summary>
            
        </member>
        <member name="T:IDRSNET.CImageOperation">
            <summary>
            The CImageOperation class represents the base class for the image operations related classes in iDRS SDK.
            \ingroup module_prepro
            <see cref="F:IDRSNET.IDRS_MODULE.IDRS_MODULE_PREPRO"/> 
            </summary>
        </member>
        <member name="M:IDRSNET.CImageOperation.Finalize">
            <summary>
            Destructor of CImageOperation.
            </summary>
        </member>
        <member name="M:IDRSNET.CImageOperation.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CImageOperation.GetPointer">
            <summary>
            Internal virtual  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CImageOperation.SetPointer(System.IntPtr)">
            <summary>
            Internal virtual  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CImageOperation object</param>
        </member>
        <member name="T:IDRSNET.CImageOperationUtils">
            <summary>
            The CImageOperationUtils class offers image operation utilities.
            \ingroup module_prepro
            <see cref="F:IDRSNET.IDRS_MODULE.IDRS_MODULE_PREPRO"/> 
            </summary>
        </member>
        <member name="M:IDRSNET.CImageOperationUtils.#ctor(IDRSNET.CIDRS)">
            <summary>
            Creates a new CImageOperationUtils object.
            </summary>
            <param name="argIdrs">The iDRS</param>
            <returns>The newly created CImageOperationUtils object.</returns>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CImageOperationUtils.Finalize">
            <summary>
            Destructor of CImageOperationUtils.
            </summary>
        </member>
        <member name="M:IDRSNET.CImageOperationUtils.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CImageOperationUtils.GetPointer">
            <summary>
            Internal override  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CImageOperationUtils.SetPointer(System.IntPtr)">
            <summary>
            Internal override  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CImageOperationUtils object</param>
        </member>
        <member name="M:IDRSNET.CImageOperationUtils.ExtractArea(IDRSNET.CImage,IDRSNET.CPolygon,IDRSNET.CImage)">
            <summary>
            Extracts the given area from the image to the target image.
            </summary>
            <pre>! argPolygon.IsNull ()</pre>
            <pre>! argImage.IsNull ()</pre>
            <pre>argImageTarget != argImage</pre>
            <param name="argImageTarget">The image to create.</param>
            <param name="argPolygon">The area to extract.</param>
            <param name="argImage">The image to process.</param>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CImageOperationUtils.ExtractArea(IDRSNET.CImage,IDRSNET.CPolygon,IDRSNET.CPage,System.Boolean)">
            <summary>
            Extracts the given area from an image of the page.
            </summary>
            <pre>! argPolygon.IsNull ()</pre>
            <pre>! argPage.IsNull ()</pre>
            <pre>! bExtractFromBlackAndWhiteImage || argPage.IsBlackAndWhiteImageAvailable ()</pre>
            <param name="argImageTarget">The image to create.</param>
            <param name="argPolygon">The area to extract.</param>
            <param name="argPage">The page to process.</param>
            <param name="bExtractFromBlackAndWhiteImage">If IDRS_TRUE, the image is extracted from the page's black and white image.</param>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CImageOperationUtils.ExtractArea(IDRSNET.CImage,IDRSNET.CIDRSRect,IDRSNET.CImage)">
            <summary>
            Extracts the given area from the image to the target image.
            </summary>
            <pre>! argImage.IsNull ()</pre>
            <pre>argImageTarget != argImage</pre>
            <param name="argImageTarget">The image to create.</param>
            <param name="rc">The area to extract.</param>
            <param name="argImage">The image to process.</param>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CImageOperationUtils.ExtractArea(IDRSNET.CImage,IDRSNET.CIDRSRect,IDRSNET.CPage,System.Boolean)">
            <summary>
            Extracts the given area from an image of the page.
            </summary>
            <pre>! argPage.IsNull ()</pre>
            <pre>! bExtractFromBlackAndWhiteImage || argPage.IsBlackAndWhiteImageAvailable ()</pre>
            <param name="argImageTarget">The image to create.</param>
            <param name="rc">The area to extract.</param>
            <param name="argPage">The page to process.</param>
            <param name="bExtractFromBlackAndWhiteImage">If IDRS_TRUE, the image is extracted from the page's black and white image.</param>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="T:IDRSNET.CImageOptions">
            <summary>
            The CImageOptions is the base class to hold the options for an image file.
            \ingroup module_image_file
            </summary>
        </member>
        <member name="M:IDRSNET.CImageOptions.#ctor(IDRSNET.CImageFileFormat.FileFormat)">
            <summary>
            Creates a new instance of CImageOptions and initializes it with the supplied file format
            </summary>
            <param name="fileFormat">The file format</param>
            <returns>The newly created CImageOptions object</returns>
        </member>
        <member name="M:IDRSNET.CImageOptions.Finalize">
            <summary>
            Destructor of CImageOptions.
            </summary>
        </member>
        <member name="M:IDRSNET.CImageOptions.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CImageOptions.GetPointer">
            <summary>
            Internal virtual  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CImageOptions.SetPointer(System.IntPtr)">
            <summary>
            Internal virtual  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CImageOptions object</param>
        </member>
        <member name="M:IDRSNET.CImageOptions.IsAppendToExistingFile">
            <summary>
            IsAppendToExistingFile returns a flag specifying if the image file should be appended to the file/stream.
            Appending an image to an existing image file/stream make sense only for TIFF and PDF formats
            If the flag is set to IDRS_TRUE and the file exists, the image will be added at the end of the file
            If the flag is set to IDRS_TRUE and the file does not exists, the file will be created and the image will be saved to the newly created file
            If the flag is set to IDRS_FALSE the resulting image file will contain one single image, regardless if it existed before or not
            </summary>
            <returns>IDRS_TRUE if the image can be appended, IDRS_FALSE otherwise</returns>
        </member>
        <member name="P:IDRSNET.CImageOptions.FileFormat">
            <summary>
            Get/Set the file format.
            </summary>
            
        </member>
        <member name="T:IDRSNET.CImageOptionsBmp">
            <summary>
            The CImageOptionsBmp class represents the various options to deal with BMP images.
            \ingroup module_image_file
            </summary>
        </member>
        <member name="T:IDRSNET.CImageOptionsBmp.IDRS_IMAGE_FILE_FORMAT_BMP_COMPRESSION">
            <summary>
            IDRS_IMAGE_FILE_FORMAT_BMP defines the BMP image formats
            </summary>
        </member>
        <member name="F:IDRSNET.CImageOptionsBmp.IDRS_IMAGE_FILE_FORMAT_BMP_COMPRESSION.BMP_COMPRESSION_NONE">
            <summary>
            ! No compression
            </summary>
        </member>
        <member name="F:IDRSNET.CImageOptionsBmp.IDRS_IMAGE_FILE_FORMAT_BMP_COMPRESSION.BMP_COMPRESSION_RLE8">
            <summary>
            ! Run length compression - can only be used with 8 bit/pixel images
            </summary>
        </member>
        <member name="F:IDRSNET.CImageOptionsBmp.IDRS_IMAGE_FILE_FORMAT_BMP_COMPRESSION.BMP_COMPRESSION_RLE4">
            <summary>
            ! Run length compression - can only be used with 4 bit/pixel images
            </summary>
        </member>
        <member name="F:IDRSNET.CImageOptionsBmp.IDRS_IMAGE_FILE_FORMAT_BMP_COMPRESSION.BMP_COMPRESSION_BITFIELDS">
            <summary>
            ! Bitfield compression - Pixel format defined by bit masks or Huffman 1D compressed bitmap
            </summary>
        </member>
        <member name="M:IDRSNET.CImageOptionsBmp.#ctor(IDRSNET.CImageOptionsBmp.IDRS_IMAGE_FILE_FORMAT_BMP_COMPRESSION)">
            <summary>
            Creates a new CImageOptionsBmp object and initializes it with the provided value
            </summary>
            <param name="ifImageFormatBmp">The BMP image format.</param>
        </member>
        <member name="M:IDRSNET.CImageOptionsBmp.Finalize">
            <summary>
            Destructor of CImageOptionsBmp.
            </summary>
        </member>
        <member name="M:IDRSNET.CImageOptionsBmp.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CImageOptionsBmp.GetPointer">
            <summary>
            Internal override  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CImageOptionsBmp.SetPointer(System.IntPtr)">
            <summary>
            Internal override  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CImageOptionsBmp object</param>
        </member>
        <member name="P:IDRSNET.CImageOptionsBmp.ImageFileFormatBmp">
            <summary>
            Get/Set the BMP image file format.
            </summary>
            
        </member>
        <member name="T:IDRSNET.CImageOptionsCustom">
            <summary>
            The CImageOptionsCustom class represents the various options to deal with customized images.
            \ingroup module_image_file
            </summary>
        </member>
        <member name="M:IDRSNET.CImageOptionsCustom.#ctor">
            <summary>
            Creates a new CImageOptionsCustom object.
            </summary>
            <returns>The newly created CImageOptionsCustom object</returns>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CImageOptionsCustom.#ctor(System.String,System.UInt32)">
            <summary>
            Creates a new CImageOptionsCustom object and initializes it with the file extension and custom data
            </summary>
            <param name="strFileExtension">Null terminated string containing the file extension</param>
            <param name="uiCustomData">Custom identifier</param>
            <returns>The newly created CImageOptionsCustom object</returns>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CImageOptionsCustom.Finalize">
            <summary>
            Destructor of CImageOptionsCustom.
            </summary>
        </member>
        <member name="M:IDRSNET.CImageOptionsCustom.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CImageOptionsCustom.GetPointer">
            <summary>
            Internal override  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CImageOptionsCustom.SetPointer(System.IntPtr)">
            <summary>
            Internal override  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CImageOptionsCustom object</param>
        </member>
        <member name="P:IDRSNET.CImageOptionsCustom.FileExtension">
            <summary>
            Get/Set the file extension.
            </summary>
            <remarks>If the buffer is large enough, the NULL terminating character will also be appended. If not, there will be no NULL termination character.</remarks>
        </member>
        <member name="P:IDRSNET.CImageOptionsCustom.CustomData">
            <summary>
            Get/Set a custom value associated to this object
            </summary>
            
        </member>
        <member name="T:IDRSNET.CImageOptionsJpeg">
            <summary>
            The CImageOptionsJpeg class represents the various options to deal with JPEG images.
            \ingroup module_image_file
            The JPEG quality level determines the degree of loss incurred by the compression process.
            iDRS accepts a value from 0 to 255:
            - 255 guarantees the highest image quality.
            - 0 guarantees the best compression.
            The IDRS_DFLT_DOCUMENT_OUTPUT_IMG_JPEG_QUALITY constant is used as default value.
            <see cref="M:IDRSNET.CImage.Load(System.String,System.UInt32)"/> 
            </summary>
        </member>
        <member name="M:IDRSNET.CImageOptionsJpeg.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Creates a new CImageOptionsJpeg object and initializes it with the provided value
            </summary>
            <param name="uiQualityFactor">The image quality factor. Default value IDRS_DFLT_DOCUMENT_OUTPUT_IMG_JPEG_QUALITY</param>
            <param name="uiReserved">The reserved value. Is should be set to 0</param>
        </member>
        <member name="M:IDRSNET.CImageOptionsJpeg.Finalize">
            <summary>
            Destructor of CImageOptionsJpeg.
            </summary>
        </member>
        <member name="M:IDRSNET.CImageOptionsJpeg.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CImageOptionsJpeg.GetPointer">
            <summary>
            Internal override  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CImageOptionsJpeg.SetPointer(System.IntPtr)">
            <summary>
            Internal override  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CImageOptionsJpeg object</param>
        </member>
        <member name="P:IDRSNET.CImageOptionsJpeg.QualityFactor">
            <summary>
            Get/Set the quality factor.
            </summary>
            
        </member>
        <member name="T:IDRSNET.CImageOptionsJpeg2000">
            <summary>
            The CImageOptionsJpeg2000 class represents the various options to deal with JPEG 2000 image compression algorithm
            \ingroup module_image_file
            </summary>
        </member>
        <member name="M:IDRSNET.CImageOptionsJpeg2000.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Creates a new CImageOptionsJpeg2000 object and initializes it with the provided value
            </summary>
            <param name="uiTargetSize">The compressed image target size.</param>
            <param name="uiReserved">The reserved value.</param>
        </member>
        <member name="M:IDRSNET.CImageOptionsJpeg2000.Finalize">
            <summary>
            Destructor of CImageOptionsJpeg2000.
            </summary>
        </member>
        <member name="M:IDRSNET.CImageOptionsJpeg2000.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CImageOptionsJpeg2000.GetPointer">
            <summary>
            Internal override  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CImageOptionsJpeg2000.SetPointer(System.IntPtr)">
            <summary>
            Internal override  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CImageOptionsJpeg2000 object</param>
        </member>
        <member name="P:IDRSNET.CImageOptionsJpeg2000.TargetSize">
            <summary>
            Get/Set the image compression target size.
            </summary>
            
        </member>
        <member name="T:IDRSNET.CImageOptionsPdf">
            <summary>
            CImageOptionsPdf contains the options for saving image to pdf file format
            \ingroup module_image_file
            </summary>
        </member>
        <member name="M:IDRSNET.CImageOptionsPdf.#ctor(System.Boolean,System.UInt32)">
            <summary>
            Creates a new CImageOptionsPdf object and initializes it's internal data structures
            </summary>
            <param name="bAppendToExistingFile">Boolean flag that specifies if the image will be added as a new page in an existing pdf file.</param>
            <param name="uiJpegCompressionQualityFactor">The image quality factor for JPEG compression. Default value IDRS_DFLT_DOCUMENT_OUTPUT_IMG_JPEG_QUALITY</param>
            <returns>The newly created object</returns>
        </member>
        <member name="M:IDRSNET.CImageOptionsPdf.Finalize">
            <summary>
            Destructor of CImageOptionsPdf.
            </summary>
        </member>
        <member name="M:IDRSNET.CImageOptionsPdf.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CImageOptionsPdf.GetPointer">
            <summary>
            Internal override  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CImageOptionsPdf.SetPointer(System.IntPtr)">
            <summary>
            Internal override  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CImageOptionsPdf object</param>
        </member>
        <member name="M:IDRSNET.CImageOptionsPdf.IsAppendToExistingFile">
            <summary>
            Returns the boolean flag that specify if the image will be appended to an existing file or not
            </summary>
        </member>
        <member name="P:IDRSNET.CImageOptionsPdf.JpegCompressionQualityFactor">
            <summary>
            Get/Set the jpeg compression quality factor.
            </summary>
            
        </member>
        <member name="P:IDRSNET.CImageOptionsPdf.AppendToExistingFile">
            <summary>
            Set the boolean flag that specify if the image will be appended to an existing file or not
            
            </summary>
            
        </member>
        <member name="T:IDRSNET.CImageOptionsPng">
            <summary>
            The CImageOptionsPng class represents the various options to deal with PNG images.
            \ingroup module_image_file
            </summary>
        </member>
        <member name="T:IDRSNET.CImageOptionsPng.IDRS_IMAGE_FILE_FORMAT_PNG">
            <summary>
            IDRS_IMAGE_FILE_FORMAT_PNG defines the PNG image formats
            </summary>
        </member>
        <member name="F:IDRSNET.CImageOptionsPng.IDRS_IMAGE_FILE_FORMAT_PNG.STANDARD">
            <summary>
            ! The standard format
            </summary>
        </member>
        <member name="F:IDRSNET.CImageOptionsPng.IDRS_IMAGE_FILE_FORMAT_PNG.BLACK_IS_TRANSPARENT">
            <summary>
            ! The black transparent format
            </summary>
        </member>
        <member name="M:IDRSNET.CImageOptionsPng.#ctor(IDRSNET.CImageOptionsPng.IDRS_IMAGE_FILE_FORMAT_PNG)">
            <summary>
            Creates a new CImageOptionsPng object and initializes it with the provided value
            </summary>
            <param name="ifImageFormatPng">The PNG image format.</param>
        </member>
        <member name="M:IDRSNET.CImageOptionsPng.Finalize">
            <summary>
            Destructor of CImageOptionsPng.
            </summary>
        </member>
        <member name="M:IDRSNET.CImageOptionsPng.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CImageOptionsPng.GetPointer">
            <summary>
            Internal override  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CImageOptionsPng.SetPointer(System.IntPtr)">
            <summary>
            Internal override  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CImageOptionsPng object</param>
        </member>
        <member name="P:IDRSNET.CImageOptionsPng.CompressionLevel">
            <summary>
            Get/Set the PNG image compression level.
            </summary>
            
        </member>
        <member name="P:IDRSNET.CImageOptionsPng.ImageFileFormatPng">
            <summary>
            Get/Set the PNG image file format.
            </summary>
            
        </member>
        <member name="T:IDRSNET.CImageOptionsTiff">
            <summary>
            The CImageOptionsTiff class represents the various options to deal with TIFF images.
            \ingroup module_image_file
            </summary>
        </member>
        <member name="T:IDRSNET.CImageOptionsTiff.IDRS_IMAGE_FILE_FORMAT_TIFF">
            <summary>
            IDRS_IMAGE_FILE_FORMAT_TIFF defines the TIFF image formats
            </summary>
        </member>
        <member name="F:IDRSNET.CImageOptionsTiff.IDRS_IMAGE_FILE_FORMAT_TIFF.IDRS_CCITT4">
            <summary>
            ! The CCITT4 format
            </summary>
        </member>
        <member name="F:IDRSNET.CImageOptionsTiff.IDRS_IMAGE_FILE_FORMAT_TIFF.IDRS_PACKBITS">
            <summary>
            ! The PACKBITS format
            </summary>
        </member>
        <member name="F:IDRSNET.CImageOptionsTiff.IDRS_IMAGE_FILE_FORMAT_TIFF.IDRS_TIFF_JPEG">
            <summary>
            ! The Jpeg format
            </summary>
        </member>
        <member name="F:IDRSNET.CImageOptionsTiff.IDRS_IMAGE_FILE_FORMAT_TIFF.IDRS_FAX_G4">
            <summary>
            ! The FAXG4 format
            </summary>
        </member>
        <member name="M:IDRSNET.CImageOptionsTiff.#ctor(IDRSNET.CImageOptionsTiff.IDRS_IMAGE_FILE_FORMAT_TIFF)">
            <summary>
            Create function creates an instance of CImageOptionsTiff class and initializes it with the supplied tiff file format
            </summary>
            <param name="ifImageFormatTiff">The TIFF image file format.</param>
        </member>
        <member name="M:IDRSNET.CImageOptionsTiff.#ctor(IDRSNET.CImageOptionsTiff.IDRS_IMAGE_FILE_FORMAT_TIFF,System.Boolean)">
            <summary>
            Create function creates an instance of CImageOptionsTiff class and initializes it with the supplied tiff file format
            </summary>
            <param name="ifImageFormatTiff">The TIFF image file format.</param>
            <param name="bAppendToExistingFile">Boolean flag specifying whether the image should be appended to an existing TIFF file.</param>
            <remarks>If the file does not exists, then the image will be saved as the first image in the tiff file</remarks>
        </member>
        <member name="M:IDRSNET.CImageOptionsTiff.Finalize">
            <summary>
            Destructor of CImageOptionsTiff.
            </summary>
        </member>
        <member name="M:IDRSNET.CImageOptionsTiff.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CImageOptionsTiff.GetPointer">
            <summary>
            Internal override  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CImageOptionsTiff.SetPointer(System.IntPtr)">
            <summary>
            Internal override  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CImageOptionsTiff object</param>
        </member>
        <member name="M:IDRSNET.CImageOptionsTiff.IsAppendToExistingFile">
            <summary>
            Returns the boolean flag that specify if the image will be appended to an existing file or not
            </summary>
        </member>
        <member name="P:IDRSNET.CImageOptionsTiff.WriteTiffHeader">
            <summary>
            Get/Set the boolean flag that specify if the image will include tiff header in compression
            </summary>
            
        </member>
        <member name="P:IDRSNET.CImageOptionsTiff.ImageFileFormatTiff">
            <summary>
            The getter to get the TIFF image file format.
            
            </summary>
            
        </member>
        <member name="P:IDRSNET.CImageOptionsTiff.ImageFormatTiff">
            <summary>
            Set the TIFF image file format.
            
            </summary>
            
        </member>
        <member name="P:IDRSNET.CImageOptionsTiff.RowsPerStrip">
            <summary>
            Get/Set the number of rows per strip
            TIFF image data can be organized into strips for faster random access and efficient I/O buffering. The default value in 1.
            Choose RowsPerStrip such that each strip is about 8K bytes, even if the data is not compressed, since it makes buffering simpler for readers.
            The 8K value is fairly arbitrary, but seems to work well.
            On a saved TIFF image, this value can be obtained by reading the TIFFTAG_ROWSPERSTRIP tag
            </summary>
            
        </member>
        <member name="P:IDRSNET.CImageOptionsTiff.AppendToExistingFile">
            <summary>
            Set the boolean flag that specify if the image will be appended to an existing file or not
            
            </summary>
            
        </member>
        <member name="T:IDRSNET.CImagePixels">
            <summary>
            The CImagePixels class handles the pixels of an image.
            \ingroup module_core module_image_file
            The class offers pixel level access for an image
            </summary>
        </member>
        <member name="M:IDRSNET.CImagePixels.Finalize">
            <summary>
            Destructor of CImagePixels.
            </summary>
        </member>
        <member name="M:IDRSNET.CImagePixels.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CImagePixels.GetPointer">
            <summary>
            Internal virtual  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CImagePixels.SetPointer(System.IntPtr)">
            <summary>
            Internal virtual  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CImagePixels object</param>
        </member>
        <member name="M:IDRSNET.CImagePixels.SetPixelColor(System.UInt32,System.UInt32,IDRSNET.CIDRSColor)">
            <summary>
            Sets the color of the pixel at the given coordinates.
            </summary>
            <pre>! IsNull ()</pre>
            <param name="uiCol">The 0 based index of the column.</param>
            <param name="uiRow">The 0 based index of the row.</param>
            <param name="color">The color.</param>
            <remarks>For a black and white image, the valid colors have blue == green == red ==0xFF or blue == green == red ==0x00</remarks>
            <remarks>For a greyscale image, the valid colors have blue == green == red.</remarks>
        </member>
        <member name="M:IDRSNET.CImagePixels.GetPixelColor(System.UInt32,System.UInt32)">
            <summary>
            Gets the color of the pixel at the given coordinates.
            </summary>
            <pre>! IsNull ()</pre>
            <pre>uiCol &lt; GetWidth ()</pre>
            <pre>uiRow &lt; GetHeight ()</pre>
            <param name="uiCol">The 0 based index of the column.</param>
            <param name="uiRow">The 0 based index of the row.</param>
            <returns>The color of the pixel.</returns>
        </member>
        <member name="M:IDRSNET.CImagePixels.FillBitmap(IDRSNET.CIDRSColor)">
            <summary>
            FillBitmap fills the image with the given color.
            </summary>
            <pre>! IsNull ()</pre>
            <param name="color">The color.</param>
            <remarks>For a black and white image, the valid colors have blue == green == red ==0xFF or blue == green == red ==0x00</remarks>
            <remarks>For a greyscale image, the valid colors have blue == green == red.</remarks>
        </member>
        <member name="M:IDRSNET.CImagePixels.GetImageSize(System.UInt32,System.UInt32,IDRSNET.CImageProperties.ColorMode)">
            <summary>
            Gets the image size image with the provided properties.
            </summary>
            <param name="uiWidth">The width in pixels of the image.</param>
            <param name="uiHeight">The height in pixels of the image.</param>
            <param name="cmColorMode">The color mode for the image.</param>
            <returns>The size of the image (bytes)</returns>
        </member>
        <member name="M:IDRSNET.CImagePixels.GetByteWidth(System.UInt32,IDRSNET.CImageProperties.ColorMode)">
            <summary>
            Gets the width in bytes of an image with the provided properties.
            </summary>
            <param name="uiWidth">The width in pixels of the image.</param>
            <param name="cmColorMode">The color mode for the image.</param>
            <returns>The width of the image (bytes)</returns>
        </member>
        <member name="P:IDRSNET.CImagePixels.ColorMode">
            <summary>
            
            </summary>
            
            <pre> ! IsNull () </pre>
        </member>
        <member name="P:IDRSNET.CImagePixels.PixelsBuffer">
            <summary>
            Get/Set the image pixels from an external buffer.       /// The buffer size provided needs to be at least the image size.
            </summary>
            <remarks>The buffer size provided needs to be exactly the same than the size required for this image.</remarks>
        </member>
        <member name="P:IDRSNET.CImagePixels.PixelsBufferSize">
            <summary>
            Gets the size of the buffer allocated to store the image pixels.
            This size is expressed in bytes.
            
            </summary>
            <remarks>The value returned by this method is identical to the value of GetSize ().uiImageSize</remarks>
        </member>
        <member name="P:IDRSNET.CImagePixels.Pixels">
            <summary>
            
            </summary>
            
            <pre> ! IsNull () </pre>
        </member>
        <member name="P:IDRSNET.CImagePixels.Size">
            <summary>
            
            </summary>
            
            <pre> ! IsNull () </pre>
        </member>
        <member name="T:IDRSNET.CImagePluginCapabilities">
            <summary>
            The CImagePluginCapabilities class contains the capabilities implemented in a image plugin.
            \ingroup module_core
            The class acts as a storage for CImagePluginCapability objects and also provides useful methods for detecting if a certain image can be saved or loaded using various parameteres.
            </summary>
        </member>
        <member name="M:IDRSNET.CImagePluginCapabilities.#ctor">
            <summary>
            Creates a new CImagePluginCapabilities object
            </summary>
            <returns>The newly created CImagePluginCapabilities</returns>
        </member>
        <member name="M:IDRSNET.CImagePluginCapabilities.Finalize">
            <summary>
            Destructor of CImagePluginCapabilities.
            </summary>
        </member>
        <member name="M:IDRSNET.CImagePluginCapabilities.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CImagePluginCapabilities.GetPointer">
            <summary>
            Internal virtual  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CImagePluginCapabilities.SetPointer(System.IntPtr)">
            <summary>
            Internal virtual  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CImagePluginCapabilities object</param>
        </member>
        <member name="M:IDRSNET.CImagePluginCapabilities.Add(IDRSNET.CImagePluginCapability)">
            <summary>
            Adds a new CImagePluginCapability to capabilities list
            </summary>
            <param name="argCapability">object containing the supported capability.</param>
        </member>
        <member name="M:IDRSNET.CImagePluginCapabilities.Add(IDRSNET.CImagePluginCapability[])">
            <summary>
            Adds a vector of image capabilities to the capabilities list
            </summary>
            <param name="xCapabilities">Vector containing the capabilities to add</param>
            <returns></returns>
        </member>
        <member name="M:IDRSNET.CImagePluginCapabilities.GetAt(System.UInt32)">
            <summary>
            GetAt returns the CImagePluginCapability at a certain index
            </summary>
            <param name="uiIndex">Index where to read the CImagePluginCapability</param>
            <returns>The CImagePluginCapability at the supplied index</returns>
        </member>
        <member name="M:IDRSNET.CImagePluginCapabilities.RemoveAt(System.UInt32)">
            <summary>
            RemoveAt removes a CImagePluginCapability from the list
            </summary>
            <param name="uiIndex">The index where to remove the object</param>
        </member>
        <member name="M:IDRSNET.CImagePluginCapabilities.RemoveAll">
            <summary>
            RemoveAll removes all capabilities.
            </summary>
        </member>
        <member name="M:IDRSNET.CImagePluginCapabilities.CanLoad(IDRSNET.CImageFileFormat.FileFormat,IDRSNET.CImageOptions)">
            <summary>
            This method verifies whether the image plugin is able to load an image format with respect to the provided options.
            </summary>
            <param name="ffFileFormat">The file format</param>
            <param name="argImageOptions">The image loading options</param>
            <returns>IDRS_TRUE if the plugin can load the supplied format and options; otherwise IDRS_FALSE</returns>
        </member>
        <member name="M:IDRSNET.CImagePluginCapabilities.CanSave(IDRSNET.CImageFileFormat.FileFormat,IDRSNET.CImageOptions)">
            <summary>
            This method verifies whether the image plugin is able to save an image format with respect to the provided options.
            </summary>
            <param name="ffFileFormat">The file format</param>
            <param name="argImageOptions">The image saving options</param>
            <returns>IDRS_TRUE if the plugin can save the supplied format and options; otherwise IDRS_FALSE</returns>
        </member>
        <member name="M:IDRSNET.CImagePluginCapabilities.CanSave(IDRSNET.CImageFileFormat.FileFormat)">
            <summary>
            CanSave verifies whether the current capabilities contain the supplied image parameters
            </summary>
            <param name="ffFileFormat">The file format</param>
            <returns>IDRS_TRUE if the supplied image parameters match the supplied arguments. IDRS_FALSE is returned otherwise</returns>
        </member>
        <member name="P:IDRSNET.CImagePluginCapabilities.Count">
            <summary>
            GetCount returns the number of capabilities set
            
            </summary>
            
        </member>
        <member name="T:IDRSNET.CImagePluginCapability">
            <summary>
            The CImagePluginCapability represents a image capability implemented in the image plugin it belongs to.
            \ingroup module_core
            The class contains the fine-grained settings that define a image plugin capability:
            - file format
            - various options specific to file format: compression algorithm, image mode, etc
            - ability to load an image
            - ability to save an image
            </summary>
        </member>
        <member name="M:IDRSNET.CImagePluginCapability.#ctor">
            <summary>
            Creates a new CImagePluginCapability object
            </summary>
            <returns>The newly created CImagePluginCapability object</returns>
        </member>
        <member name="M:IDRSNET.CImagePluginCapability.#ctor(IDRSNET.CImageFileFormat.FileFormat,System.Boolean,System.Boolean,IDRSNET.CImageOptions)">
            <summary>
            Creates a new CImagePluginCapability object
            </summary>
            <param name="ffFileFormat">The file format</param>
            <param name="bCanSaveFormat">Flag specifying whether save operation is supported</param>
            <param name="bCanLoadFormat">Flag specifying whether load operation is supported</param>
            <param name="argImageOptions">Image options object usually contains information about the compression or color mode to be used</param>
            <returns>The newly created CImagePluginCapability object</returns>
            <see cref="T:IDRSNET.CImageFileFormat.FileFormat"/> 
            <see cref="T:IDRSNET.CImageOptions"/> 
        </member>
        <member name="M:IDRSNET.CImagePluginCapability.Finalize">
            <summary>
            Destructor of CImagePluginCapability.
            </summary>
        </member>
        <member name="M:IDRSNET.CImagePluginCapability.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CImagePluginCapability.GetPointer">
            <summary>
            Internal virtual  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CImagePluginCapability.SetPointer(System.IntPtr)">
            <summary>
            Internal virtual  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CImagePluginCapability object</param>
        </member>
        <member name="P:IDRSNET.CImagePluginCapability.CanLoad">
            <summary>
            Get/Set the flag specifying if the current capability supports loading operation
            </summary>
            
        </member>
        <member name="P:IDRSNET.CImagePluginCapability.CanSave">
            <summary>
            Get/Set the flag specifying if the current capability supports saving operation
            </summary>
            
        </member>
        <member name="P:IDRSNET.CImagePluginCapability.ImageOptions">
            <summary>
            Get/Set the CImageOptions object associated with the current capability     /// The CImageOptions object usually contains information like the color mode or the image compression algorithm to be used.
            </summary>
            
        </member>
        <member name="P:IDRSNET.CImagePluginCapability.FileFormat">
            <summary>
            Get/Set the file format for the capability
            </summary>
            
        </member>
        <member name="T:IDRSNET.CImagePluginManager">
            <summary>
            The CImagePluginManager class contains the registry for the user defined plugins
            \ingroup module_core
            The class provides static methods for dealing with the plugin registration. It is not supposed to be instantiated.
            The class will maintain a list with references to the image plugin objects supplied.
            Besides this list, CImagePluginManager contains a reference to an image plugin implemented in iDRS SDK that expose all the imaging functionality in iDRS SDK.
            </summary>
        </member>
        <member name="M:IDRSNET.CImagePluginManager.RegisterPlugin(IDRSNET.IBaseImagePlugin)">
            <summary>
            RegisterPlugin adds a plugin to the plugin list
            Please note that the plugin is added by reference. iDRS SDK will store the reference internally.
            It is integrator's job to make sure that the reference is still valid during the program execution or until the plugin is removed from CImagePluginManager
            </summary>
            <param name="argImagePlugin">Reference to the plugin to be added</param>
        </member>
        <member name="M:IDRSNET.CImagePluginManager.GetAt(System.UInt32)">
            <summary>
            GetAt returns a reference to a plugin already added
            </summary>
            <param name="uiIndex">Index of the plugin to be returned</param>
            <returns>Reference to the plugin stored at specified index</returns>
        </member>
        <member name="M:IDRSNET.CImagePluginManager.RemoveAt(System.UInt32)">
            <summary>
            RemoveAt removes a plugin at a specified index.
            Please note that iDRS SDK will not try to perform delete or cleanup of the removed object. It is integrator's job to cleanup any memory used by the plugin.
            </summary>
            <param name="uiIndex">Index where to remove</param>
        </member>
        <member name="M:IDRSNET.CImagePluginManager.RemoveAll">
            <summary>
            RemoveAll clears the internal container of any previous added plugin.
            Please note that iDRS SDK will not try to perform delete or cleanup of the removed objects. It is integrator's job to cleanup any memory used by the plugins.
            </summary>
        </member>
        <member name="M:IDRSNET.CImagePluginManager.Unload">
            <summary>
            Unloads all plugin objects that are loaded
            </summary>
        </member>
        <member name="P:IDRSNET.CImagePluginManager.DefaultPlugin">
            <summary>
            GetDefaultPlugin returns the default imaging plugin.
            
            </summary>
            
        </member>
        <member name="P:IDRSNET.CImagePluginManager.PluginCount">
            <summary>
            Returns the number of plugins already added to image plugin registry
            
            </summary>
            
        </member>
        <member name="T:IDRSNET.CImageProcessingOptions">
            <summary>
            CImageProcessingOptions class specifies the image processing options
            </summary>
        </member>
        <member name="M:IDRSNET.CImageProcessingOptions.#ctor">
            <summary>
            Create is instantiating a new instance of CImageProcessingOptions and associated data object
            </summary>
            <returns>New instance of CImageProcessingOptions</returns>
        </member>
        <member name="M:IDRSNET.CImageProcessingOptions.Finalize">
            <summary>
            Destructor of CImageProcessingOptions.
            </summary>
        </member>
        <member name="M:IDRSNET.CImageProcessingOptions.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CImageProcessingOptions.GetPointer">
            <summary>
            Internal virtual  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CImageProcessingOptions.SetPointer(System.IntPtr)">
            <summary>
            Internal virtual  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CImageProcessingOptions object</param>
        </member>
        <member name="P:IDRSNET.CImageProcessingOptions.BackgroundCleanupAlgorithm">
            <summary>
            Get/Set the background cleanup algorithm.
            </summary>
            
        </member>
        <member name="T:IDRSNET.CImageProperties">
            <summary>
            The CImageProperties class exposes image properties
            \ingroup module_core module_image_file
            </summary>
        </member>
        <member name="T:IDRSNET.CImageProperties.ColorMode">
            <summary>
            The image color modes handles by iDRS.
            The iDRS is able to process three different color modes:
            <list type="bullet">
            <item>
            <description>black and white,</description>
            </item>
            <item>
            <description>greyscale,</description>
            </item>
            <item>
            <description>color.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:IDRSNET.CImageProperties.ColorMode.UNKNOWN">
            <summary>
            Color mode is not know yet
            This color mode is an indication that the image is not yet initialized or some error has occured.
            Please check the documentation of the method retrieving this value as color mode
            </summary>
        </member>
        <member name="F:IDRSNET.CImageProperties.ColorMode.BLACK_AND_WHITE">
            <summary>
            Black and white images.
            In iDRS, black and white images are 1 bit per pixels, the lines are aligned on 32 bits.
            In other words, for a black and white image, the number of bytes per lines is a multiple of 4.
            </summary>
        </member>
        <member name="F:IDRSNET.CImageProperties.ColorMode.GREYSCALE">
            <summary>
            Greyscale images.
            In iDRS, greyscale images are 8 bits per pixels, lines are not aligned.
            This means that for a greyscale image, the number of bytes per lines is equal to the width in pixels of the image.
            </summary>
        </member>
        <member name="F:IDRSNET.CImageProperties.ColorMode.COLOR">
            <summary>
            Color images.
            In iDRS, color images are 24 bits per pixels, lines are not aligned.
            This means that for a color image, the number of bytes per lines is equal to 3 times the width in pixels of the image.
            </summary>
        </member>
        <member name="T:IDRSNET.CImageSource">
            <summary>
            The CImageSource class offers method to identify the source of an image.
            The images can be captured by many different devices, including document scanner and cameras. In order to
            improve the character recognition accuracy, it can be interesting to apply specific image preprocessing
            features. The CImageSource class helps identifying the source of an image so the correct preprocessing
            is done.
            
            When the image source is identified as "Camera", it is recommended to use the CPerspective class to correct
            any perspective corrections and improve the recognition accuracy.
            </summary>
        </member>
        <member name="T:IDRSNET.CImageSource.SourceType">
            <summary>
            The image source types iDRS can identify.
            </summary>
        </member>
        <member name="F:IDRSNET.CImageSource.SourceType.UNKNOWN">
            <summary>
            Unknow source.
            The source of the image has not been identified.
            </summary>
        </member>
        <member name="F:IDRSNET.CImageSource.SourceType.SCANNER">
            <summary>
            Scanner.
            The image has been created with a scanner.
            </summary>
        </member>
        <member name="F:IDRSNET.CImageSource.SourceType.CAMERA">
            <summary>
            Camera.
            The image has been created with a camera.
            </summary>
        </member>
        <member name="M:IDRSNET.CImageSource.#ctor(IDRSNET.CIDRS)">
            <summary>
            Create creates a CImageSource object.
            </summary>
            <param name="argIDRS">- CIDRS handle object</param>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CImageSource.Finalize">
            <summary>
            Destructor of CImageSource.
            </summary>
        </member>
        <member name="M:IDRSNET.CImageSource.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CImageSource.GetPointer">
            <summary>
            Internal virtual  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CImageSource.SetPointer(System.IntPtr)">
            <summary>
            Internal virtual  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CImageSource object</param>
        </member>
        <member name="M:IDRSNET.CImageSource.GetSourceType(IDRSNET.CImage)">
            <summary>
            GetSourceType analyzes the image to identify its source.
            </summary>
            <pre>! argImage.IsNull ()</pre>
            <param name="argImage">The image to analyze.</param>
            <returns>The type of the source for the image.</returns>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CImageSource.GetSourceType(IDRSNET.CPage)">
            <summary>
            GetSourceType analyzes the page to identify its source.
            </summary>
            <pre>! argPage.IsNull ()</pre>
            <param name="argPage">The page to analyze.</param>
            <returns>The type of the source for the page.</returns>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CImageSource.GetSourceType(System.String)">
            <summary>
            GetSourceType analyzes the image file to identify its source.
            </summary>
            <param name="strFilePath">The path to the file.</param>
            <returns>The type of the source for the image.</returns>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="T:IDRSNET.IDRS_INTERPOLATION_MODE">
            <summary>
            iDRS interpolation modes.
            \ingroup module_prepro
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_INTERPOLATION_MODE.IDRS_INTERPOLATION_MODE_FAST">
            <summary>
            Faster interpolation mode.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_INTERPOLATION_MODE.IDRS_INTERPOLATION_MODE_NORMAL">
            <summary>
            Normal interpolation mode.
            </summary>
        </member>
        <member name="T:IDRSNET.CInterpolation">
            <summary>
            The CInterpolation class provides interpolation capabilities.
            \ingroup module_prepro
            \req IDRS::IDRS_MODULE_PREPRO
            </summary>
        </member>
        <member name="M:IDRSNET.CInterpolation.#ctor(IDRSNET.CIDRS,IDRSNET.IDRS_INTERPOLATION_MODE)">
            <summary>
            The Create method creates an interpolation object.
            </summary>
            <returns>The newly created interpolation object.</returns>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CInterpolation.Finalize">
            <summary>
            Destructor of CInterpolation.
            </summary>
        </member>
        <member name="M:IDRSNET.CInterpolation.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CInterpolation.GetPointer">
            <summary>
            Internal override  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CInterpolation.SetPointer(System.IntPtr)">
            <summary>
            Internal override  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CInterpolation object</param>
        </member>
        <member name="M:IDRSNET.CInterpolation.Interpolate(IDRSNET.CImage,System.UInt32,IDRSNET.CImage)">
            <summary>
            Interpolate interpolates the source image to the given resolution.
            </summary>
            <pre>! IsNull ()</pre>
            <pre>! argImageSource.IsNull ()</pre>
            <param name="argImageTarget">The image that will receive the interpolated.</param>
            <param name="uiTargetResolution">The target resolution. Must be greater than the source image's resolution.</param>
            <param name="argImageSource">The image to interpolate.</param>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="P:IDRSNET.CInterpolation.InterpolationMode">
            <summary>
            Get/Set the interpolation mode.
            The iDRS interpolation modes.
            </summary>
            
            <pre> ! IsNull () </pre>
        </member>
        <member name="T:IDRSNET.CJpegCompressionOptions">
            <summary>
            CJpegCompressionOptions class specifies the jpeg compression options
            </summary>
        </member>
        <member name="M:IDRSNET.CJpegCompressionOptions.#ctor">
            <summary>
            Create is instantiating a new instance of CJpegCompressionOptions and associated data object
            </summary>
            <returns>New instance of CJpegCompressionOptions</returns>
        </member>
        <member name="M:IDRSNET.CJpegCompressionOptions.Finalize">
            <summary>
            Destructor of CJpegCompressionOptions.
            </summary>
        </member>
        <member name="M:IDRSNET.CJpegCompressionOptions.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CJpegCompressionOptions.GetPointer">
            <summary>
            Internal virtual  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CJpegCompressionOptions.SetPointer(System.IntPtr)">
            <summary>
            Internal virtual  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CJpegCompressionOptions object</param>
        </member>
        <member name="P:IDRSNET.CJpegCompressionOptions.CompressionQuality">
            <summary>
            Get/Set the jpeg compression quality.
            </summary>
            
        </member>
        <member name="T:IDRSNET.CLanguageSet">
            <summary>
            The CLanguageSet class manages the set of languages used for ocr recognition
            The class holds the subset of languages used for ocr recognition. 
            
            </summary>
            <remarks>
            Not all the languages can be combined together. For more information about this topic, see  See <a href="page7.html">page7</a> 
            \req IDRS::IDRS_MODULE_OCR
            </remarks>
        </member>
        <member name="M:IDRSNET.CLanguageSet.#ctor(IDRSNET.Language)">
            <summary>
            Creates a new CLanguageSet object
            </summary>
            <param name="lLanguage">The initial language for this CLanguageSet object</param>
            <returns>The newly created CLanguageSet</returns>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CLanguageSet.#ctor(IDRSNET.Language[])">
            <summary>
            Creates a new CLanguageSet object
            </summary>
            <param name="xlLanguages">The vector containing the initial languages for this CLanguageSet object</param>
            <returns>The newly created CLanguageSet</returns>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CLanguageSet.Finalize">
            <summary>
            Destructor of CLanguageSet.
            </summary>
        </member>
        <member name="M:IDRSNET.CLanguageSet.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CLanguageSet.GetPointer">
            <summary>
            Internal virtual  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CLanguageSet.SetPointer(System.IntPtr)">
            <summary>
            Internal virtual  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CLanguageSet object</param>
        </member>
        <member name="M:IDRSNET.CLanguageSet.Add(IDRSNET.Language)">
            <summary>
            Add appends a Language to the list of languages used for OCR
            </summary>
            <param name="lLanguage">The language to be added</param>
        </member>
        <member name="M:IDRSNET.CLanguageSet.Add(IDRSNET.Language[])">
            <summary>
            Add appends the provided languages to the list of languages used for OCR
            </summary>
            <param name="xlLanguages">The vector containing the languages to be added</param>
        </member>
        <member name="M:IDRSNET.CLanguageSet.GetAt(System.UInt32)">
            <summary>
            GetAt returns the language at the specified index
            </summary>
            <param name="uiIndex">The index for the language to be retrieved</param>
            <exception>CIDRSException if an error occurs (ex: index out of bounds)</exception>
        </member>
        <member name="M:IDRSNET.CLanguageSet.GetAt(System.UInt32,System.UInt32,IDRSNET.Language[])">
            <summary>
            GetAt returns the requested number of languages starting with the specified index
            </summary>
            <param name="uiStartIndex">The index for the first language to be retrieved</param>
            <param name="uiCount">The number of languages to be retrieved</param>
            <param name="xElements">The vector containing the languages to retrieve</param>
            <remarks>parameter xElements should point to a memory buffer large enough to accommodate uiCount languages</remarks>
            <exception>CIDRSException if an error occurs (ex: uiStartIndex out of bounds)</exception>
        </member>
        <member name="M:IDRSNET.CLanguageSet.RemoveAt(System.UInt32)">
            <summary>
            RemoveAt removes the language at the specified index
            </summary>
            <param name="uiIndex">The index where to remove the language</param>
            <exception>CIDRSException if an error occurs (ex: index out of bounds)</exception>
        </member>
        <member name="M:IDRSNET.CLanguageSet.Remove(IDRSNET.Language)">
            <summary>
            Remove remove a language from the list
            </summary>
            <param name="lLanguage">The language to be removed</param>
            <returns></returns>
            <remarks>
            - IDRS_TRUE if the language has been found and removed.
            - IDRS_FALSE is the specified language was not found
            </remarks>
        </member>
        <member name="M:IDRSNET.CLanguageSet.RemoveAll">
            <summary>
            RemoveAll removes all the languages from the list
            </summary>
        </member>
        <member name="M:IDRSNET.CLanguageSet.Find(IDRSNET.Language,System.UInt32@)">
            <summary>
            Find searches for the specified language and updates the uiIndex parameter with the index at which the language was found
            </summary>
            <param name="lLanguage">The language to be searched for</param>
            <param name="uiIndex">The index at which the language was found. If the language is not found, the index value remains unchanged</param>
            <returns>IDRS_TRUE if the language was found. IDRS_FALSE if the language was not found</returns>
        </member>
        <member name="M:IDRSNET.CLanguageSet.IsInSet(IDRSNET.Language)">
            <summary>
            IsInSet searches for the specified language.
            </summary>
            <param name="lLanguage">The language to be searched for</param>
            <returns>IDRS_TRUE if the language was found. IDRS_FALSE if the language was not found</returns>
        </member>
        <member name="M:IDRSNET.CLanguageSet.Clone">
            <summary>
            Clone creates a copy of the current object
            It performs a deep copy of the information stored in current object
            </summary>
        </member>
        <member name="M:IDRSNET.CLanguageSet.IsEqual(IDRSNET.CLanguageSet)">
            <summary>
            IsEqual tests if two language set are equal.
            Two language set are equal if they contain the same language with the same order
            </summary>
            <pre>! IsNull ()</pre>
            <pre>! argLanguageSet.IsNull ()</pre>
            <param name="argLanguageSet">The language set to compare to</param>
            <returns>IDRS_TRUE if the provided language set equals the language set.</returns>
        </member>
        <member name="P:IDRSNET.CLanguageSet.Count">
            <summary>
            GetCount returns the number of languages already added
            
            </summary>
            
        </member>
        <member name="T:IDRSNET.CLineRemoval">
            <summary>
            The CLineRemoval class provides line removal capabilities.
            \ingroup module_prepro_adv
            The class contains algorithms for removing vertical and horizontal lines in an image. 
            
            The integrator can control various settings in line removal algorithm like:
            - minimum and maximum line length and thickness of horizontal lines
            - minimum and maximum line length and thickness of vertical lines
            - clean noisy pixels adjacent to the line
            - maximum gap between the lines
            \req IDRS::IDRS_MODULE_PREPRO with extension IDRS::IDRS_PREPRO_EXTENSION_ADVANCED_PREPRO
            <see cref="F:IDRSNET.IDRS_MODULE.IDRS_MODULE_PREPRO"/> for information about the preprocessing library
            <see cref="F:IDRSNET.IDRS_EXTENSION.IDRS_PREPRO_EXTENSION_ADVANCED_PREPRO"/> for information about advanced preprocessing extension
            </summary>
        </member>
        <member name="M:IDRSNET.CLineRemoval.#ctor(IDRSNET.CIDRS)">
            <summary>
            Creates a new CLineRemoval object.
            </summary>
            <param name="argIDRS">The iDRS</param>
            <returns>The newly created CLineRemoval object.</returns>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CLineRemoval.Finalize">
            <summary>
            Destructor of CLineRemoval.
            </summary>
        </member>
        <member name="M:IDRSNET.CLineRemoval.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CLineRemoval.GetPointer">
            <summary>
            Internal override  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CLineRemoval.SetPointer(System.IntPtr)">
            <summary>
            Internal override  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CLineRemoval object</param>
        </member>
        <member name="M:IDRSNET.CLineRemoval.RemoveLines(IDRSNET.CImage,System.Boolean,System.Boolean)">
            <summary>
            RemoveLines removes lines in the given image.
            The image must be black and white (otherwise an exception with the IDRS_ERROR_INVALID_ARGS code is thrown).
            </summary>
            <remarks>Line removal is only available for black and white images.</remarks>
            <pre>! IsNull ()</pre>
            <pre>! argImage.IsNull ()</pre>
            <param name="argImage">The image to clean.</param>
            <param name="bRemoveHorizontalLines">If IDRS_TRUE, the horizontal lines are removed.</param>
            <param name="bRemoveVerticalLines">If IDRS_TRUE, the vertical lines are removed.</param>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CLineRemoval.RemoveLines(IDRSNET.CPage,System.Boolean,System.Boolean)">
            <summary>
            RemoveLines removes lines in the black and white image of the given page.
            The black and white image must exist (otherwise an exception with the IDRS_ERROR_INVALID_CALL code is thrown).
            </summary>
            <remarks>Because line removal is only available for black and white images, the page must have a black and white image.</remarks>
            <pre>! IsNull ()</pre>
            <pre>! argPage.IsNull ()</pre>
            <param name="argPage">The page to clean.</param>
            <param name="bRemoveHorizontalLines">If IDRS_TRUE, the horizontal lines are removed.</param>
            <param name="bRemoveVerticalLines">If IDRS_TRUE, the vertical lines are removed.</param>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CLineRemoval.RemoveLines(IDRSNET.CImage,IDRSNET.CIDRSRect,System.Boolean,System.Boolean)">
            <summary>
            RemoveLines removes lines in a zone of the given image.
            The image must be black and white (otherwise an exception with the IDRS_ERROR_INVALID_ARGS code is thrown).
            </summary>
            <remarks>Line removal is only available for black and white images.</remarks>
            <pre>! IsNull ()</pre>
            <pre>! argImage.IsNull ()</pre>
            <param name="argImage">The image to clean.</param>
            <param name="rRectangle">The rectangle zone to process.</param>
            <param name="bRemoveHorizontalLines">If IDRS_TRUE, the horizontal lines are removed.</param>
            <param name="bRemoveVerticalLines">If IDRS_TRUE, the vertical lines are removed.</param>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CLineRemoval.RemoveLines(IDRSNET.CPage,IDRSNET.CIDRSRect,System.Boolean,System.Boolean)">
            <summary>
            RemoveLines removes lines in a zone of the black and white image of the given page.
            The black and white image must exist (otherwise an exception with the IDRS_ERROR_INVALID_CALL code is thrown).
            </summary>
            <remarks>Because line removal is only available for black and white images, the page must have a black and white image.</remarks>
            <pre>! IsNull ()</pre>
            <pre>! argPage.IsNull ()</pre>
            <param name="argPage">The page to clean.</param>
            <param name="rRectangle">The rectangle zone to process.</param>
            <param name="bRemoveHorizontalLines">If IDRS_TRUE, the horizontal lines are removed.</param>
            <param name="bRemoveVerticalLines">If IDRS_TRUE, the vertical lines are removed.</param>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="P:IDRSNET.CLineRemoval.HorizontalCleanY">
            <summary>
            SetHorizontalCleanY sets the parameter for cleaning noisy pixels attached to the horizontal lines.
            
            </summary>
            <remarks>The default value is IDRS_DFLT_LRM_HORZ_CLEAN_Y.</remarks>
            <pre> ! IsNull () </pre>
        </member>
        <member name="P:IDRSNET.CLineRemoval.HorizontalDilate">
            <summary>
            SetHorizontalDilate sets the dilate parameter that helps the detection of horizontal lines, especially for thin and/or skewed horizontal lines.
            
            </summary>
            <remarks>The default value is IDRS_DFLT_LRM_HORZ_DILATE.</remarks>
            <pre> ! IsNull () </pre>
        </member>
        <member name="P:IDRSNET.CLineRemoval.HorizontalMinLength">
            <summary>
            SetHorizontalMinLength sets the minimum length of the horizontal lines to remove.
            
            </summary>
            <remarks>The default value is IDRS_DFLT_LRM_HORZ_MIN_LENGTH.</remarks>
            <pre> ! IsNull () </pre>
        </member>
        <member name="P:IDRSNET.CLineRemoval.HorizontalCleanX">
            <summary>
            SetHorizontalCleanX sets the parameter for cleaning noisy pixels attached to the horizontal lines.
            
            </summary>
            <remarks>The default value is IDRS_DFLT_LRM_HORZ_CLEAN_X.</remarks>
            <pre> ! IsNull () </pre>
        </member>
        <member name="P:IDRSNET.CLineRemoval.HorizontalMaxGap">
            <summary>
            SetHorizontalMaxGap sets the maximum horizontal line gap to close.
            It is useful to remove broken lines.
            
            </summary>
            <remarks>The default value is IDRS_DFLT_LRM_HORZ_MAX_GAP.</remarks>
            <pre> ! IsNull () </pre>
        </member>
        <member name="P:IDRSNET.CLineRemoval.VerticalCleanX">
            <summary>
            SetVerticalCleanX sets the parameter for cleaning noisy pixels attached to the vertical lines.
            
            </summary>
            <remarks>The default value is IDRS_DFLT_LRM_VERT_CLEAN_X.</remarks>
            <pre> ! IsNull () </pre>
        </member>
        <member name="P:IDRSNET.CLineRemoval.VerticalCleanY">
            <summary>
            SetVerticalCleanY sets the parameter for cleaning noisy pixels attached to the vertical lines.
            
            </summary>
            <remarks>The default value is IDRS_DFLT_LRM_VERT_CLEAN_Y.</remarks>
            <pre> ! IsNull () </pre>
        </member>
        <member name="P:IDRSNET.CLineRemoval.VerticalDilate">
            <summary>
            SetVerticalDilate sets the dilate parameter that helps the detection of vertical lines, especially for thin and/or skewed vertical lines.
            
            </summary>
            <remarks>The default value is IDRS_DFLT_LRM_VERT_DILATE.</remarks>
            <pre> ! IsNull () </pre>
        </member>
        <member name="P:IDRSNET.CLineRemoval.HorizontalMaxThickness">
            <summary>
            SetHorizontalMaxThickness sets the maximum thickness of the horizontal lines to remove.
            It is useful to keep vertical lines larger than this parameter. Can be also useful to keep vertical letter strokes
            
            </summary>
            <remarks>The default value is IDRS_DFLT_LRM_HORZ_MAX_THICKNESS.</remarks>
            <pre> ! IsNull () </pre>
        </member>
        <member name="P:IDRSNET.CLineRemoval.VerticalMaxThickness">
            <summary>
            SetVerticalMaxThickness sets the maximum thickness of the vertical lines to remove.
            It is useful to keep horizontal lines larger than this parameter. Can be also useful to keep horizontal letter strokes.
            
            </summary>
            <remarks>The default value is IDRS_DFLT_LRM_VERT_MAX_THICKNESS.</remarks>
            <pre> ! IsNull () </pre>
        </member>
        <member name="P:IDRSNET.CLineRemoval.VerticalMaxGap">
            <summary>
            SetVerticalMaxGap sets the maximum vertical line gap to close.
            It is useful to remove broken lines.
            
            </summary>
            <remarks>The default value is IDRS_DFLT_LRM_VERT_MAX_GAP.</remarks>
            <pre> ! IsNull () </pre>
        </member>
        <member name="P:IDRSNET.CLineRemoval.VerticalMinLength">
            <summary>
            SetVerticalMinLength sets the minimum length of the vertical lines to remove.
            
            </summary>
            <remarks>The default value is IDRS_DFLT_LRM_VERT_MIN_LENGTH.</remarks>
            <pre> ! IsNull () </pre>
        </member>
        <member name="T:IDRSNET.CLngUtils">
            <summary>
            The CLngUtils class provides some helper methods to manage the iDRS languages.
            The class exposes functions for:
            - testing languages compatibility
            - detecting language type
            - compute character set
            \req IDRS::IDRS_MODULE_OCR
            </summary>
        </member>
        <member name="M:IDRSNET.CLngUtils.#ctor(IDRSNET.CIDRS)">
            <summary>
            Create creates a CLngUtils object
            </summary>
            <param name="argIDRS">- CIDRS handle object</param>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CLngUtils.Finalize">
            <summary>
            Destructor of CLngUtils.
            </summary>
        </member>
        <member name="M:IDRSNET.CLngUtils.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CLngUtils.GetPointer">
            <summary>
            Internal virtual  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CLngUtils.SetPointer(System.IntPtr)">
            <summary>
            Internal virtual  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CLngUtils object</param>
        </member>
        <member name="M:IDRSNET.CLngUtils.TestCompatibility(IDRSNET.Language,IDRSNET.Language)">
            <summary>
            TestCompatibility tests if two languages are compatible for an OCR context.
            TestCompatibility tests if the given two languages can be mixed inside the same OCR context.
            </summary>
            <pre>lMainLng &lt; IDRS_LNG_COUNT</pre>
            <pre>lSecLng &lt; IDRS_LNG_COUNT</pre>
            <param name="lMainLng">The identifier for the main language.</param>
            <param name="lSecLng">The identifier for the secondary language.</param>
            <returns>IDRS_TRUE if the first language accepts the given secondary language.</returns>
            <returns>IDRS_FALSE otherwise.</returns>
        </member>
        <member name="M:IDRSNET.CLngUtils.TestCompatibility(IDRSNET.Language[])">
            <summary>
            TestCompatibility tests if the given languages can be mixed inside the same OCR context.
            </summary>
            <param name="xlLanguages">An array containing the languages'identifiers.</param>
            <returns>IDRS_TRUE if the languages can be mixed.</returns>
            <returns>IDRS_FALSE otherwise.</returns>
        </member>
        <member name="M:IDRSNET.CLngUtils.TestCompatibility(IDRSNET.CLanguageSet)">
            <summary>
            TestCompatibility tests if the given languages can be mixed inside the same OCR context.
            </summary>
            <param name="argLanguageSet">Object containing the languages to be tested</param>
            <returns>IDRS_TRUE if the languages can be mixed.</returns>
            <returns>IDRS_FALSE otherwise.</returns>
        </member>
        <member name="M:IDRSNET.CLngUtils.IsAsian(IDRSNET.Language)">
            <summary>
            IsAsian tests if a language identifier concerns an Asian language.
            </summary>
            <param name="lLng">The identifier for the language to test.</param>
            <returns>IDRS_TRUE if the identifier is for an Asian language.</returns>
            <returns>IDRS_FALSE otherwise.</returns>
        </member>
        <member name="M:IDRSNET.CLngUtils.IsArabic(IDRSNET.Language)">
            <summary>
            IsArabic tests if a language identifier concerns an Arabic language.
            </summary>
            <param name="lLng">The identifier for the language to test.</param>
            <returns>IDRS_TRUE if the identifier is for an Arabic language.</returns>
            <returns>IDRS_FALSE otherwise.</returns>
        </member>
        <member name="M:IDRSNET.CLngUtils.ComputeCharset(IDRSNET.Language[],System.String@)">
            <summary>
            ComputeCharset computes the character set for the given languages.
            </summary>
            <pre>xlLanguages != NULL</pre>
            <pre>uiLngCount != 0</pre>
            <pre>wstrCharset != NULL</pre>
            <param name="xlLanguages">An array that contains the identifier for the languages.</param>
            <param name="wstrCharset">To return the character set.</param>
        </member>
        <member name="M:IDRSNET.CLngUtils.ComputeCharset(IDRSNET.Language,System.String@)">
            <summary>
            ComputeCharset computes the character set for the given language.
            </summary>
            <pre>lLanguage &lt; IDRS_LNG_COUNT</pre>
            <pre>wstrCharset != NULL</pre>
            <param name="lLanguage">The identifier for the language.</param>
            <param name="wstrCharset">To return the character set.</param>
        </member>
        <member name="M:IDRSNET.CLngUtils.ComputeCharset(IDRSNET.CLanguageSet,System.String)">
            <summary>
            ComputeCharset computes the character set for the supplied CLanguageSet object.
            </summary>
            <pre>lLanguage &lt; IDRS_LNG_COUNT</pre>
            <pre>! argCharacterSet.IsNull ()</pre>
            <param name="argLanguageSet">The CLanguageSet object containing the languages.</param>
            <param name="argCharacterSet">To return the character set.</param>
        </member>
        <member name="M:IDRSNET.CLngUtils.ComputeCharsetSize(IDRSNET.Language)">
            <summary>
            ComputeCharsetSize computes the size of the character set for the given language.
            </summary>
            <pre>lLanguage &lt; IDRS_LNG_COUNT</pre>
            <pre>wstrCharset != NULL</pre>
            <param name="lLanguage">The identifier for the language.</param>
            <returns>The size of the character set.</returns>
        </member>
        <member name="M:IDRSNET.CLngUtils.GetLanguageCategory(IDRSNET.Language)">
            <summary>
            GetLanguageCategory retrieves the language category identifier.
            </summary>
            <pre>lLng &lt; IDRS_LNG_COUNT</pre>
            <param name="lLng">The language identifier.</param>
            <returns>The category identifier.</returns>
        </member>
        <member name="T:IDRSNET.IDRS_MEMORY_ALLOCATION">
            <summary>
            Enums containing the types Memory allocation
            \ingroup module_core
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_MEMORY_ALLOCATION.IDRS_MEMORY_ALLOCATION_GLOBAL_ALLOC">
            <summary>
            Global memory allocation
            </summary>
            <remarks>This enum value is deprecated - if used, behavior will be the same than with IDRS_MEMORY_ALLOCATION_MALLOC.</remarks>
        </member>
        <member name="F:IDRSNET.IDRS_MEMORY_ALLOCATION.IDRS_MEMORY_ALLOCATION_MALLOC">
            <summary>
            Malloc memory allocation - malloc, free, etc
            </summary>
        </member>
        <member name="T:IDRSNET.CMemoryBuffer">
            <summary>
            CMemoryBuffer class manages a memory buffer.
            \ingroup module_core
            </summary>
        </member>
        <member name="M:IDRSNET.CMemoryBuffer.#ctor(System.UInt32,IDRSNET.IDRS_MEMORY_ALLOCATION)">
            <summary>
            The Create method creates a memory buffer object.
            </summary>
            <param name="uiInitialMemoryBufferSize">The initial memory buffer size.</param>
            <param name="maMemoryAllocation">The memory allocation.</param>
            <returns>The newly created memory buffer.</returns>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CMemoryBuffer.Finalize">
            <summary>
            Destructor of CMemoryBuffer.
            </summary>
        </member>
        <member name="M:IDRSNET.CMemoryBuffer.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CMemoryBuffer.GetPointer">
            <summary>
            Internal virtual  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CMemoryBuffer.SetPointer(System.IntPtr)">
            <summary>
            Internal virtual  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CMemoryBuffer object</param>
        </member>
        <member name="M:IDRSNET.CMemoryBuffer.Allocate(System.UInt32)">
            <summary>
            Allocate reallocates the memory buffer.
            The size of the memory buffer may be increase or decreased.
            </summary>
            <pre>! IsNull ()</pre>
            <pre>uiMemSize != 0</pre>
            <param name="uiMemSize">The number of memory needed.</param>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CMemoryBuffer.SetMemoryHandle(System.IntPtr,System.UInt32)">
            <summary>
            SetMemoryHandle specifies the raw memory handle that will be used for other operations in the current object instance.
            Please note that any existing memory already allocated by this object instance will be deleted.
            </summary>
            <param name="hMemoryBuffer">New raw memory handle</param>
            <param name="uiMemoryBufferSize">Size in bytes for the memory that is available in the memory handle</param>
        </member>
        <member name="M:IDRSNET.CMemoryBuffer.ExtractMemoryHandle">
            <summary>
            ExtractMemoryHandle returns the raw memory handle and removes any reference from it.
            The object instance will not hold any reference to the returned memory handle.
            It is the caller function responsibility to free the memory
            </summary>
            <returns>Raw memory handle</returns>
        </member>
        <member name="M:IDRSNET.CMemoryBuffer.Lock">
            <summary>
            Locks the memory handle and returns a memory pointer that can be used for memory operations
            </summary>
            <returns>Memory pointer</returns>
        </member>
        <member name="M:IDRSNET.CMemoryBuffer.Unlock">
            <summary>
            Unlock unlocks the memory handle.
            Please note that the memory pointer obtained using Lock is no longer valid, if the memory allocation method is IDRS_MEMORY_ALLOCATION_GLOBAL_ALLOC
            </summary>
        </member>
        <member name="P:IDRSNET.CMemoryBuffer.Length">
            <summary>
            GetLength returns the number of bytes allocated
            
            </summary>
            
        </member>
        <member name="P:IDRSNET.CMemoryBuffer.Data">
            <summary>
            GetData returns the memory data
            
            </summary>
            
        </member>
        <member name="T:IDRSNET.CMemoryPageSet">
            <summary>
            The CMemoryPageSet class represents the CPageSet implementation class that uses in-memory CPage objects to feed into document output engine
            \ingroup module_core module_document_output
            </summary>
        </member>
        <member name="M:IDRSNET.CMemoryPageSet.#ctor">
            <summary>
            Creates a new CMemoryPageSet
            </summary>
            <returns>The newly created CMemoryPageSet</returns>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CMemoryPageSet.#ctor(IDRSNET.CPage)">
            <summary>
            Creates a new CMemoryPageSet with a first page.
            </summary>
            <param name="argPage">CPage object containing the image and recognized data</param>
            <returns>The newly created CMemoryPageSet</returns>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CMemoryPageSet.Finalize">
            <summary>
            Destructor of CMemoryPageSet.
            </summary>
        </member>
        <member name="M:IDRSNET.CMemoryPageSet.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CMemoryPageSet.GetPointer">
            <summary>
            Internal GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CMemoryPageSet.SetPointer(System.IntPtr)">
            <summary>
            Internal SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CMemoryPageSet object</param>
        </member>
        <member name="M:IDRSNET.CMemoryPageSet.GetPageCount">
            <summary>
            GetPageCount returns the number of pages in the current CPageSet.
            </summary>
            <returns>The number of pages in the page set</returns>
        </member>
        <member name="M:IDRSNET.CMemoryPageSet.Seek(System.Int32,IDRSNET.IDRS_SEEK_POSITION)">
            <summary>
            Changes the page index in the page set
            This change affects the return of GetNextPage function
            </summary>
            <param name="iOffset">The number of pages to move the page index</param>
            <param name="spSeekPosition">The position relative to which the page index will be changed</param>
            <returns>The new 0-based index</returns>
        </member>
        <member name="M:IDRSNET.CMemoryPageSet.Add(IDRSNET.CPage)">
            <summary>
            Adds a new entry in the CPageSet
            </summary>
            <param name="argPage">CPage object containing the image and recognized data</param>
        </member>
        <member name="M:IDRSNET.CMemoryPageSet.GetNextPage">
            <summary>
            GetNextPage returns the next page to be processed by the document output engine
            </summary>
            <returns>The page to be used by the document output engine</returns>
        </member>
        <member name="T:IDRSNET.CMetadataInfo">
            <summary>
            CMetadataInfo class is used to contain a document metadata
            Each format has some supported metadata types:
            Xlsx, Pptx: Title, Author, Subject, Keywords, Company, Manager, Category, Description, CreationTime
            Docx: Title, Author, Subject, Keywords, Description, CreationTime
            Odt:  Title, Subject, Keywords, Creator, Producer, Company, Manager, Category, Comment, Description, CreationTime
            Rtf:  Title, Author, Subject, Keywords, Company, Manager, Category, Comment, CreationTime
            Epub: Title
            Html: Title, Author, Subject, Keywords, Creator, Producer, Company, Manager, Category, Comment, Description, CreationTime
            Pdf:  Title, Author, Subject, Keywords, Creator, Producer, CreationTime
            When setting a non supported type, an IDRS_ERROR_INVALID_ARGS exception is thrown.
            </summary>
        </member>
        <member name="M:IDRSNET.CMetadataInfo.#ctor(IDRSNET.OutputFormat)">
            <summary>
            Create is instantiating a new instance of CMetadataInfo and associated data object
            </summary>
            <param name="evOutputFormat">the output format the metadata will be created for</param>
            <returns>New instance of CMetadataInfo</returns>
        </member>
        <member name="M:IDRSNET.CMetadataInfo.Finalize">
            <summary>
            Destructor of CMetadataInfo.
            </summary>
        </member>
        <member name="M:IDRSNET.CMetadataInfo.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CMetadataInfo.GetPointer">
            <summary>
            Internal virtual  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CMetadataInfo.SetPointer(System.IntPtr)">
            <summary>
            Internal virtual  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CMetadataInfo object</param>
        </member>
        <member name="M:IDRSNET.CMetadataInfo.SetMetadata(IDRSNET.MetadataType,System.String)">
            <summary>
            SetMetadata sets a metadata associated with the output document
            Using SetMetadata, the integrator can set the document's author, subject, etc.
            Please note that not all types of metadata are supported by all of the output file format.
            </summary>
            <pre>! IsNull ()</pre>
            <param name="evMetadataType">The type of meta data.</param>
            <param name="strMetadata">The meta data value.</param>
            <remarks>If the metadata type is not valid for the current document, it will throw an IDRS_ERROR_INVALID_ARGS exception</remarks>
            <remarks>
            Creation time metadata must be expressed in the ISO format YYYY-MM-DDThh:mm:ssTZD (e.g. 2017-09-23T19:20:30+02:00).
            However keyword "Z" will not be accepted as a valid time zone definition; use +00:00 instead. If the given format in invalid,
            an IDRS_ERROR_INVALID_ARGS exception will be thrown.
            </remarks>
        </member>
        <member name="M:IDRSNET.CMetadataInfo.GetMetadata(IDRSNET.MetadataType,System.String@)">
            <summary>
            GetMetadata returns the stored value for a metadata field
            </summary>
            <param name="evMetadataType">Metadata type</param>
            <param name="strMetadataBuffer">Buffer where to store the result</param>
            <param name="uiBufferSize">Size of the buffer in bytes. It can be retreived GetMetadataSize</param>
            <remarks>If the supplied buffer is not enough or the metadata type is not valid for the current document, it will throw an IDRS_ERROR_INVALID_ARGS exception</remarks>
        </member>
        <member name="M:IDRSNET.CMetadataInfo.GetMetadataSize(IDRSNET.MetadataType)">
            <summary>
            GetMetadataSize Retrieves the size (length) in bytes of the metadata
            </summary>
            <param name="evMetadataType">The type of metadata to be retireved</param>
            <returns>the metadata size if metadata retrieved sucessfully, otherwise throws an IDRS_ERROR_INVALID_ARGS exception</returns>
        </member>
        <member name="P:IDRSNET.CMetadataInfo.OutputFormat">
            <summary>
            gets the output format.
            
            </summary>
            
        </member>
        <member name="T:IDRSNET.CMultiContext">
            <summary>
            The CMultiContext manages a map of recognition contexts.
            \ingroup module_core
            A context map allows the integrator to set a recognition context for each zone style.
            The context map has OCR and HAND_WRITE contexts. They are used to recognize text zones (IDRS_ZONE_TEXT).
            The barcode recognition contexts are used to recognize barcode zones (IDRS_ZONE_BARCODE).
            The barcode recognition is not available on mac.
            \req IDRS::IDRS_MODULE_OCR or IDRS::IDRS_MODULE_BARCODE
            <see cref="T:IDRSNET.COcrContext"/> 
            <see cref="T:IDRSNET.CBarcodeContext"/> 
            </summary>
        </member>
        <member name="M:IDRSNET.CMultiContext.#ctor">
            <summary>
            Create creates a context map.
            </summary>
        </member>
        <member name="M:IDRSNET.CMultiContext.Finalize">
            <summary>
            Destructor of CMultiContext.
            </summary>
        </member>
        <member name="M:IDRSNET.CMultiContext.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CMultiContext.GetPointer">
            <summary>
            Internal override  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CMultiContext.SetPointer(System.IntPtr)">
            <summary>
            Internal override  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CMultiContext object</param>
        </member>
        <member name="M:IDRSNET.CMultiContext.Add(IDRSNET.CBaseContext,System.UInt32)">
            <summary>
            Add adds the given context to the map.
            </summary>
            <remarks>An error occurs if there's already a context with the given style.</remarks>
            <pre>! IsNull()</pre>
            <pre>! argContext.IsNull ()</pre>
            <param name="argContext">The context to add.</param>
            <param name="uiStyle">The style for the zone(s) to recognize with this context.</param>
        </member>
        <member name="M:IDRSNET.CMultiContext.Add(IDRSNET.COcrContext,System.UInt32)">
            <summary>
            Add adds the given context to the map.
            </summary>
            <remarks>An error occurs if there's already a context for the given style.</remarks>
            <pre>! IsNull()</pre>
            <pre>! argContext.IsNull ()</pre>
            <param name="argContext">The context to add.</param>
            <param name="uiStyle">The style for the zone(s) to recognize with this context.</param>
        </member>
        <member name="M:IDRSNET.CMultiContext.Add(IDRSNET.CBarcodeContext,System.UInt32)">
            <summary>
            Add adds the given context to the map.
            </summary>
            <remarks>An error occurs if there's already a context for the given style.</remarks>
            <pre>! IsNull()</pre>
            <pre>! argContext.IsNull ()</pre>
            <param name="argContext">The context to add.</param>
            <param name="uiStyle">The style for the zone(s) to recognize with this context.</param>
        </member>
        <member name="M:IDRSNET.CMultiContext.GetAt(System.UInt32,System.UInt32@)">
            <summary>
            GetAt retrieves the Context object (can be OCR or Barcode context) and the corresponding style at the
            given index.
            The provided uiIndex is 0-based.
            </summary>
            <pre>! IsNull ()</pre>
            <remarks>If the index value is not found, an exception IDRS_ERROR_INVALID_ARGS will be thrown</remarks>
            <param name="uiIndex">The 0 based index of the context to retrieve.</param>
            <param name="argContext">To return the OCR context.</param>
            <param name="uiStyle">To return the style.</param>
            <returns>The context located at the specified index.</returns>
            <remarks></remarks>
        </member>
        <member name="M:IDRSNET.CMultiContext.GetByStyleId(System.UInt32)">
            <summary>
            GetByStyleId retrieves the Context object (can be OCR or Barcode context) based on the style id.
            </summary>
            <pre>! IsNull ()</pre>
            <param name="uiStyle">The style id for which the corresponding context is to be retrieved</param>
            <param name="argContext">To return the OCR context.</param>
            <returns>The context with the specified style.</returns>
            <returns>NULL, if the multi context does not contain a context with style uiStyle.</returns>
        </member>
        <member name="M:IDRSNET.CMultiContext.Delete(System.UInt32)">
            <summary>
            Delete deletes Context object (can be OCR or Barcode context) and the corresponding style from
            the given index.
            </summary>
            <pre>! IsNull ()</pre>
            <param name="uiIndex">The 0 based index of the context to retrieve.</param>
        </member>
        <member name="M:IDRSNET.CMultiContext.Clear">
            <summary>
            Clear reinitializes the map.
            </summary>
            <pre>! IsNull()</pre>
        </member>
        <member name="P:IDRSNET.CMultiContext.Count">
            <summary>
            GetCount returns the  number of elements (Context objects) in CMultiContext.
            
            </summary>
            
            <pre> ! IsNull() </pre>
        </member>
        <member name="T:IDRSNET.CNegative">
            <summary>
            The CNegative class offers negative image transformation.
            \ingroup module_prepro
            The class contains a image transformation algorithm that performs negative image transformation on an image or a part of an image
            \req IDRS::IDRS_MODULE_PREPRO
            <see cref="F:IDRSNET.IDRS_MODULE.IDRS_MODULE_PREPRO"/> for information about the preprocessing library
            </summary>
        </member>
        <member name="M:IDRSNET.CNegative.#ctor(IDRSNET.CIDRS)">
            <summary>
            Creates a new CNegative object.
            </summary>
            <param name="argIDRS">The iDRS</param>
            <returns>The newly created CNegative object.</returns>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CNegative.Finalize">
            <summary>
            Destructor of CNegative.
            </summary>
        </member>
        <member name="M:IDRSNET.CNegative.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CNegative.GetPointer">
            <summary>
            Internal override  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CNegative.SetPointer(System.IntPtr)">
            <summary>
            Internal override  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CNegative object</param>
        </member>
        <member name="M:IDRSNET.CNegative.Negative(IDRSNET.CImage)">
            <summary>
            Inverts the given image.
            </summary>
            <pre>! argImage.IsNull ()</pre>
            <param name="argImage">The image to process.</param>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CNegative.Negative(IDRSNET.CPage)">
            <summary>
            Inverts the given page.
            </summary>
            <pre>! argPage.IsNull ()</pre>
            <param name="argPage">The page to process.</param>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CNegative.Negative(IDRSNET.CImage,IDRSNET.CPolygon)">
            <summary>
            Inverts the given area in the image.
            </summary>
            <pre>! argPolygon.IsNull ()</pre>
            <pre>! argImage.IsNull ()</pre>
            <pre>argImage != argImage</pre>
            <param name="argImage">The image to process.</param>
            <param name="argPolygon">The area to process.</param>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CNegative.Negative(IDRSNET.CPage,IDRSNET.CPolygon)">
            <summary>
            Inverts the given area in the page.
            </summary>
            <pre>! argPolygon.IsNull ()</pre>
            <pre>! argPage.IsNull ()</pre>
            <param name="argPage">The page to process.</param>
            <param name="argPolygon">The area to process.</param>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CNegative.Negative(IDRSNET.CIDRS,IDRSNET.CImage)">
            <summary>
            Inverts the given image.
            </summary>
            <pre>! argImage.IsNull ()</pre>
            <param name="argIDRS">The iDRS</param>
            <param name="argImage">The image to process.</param>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CNegative.Negative(IDRSNET.CIDRS,IDRSNET.CPage)">
            <summary>
            Inverts the given page.
            </summary>
            <pre>! argPage.IsNull ()</pre>
            <param name="argIDRS">The iDRS</param>
            <param name="argPage">The page to process.</param>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CNegative.Negative(IDRSNET.CIDRS,IDRSNET.CImage,IDRSNET.CPolygon)">
            <summary>
            Inverts the given area in the image.
            </summary>
            <pre>! argPolygon.IsNull ()</pre>
            <pre>! argImage.IsNull ()</pre>
            <pre>argImage != argImage</pre>
            <param name="argIDRS">The iDRS</param>
            <param name="argImage">The image to process.</param>
            <param name="argPolygon">The area to process.</param>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CNegative.Negative(IDRSNET.CIDRS,IDRSNET.CPage,IDRSNET.CPolygon)">
            <summary>
            Inverts the given area in the page.
            </summary>
            <pre>! argPolygon.IsNull ()</pre>
            <pre>! argPage.IsNull ()</pre>
            <param name="argIDRS">The iDRS</param>
            <param name="argPage">The page to process.</param>
            <param name="argPolygon">The area to process.</param>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="T:IDRSNET.COcrContext">
            <summary>
            The COcrContext class manages a recognition context for the OCR engine.
            A recognition context consists in a recognition environment, one or multiple decision environments, a character set and a
            set of parameters the OCR engine will use to analyze/recognize pages.
            An OCR context has a unique recognition environment and one ore more decision environments.
            Decision environments are related to a specific language; recognition is related to the alphabets.
            The recognition environment is not immediately loaded at the time the integrator sets one or more languages in the OCR context.
            When the recognition process is started, iDRS SDK determines the alphabet used by the languages and loads the corresponding recognition environment.
            iDRS SDK also loads the corresponding decision environment for each language.
            For this reason, the multiple languages support is limited to a single alphabet. For example, russian and french
            can't be mixed.
            The number of languages an OCR context can manage at a time is specified in the define IDRS_LNG_COUNT_LIMIT.
            In addition to specifying the language, the integrator can limit the OCR context's character set. When the integrator set
            the languages for the OCR context, iDRS computes the characters used by the languages to limit the OCR character set to
            these characters. LimitCharset allows the integrator to set its own character set, for example a numeric character set.
            The SetUserLexicon () method adds an user lexicon to an existing decision environment. This is particularly useful
            for texts having specific terms.
            The user can build custom user lexicons. An user lexicon is a list of words put into a Unicode text file. Each word
            is separated by either a space, a tab or a carriage return (CR).
            </summary>
            <remarks>Asian languages can't be mixed.</remarks>
            <remarks>iDRS SDK can't load more than one asian language at a time.</remarks>
            <remarks>
            The text direction is only related to asian languages.
            \req IDRS::IDRS_MODULE_OCR
            <see cref="T:IDRSNET.Language"/> iDRS languages.
            <see cref="T:IDRSNET.CTextProperties.TEXT_TYPE"/> for the available text types in iDRS.
            <see cref="T:IDRSNET.CTextProperties.TEXT_SPACING"/> for the available text spacing types in iDRS
            <see cref="T:IDRSNET.CTextProperties.TEXT_DIRECTION"/> for the available text direction types
            The default recognition parameters.
            </remarks>
        </member>
        <member name="M:IDRSNET.COcrContext.#ctor(IDRSNET.Language,IDRSNET.CTextProperties.TEXT_TYPE,IDRSNET.CTextProperties.TEXT_SPACING,System.UInt32,IDRSNET.CTextProperties.TEXT_DIRECTION)">
            <summary>
            Create creates an OCR context for the given language and recognition parameters.
            </summary>
            <pre>lLanguage &lt; IDRS_LNG_COUNT</pre>
            <pre>ttTextType == TextTypeNormal || ttTextType == TextTypeDotMatrix || ttTextType == TextTypeOCRA1 || ttTextType == TextTypeOCRB1 || ttTextType == TextTypeE13B || ttTextType == TextTypeCMC7</pre>
            <pre>tsTextSpacing == IDRS_TEXT_SPACING_FIX || tsTextSpacing == IDRS_TEXT_SPACING_PRO || tsTextSpacing == IDRS_TEXT_SPACING_UNK</pre>
            <pre>tdTextDirection == IDRS_TEXT_DIRECTION_UNKNOWN || tdTextDirection == IDRS_TEXT_DIRECTION_LEFTTORIGHT || tdTextDirection == IDRS_TEXT_DIRECTION_TOPTOBOTTOM</pre>
            <pre>lLanguage == IDRS_LNG_JAPANESE || lLanguage == IDRS_LNG_KOREAN || lLanguage == IDRS_LNG_SCHINESE || lLanguage == IDRS_LNG_TCHINESE || tdTextDirection == IDRS_TEXT_DIRECTION_LEFTTORIGHT || tdTextDirection == IDRS_TEXT_DIRECTION_UNKNOWN</pre>
            <param name="lLanguage">The identifier for the recognition language.</param>
            <param name="ttTextType">The text type.</param>
            <param name="tsTextSpacing">The text spacing.</param>
            <param name="uiCharactersPerInch">The character pitch.</param>
            <param name="tdTextDirection">The text direction.</param>
        </member>
        <member name="M:IDRSNET.COcrContext.#ctor(IDRSNET.Language[],IDRSNET.CTextProperties.TEXT_TYPE,IDRSNET.CTextProperties.TEXT_SPACING,System.UInt32,IDRSNET.CTextProperties.TEXT_DIRECTION)">
            <summary>
            Create creates an OCR context for the given languages and recognition parameters.
            </summary>
            <pre>uiLanguagesCount >= 1</pre>
            <pre>uiLanguagesCount &lt;= IDRS_LNG_COUNT_LIMIT</pre>
            <pre>ttTextType == TextTypeNormal || ttTextType == TextTypeDotMatrix || ttTextType == TextTypeOCRA1 || ttTextType == TextTypeOCRB1 || ttTextType == TextTypeE13B || ttTextType == TextTypeCMC7</pre>
            <pre>tsTextSpacing == IDRS_TEXT_SPACING_FIX || tsTextSpacing == IDRS_TEXT_SPACING_PRO || tsTextSpacing == IDRS_TEXT_SPACING_UNK</pre>
            <pre>tdTextDirection == IDRS_TEXT_DIRECTION_UNKNOWN || tdTextDirection == IDRS_TEXT_DIRECTION_LEFTTORIGHT || tdTextDirection == IDRS_TEXT_DIRECTION_TOPTOBOTTOM</pre>
            <pre>xlLanguages [ 0 ] == IDRS_LNG_JAPANESE || xlLanguages [ 0 ] == IDRS_LNG_KOREAN || xlLanguages [ 0 ] == IDRS_LNG_SCHINESE || xlLanguages [ 0 ] == IDRS_LNG_TCHINESE || tdTextDirection == IDRS_TEXT_DIRECTION_LEFTTORIGHT || tdTextDirection == IDRS_TEXT_DIRECTION_UNKNOWN</pre>
            <param name="xlLanguages">An array that contains the identifiers for the languages to recognize.</param>
            <param name="ttTextType">The text type.</param>
            <param name="tsTextSpacing">The text spacing.</param>
            <param name="uiCharactersPerInch">The character pitch.</param>
            <param name="tdTextDirection">The text direction.</param>
            <exception>CIDRSException If an error occur.</exception>
            See <a href="page7.html">page7</a> 
        </member>
        <member name="M:IDRSNET.COcrContext.Finalize">
            <summary>
            Destructor of COcrContext.
            </summary>
        </member>
        <member name="M:IDRSNET.COcrContext.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.COcrContext.GetPointer">
            <summary>
            Internal override  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.COcrContext.SetPointer(System.IntPtr)">
            <summary>
            Internal override  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another COcrContext object</param>
        </member>
        <member name="M:IDRSNET.COcrContext.SetTextProperties(IDRSNET.CTextProperties.TEXT_TYPE,IDRSNET.CTextProperties.TEXT_SPACING,System.UInt32)">
            <summary>
            Set the text properties.
            It sets the following text properties:
            - type,
            - spacing,
            - character pitch.
            </summary>
            <pre>! IsNull ()</pre>
            <pre>ttTextType == TextTypeNormal || ttTextType == TextTypeDotMatrix || ttTextType == TextTypeOCRA1 || ttTextType == TextTypeOCRB1 || ttTextType == TextTypeE13B || ttTextType == TextTypeCMC7</pre>
            <pre>tsTextSpacing == IDRS_TEXT_SPACING_FIX || tsTextSpacing == IDRS_TEXT_SPACING_PRO || tsTextSpacing == IDRS_TEXT_SPACING_UNK</pre>
            <pre>tsTextSpacing != IDRS_TEXT_SPACING_FIX || ( uiCharactersPerInch != 0 || uiFinePitch != 0 )</pre>
            <param name="ttTextType">The text type.</param>
            <param name="tsTextSpacing">The text spacing.</param>
            <param name="uiCharactersPerInch">The number of characters per inch (cpi) (for fixed text spacing).</param>
        </member>
        <member name="M:IDRSNET.COcrContext.LimitCharsetCharacters(System.String)">
            <summary>
            LimitCharset changes the set of characters to recognize.
            </summary>
            <remarks>
            Please note that for Vietnamese language, if the limited charset contains a vowel with a tone mark, the vowel
            without tone mark can still be recognized by the OCR engine even if not part of the charset.
            Vietnamese tone marks are grave accent, acute accent, tilde above, hook above and dot below.
            </remarks>
            <param name="wstrCharset">A Unicode string that contains the new character set.</param>
        </member>
        <member name="M:IDRSNET.COcrContext.ResetCharsetCharacters">
            <summary>
            ResetCharsetCharacters removes any limitation on the characters used for recognition
            </summary>
        </member>
        <member name="M:IDRSNET.COcrContext.RemoveUserLexicon">
            <summary>
            RemoveUserLexicon disables the loading of user lexicon
            </summary>
        </member>
        <member name="M:IDRSNET.COcrContext.GetTextProperties(IDRSNET.CTextProperties.TEXT_TYPE@,IDRSNET.CTextProperties.TEXT_SPACING@,System.UInt32@)">
            <summary>
            Get the text properties values
            </summary>
            <param name="ttTextType">reference to TEXT_TYPE used to get the text type value.</param>
            <param name="tsTextSpacing">reference to TEXT_SPACING used to get the text spacing value.</param>
            <param name="uiCharactersPerInch">reference to IDRS_UINT used to get the characters per inch value.</param>
        </member>
        <member name="M:IDRSNET.COcrContext.Clone">
            <summary>
            Clone creates a copy of the current object
            It performs a deep copy of the information stored in current object
            </summary>
        </member>
        <member name="M:IDRSNET.COcrContext.IsEqual(IDRSNET.COcrContext)">
            <summary>
            IsEqual tests if two ocr contexts are equal.
            </summary>
            <pre>! IsNull ()</pre>
            <pre>! argOcrContext.IsNull ()</pre>
            <param name="argOcrContext">The ocr context to compare to</param>
            <returns>IDRS_TRUE if the provided ocr context equals the ocr context.</returns>
        </member>
        <member name="P:IDRSNET.COcrContext.UserLexicon">
            <summary>
            Get/Set the path to the user lexicon to be loaded in the decision environment used during ocr processing        /// If no user lexicon has been defined, the return value is an empty string
            </summary>
            <remarks>
            iDRS SDK will not copy more than the number of characters specified in this parameter
            If the buffer is large enough, the NULL terminating character will also be appended. If not, there will be no NULL termination character.
            </remarks>
        </member>
        <member name="P:IDRSNET.COcrContext.LimitedCharsetCharacters">
            <summary>
            GetCharsetCharacters retrieves the character set used to limit the characters recognized by the OCR engine
            
            </summary>
            
        </member>
        <member name="P:IDRSNET.COcrContext.AdvancedParameters">
            <summary>
            Get/Set the current COcrContext object
            </summary>
            <remarks>All changes to the returned object will have effect on the COcrContext object</remarks>
        </member>
        <member name="P:IDRSNET.COcrContext.TextDirection">
            <summary>
            Get/Set the text direction.
            </summary>
            
            <pre> ! IsNull ()
            tdTextDirection == IDRS_TEXT_DIRECTION_UNKNOWN || tdTextDirection == IDRS_TEXT_DIRECTION_LEFTTORIGHT || tdTextDirection == IDRS_TEXT_DIRECTION_TOPTOBOTTOM </pre>
        </member>
        <member name="P:IDRSNET.COcrContext.LanguageSet">
            <summary>
            Get/Set the current language set
            </summary>
            <remarks>All changes to the returned object will have effect on the COcrContext object</remarks>
        </member>
        <member name="P:IDRSNET.COcrContext.TextSpacing">
            <summary>
            Get text spacing
            
            </summary>
            
            <pre> ! IsNull () </pre>
        </member>
        <member name="P:IDRSNET.COcrContext.CharactersPerInch">
            <summary>
            Get the number of characters per inch
            
            </summary>
            
            <pre> ! IsNull () </pre>
        </member>
        <member name="P:IDRSNET.COcrContext.TextFontSet">
            <summary>
            Get/Set the font Get/Set that will be used for ocr recognition.
            The following values should be used for this method:
            - <see cref="!:CTextProperties.IDRS_FONT_SET_DEFAULT"/> 
            - <see cref="!:CTextProperties.IDRS_FONT_SET_EXTENDED"/> 
            - <see cref="!:CTextProperties.IDRS_FONT_SET_MS_OFFICE"/> 
            <see cref="T:IDRSNET.CTextProperties.IDRS_FONT_SET"/> for more details
            </summary>
            
        </member>
        <member name="P:IDRSNET.COcrContext.TextType">
            <summary>
            Get the text type
            
            </summary>
            
            <pre> ! IsNull () </pre>
        </member>
        <member name="T:IDRSNET.IDRS_SEGMENTATION_FILTER">
            <summary>
            iDRS segmentation filter to apply on zones to remove the ones that don't look like text.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_SEGMENTATION_FILTER.IDRS_SEGMENTATION_FILTER_OFF">
            <summary>
            No filtering 
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_SEGMENTATION_FILTER.IDRS_SEGMENTATION_FILTER_SIZE">
            <summary>
            Filtering based on size 
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_SEGMENTATION_FILTER.IDRS_SEGMENTATION_FILTER_SIZE_AND_OCR">
            <summary>
            Filetring based on size and ocr 
            </summary>
        </member>
        <member name="T:IDRSNET.COcrContextAdvancedParameters">
            <summary>
            The COcrContextAdvancedParameters class contains all the advanced parameters that are used for OCR recognition.
            \ingroup module_ocr
            The following parameters for the recognition process can be specified using this class:
            - <b>separate characters</b> - set the smallest division of ocr recognized text to contain only one character
            - <b>cleanup rectangles</b> - Cleanup rectangles represent the rectangles coordinate of the regions with text or graphics that are not part of an recognized character, but appear in the character bounding rectangle.
            - <b>alternative solutions</b> - enable the alternative solutions reporting
            - <b>keep dot leaders</b>
            - <b>fine pitch</b>
            - <b>segmentation filter</b> - filter to apply on zones during segmentation to remove elements that don't look like text.
            - <b>favor text over layout</b> - this parameter will tell the OCR engine to favor the searching of text on graphical areas (eg: logos, text appearing on a photo shot, etc...). Otherwise, set to false in order to tell the OCR engine not to find text in those areas. Thus it keeps the layout as much faithfully as possible.
            </summary>
        </member>
        <member name="M:IDRSNET.COcrContextAdvancedParameters.#ctor">
            <summary>
            Creates a COcrContextAdvancedParameters
            </summary>
            <returns>The newly created COcrContextAdvancedParameters object will be initialized will the default values</returns>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.COcrContextAdvancedParameters.Finalize">
            <summary>
            Destructor of COcrContextAdvancedParameters.
            </summary>
        </member>
        <member name="M:IDRSNET.COcrContextAdvancedParameters.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.COcrContextAdvancedParameters.GetPointer">
            <summary>
            Internal virtual  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.COcrContextAdvancedParameters.SetPointer(System.IntPtr)">
            <summary>
            Internal virtual  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another COcrContextAdvancedParameters object</param>
        </member>
        <member name="M:IDRSNET.COcrContextAdvancedParameters.IsFavorTextOverLayout">
            <summary>
            IsFavorTextOverLayout returns the favor text over layout value. By default, it returns IDRS_TRUE.
            </summary>
            <returns>IDRS_TRUE, if the OCR engine is set to favour text searching in graphical zones. IDRS_FALSE, if the OCR engine is set to favour to keep the layout the most faithfully as possible.</returns>
        </member>
        <member name="M:IDRSNET.COcrContextAdvancedParameters.Clone">
            <summary>
            Clone creates a copy of the current object
            It performs a deep copy of the information stored in current object
            </summary>
        </member>
        <member name="M:IDRSNET.COcrContextAdvancedParameters.IsEqual(IDRSNET.COcrContextAdvancedParameters)">
            <summary>
            IsEqual tests if two ocr context advanced parameters are equal.
            </summary>
            <pre>! IsNull ()</pre>
            <pre>! argOcrContextAdvancedParameters.IsNull ()</pre>
            <param name="argOcrContextAdvancedParameters">The ocr context advanced parameters to compare to</param>
            <returns>IDRS_TRUE if the provided ocr context advanced parameters equals the ocr context advanced parameters.</returns>
        </member>
        <member name="P:IDRSNET.COcrContextAdvancedParameters.ReadAlternativeSolutions">
            <summary>
            Get/Set a boolean flag indicating whether the recognition engine will also report the alternative solutions
            Specifying this flag allows the integrator to see what other solutions with lower accuracy have been found by the ocr engine
            </summary>
            <remarks>Default value: IDRS_TRUE</remarks>
        </member>
        <member name="P:IDRSNET.COcrContextAdvancedParameters.SegmentationFilter">
            <summary>
            Get/Set a boolean flag specifying what filter has to be applied on segmentation during
            page analysis in order to remove elements that don't look like text values. Choosing filter on size
            makes the ocr dismiss small zones, choosing filter on size and ocr makes the ocr dismiss small
            zones and perform ocr on boundery zones to know if it contains some text.
            IDRS_SEGMENTATION_FILTER_OFF : no filter,
            IDRS_SEGMENTATION_FILTER_SIZE : filter on size,
            IDRS_SEGMENTATION_FILTER_SIZE_AND_OCR : filter on size and ocr.
            </summary>
            <remarks>Default value: IDRS_DFLT_OCR_SEGMENTATION_FILTER [ ie IDRS_SEGMENTATION_FILTER_SIZE_AND_OCR ]</remarks>
        </member>
        <member name="P:IDRSNET.COcrContextAdvancedParameters.FavorTextOverLayout">
            <summary>
            Sets a boolean flag indicating wether to ask the OCR engine to favor layout or not.
            
            </summary>
            
        </member>
        <member name="P:IDRSNET.COcrContextAdvancedParameters.FinePitch">
            <summary>
            Get/Set a boolean flag specifies the text fine pitch.
            The value is expressed in pixels at a resolution of 300dpi.
            </summary>
            <remarks>
            When set to 0, characters per inch property will be used
            Default value: 0
            </remarks>
        </member>
        <member name="P:IDRSNET.COcrContextAdvancedParameters.EnableCleanupRectangles">
            <summary>
            Get/Set a boolean flag indicating whether the algorithm for detecting cleanup rectangles is enabled or not.
            Cleanup rectangles represent the rectangles coordinate of the regions with text or graphics
            that are not part of an recognized character, but appear in the character bounding rectangle.
            </summary>
            <remarks>Default value: IDRS_FALSE</remarks>
            <remarks>If cleanup rectangles feature is enabled, it is strongly advisable that separate characters feature is disabled</remarks>
        </member>
        <member name="P:IDRSNET.COcrContextAdvancedParameters.AdjustAnalysisForCameraImages">
            <summary>
            Get/Set the AdjustAnalysisForCameraImages flag
            </summary>
            <remarks>
            This flag is used to deactivate some unusefull processing operations for camera images which can result
            on some gain in term of processing time.
            This flag should only be used with camera images and must be unset with other types of images.
            By default, the flag is set to IDRS_FALSE.
            </remarks>
        </member>
        <member name="P:IDRSNET.COcrContextAdvancedParameters.SeparateCharacters">
            <summary>
            SetSeparateCharacters specifies whether to force the smallest division of ocr recognized text
            to contain only one character.
            </summary>
            <remarks>Default value: IDRS_FALSE</remarks>
            <remarks>If separate characters feature is enabled, it is strongly advisable that cleanup rectangles feature is disabled</remarks>
        </member>
        <member name="P:IDRSNET.COcrContextAdvancedParameters.FormatKeepDotLeaders">
            <summary>
            Get/Set a boolean flag indicating if the tabulation leaders should be used when getting output formatted data
            </summary>
            <remarks>Default value: IDRS_FALSE</remarks>
        </member>
        <member name="T:IDRSNET.COcrContextHelper">
            <summary>
            The COcrContextHelper class exposes to the integrator the methods that will be useful
            to determine possibility for some use cases given the current COcrContext configuration.
            </summary>
        </member>
        <member name="M:IDRSNET.COcrContextHelper.CanLimitCharset(IDRSNET.COcrContext)">
            <summary>
            Indicates wether or not we can apply a charset limitation on a given OCR context.
            </summary>
            <remarks>This method is deprecated; always returns IDRS_TRUE since iDRS version 15.5.4.</remarks>
            <pre>CIDRSSetup::IsModuleReady ( IDRS_MODULE_OCR )</pre>
            <param name="argOcrContext">The OCR Context for which we want to know if charset limitation can be applied</param>
            <returns>IDRS_TRUE If charset limitation can be applied on the provided OCR context</returns>
            <returns>IDRS_FALSE If charset limitation cannot be applied on the provided OCR context</returns>
        </member>
        <member name="T:IDRSNET.COdtOutputParams">
            <summary>
            COdtOutputParams class manages the parameters to create an Odt file
            </summary>
        </member>
        <member name="M:IDRSNET.COdtOutputParams.#ctor(IDRSNET.PageLayout)">
            <summary>
            Create is instantiating a new instance of COdtOutputParams and associated data object
            </summary>
            <param name="evPageLayout">the page layout type</param>
            <returns>New instance of COdtOutputParams</returns>
        </member>
        <member name="M:IDRSNET.COdtOutputParams.Finalize">
            <summary>
            Destructor of COdtOutputParams.
            </summary>
        </member>
        <member name="M:IDRSNET.COdtOutputParams.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.COdtOutputParams.GetPointer">
            <summary>
            Internal override  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.COdtOutputParams.SetPointer(System.IntPtr)">
            <summary>
            Internal override  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another COdtOutputParams object</param>
        </member>
        <member name="P:IDRSNET.COdtOutputParams.PageLayout">
            <summary>
            getter for the page layout type.
            
            </summary>
            
        </member>
        <member name="P:IDRSNET.COdtOutputParams.MetadataInfo">
            <summary>
            Get/Set the metadata info.
            </summary>
            
        </member>
        <member name="P:IDRSNET.COdtOutputParams.JpegCompressionOptions">
            <summary>
            Get/Set the Jpeg Compression Options property.
            </summary>
            
        </member>
        <member name="P:IDRSNET.COdtOutputParams.PageSizeOptions">
            <summary>
            Get/Set the page size options.
            </summary>
            
        </member>
        <member name="P:IDRSNET.COdtOutputParams.ImageProcessingOptions">
            <summary>
            Get/Set the image processing options.
            </summary>
            
        </member>
        <member name="T:IDRSNET.COutputParams">
            <summary>
            COutputParams class is the base class for different output classes
            </summary>
        </member>
        <member name="M:IDRSNET.COutputParams.Finalize">
            <summary>
            Destructor of COutputParams.
            </summary>
        </member>
        <member name="M:IDRSNET.COutputParams.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.COutputParams.GetPointer">
            <summary>
            Internal virtual  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.COutputParams.SetPointer(System.IntPtr)">
            <summary>
            Internal virtual  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another COutputParams object</param>
        </member>
        <member name="P:IDRSNET.COutputParams.OutputFormat">
            <summary>
            gets the output format.
            
            </summary>
            
        </member>
        <member name="T:IDRSNET.CPage">
            <summary>
            The CPage class manages a page in the IDRS.
            \ingroup module_core module_ocr module_barcode
            A page contains the following entities:
            - source image
            - binarized image in case the source image is not monochrome
            - zoning information - information about the recognized zones in the image and their type
            - recognition results - after the recognition process, the page object keeps a reference to the result
            </summary>
        </member>
        <member name="M:IDRSNET.CPage.#ctor(IDRSNET.CIDRS)">
            <summary>
            Create creates a new page.
            </summary>
            <param name="argIDRS">- CIDRS handle object</param>
            <returns>The newly created page.</returns>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CPage.#ctor(IDRSNET.CImage)">
            <summary>
            Create creates a new page with an image.
            The input image is copied as the source image for the page.
            </summary>
            <pre>! argImage.IsNull ()</pre>
            <pre>argImage.GetHeight () &amp;&amp; argImage.GetWidth ()</pre>
            <param name="argImage">The image to copy.</param>
            <returns>The newly created page.</returns>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CPage.Finalize">
            <summary>
            Destructor of CPage.
            </summary>
        </member>
        <member name="M:IDRSNET.CPage.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CPage.GetPointer">
            <summary>
            Internal virtual  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CPage.SetPointer(System.IntPtr)">
            <summary>
            Internal virtual  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CPage object</param>
        </member>
        <member name="M:IDRSNET.CPage.SetSourceImage(IDRSNET.CImage,System.Boolean)">
            <summary>
            SetSourceImage sets the source image for the page.
            </summary>
            <pre>! IsNull ()</pre>
            <pre>! argImage.IsNull ()</pre>
            <pre>argImage.GetHeight () &amp;&amp; argImage.GetWidth ()</pre>
            <pre>argImage.GetColorMode () == CImageProperties::BLACK_AND_WHITE || argImage.GetColorMode () == CImageProperties::GREYSCALE || argImage.GetColorMode () == CImageProperties::COLOR</pre>
            <param name="argImage">The image to copy as a source image.</param>
            <param name="bClearZones">If IDRS_TRUE, the existing zones are removed from the page.</param>
            <remarks>Removing zones also removes the page layout.</remarks>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CPage.SetSourceImage(System.UInt32,System.UInt32,IDRSNET.CImageProperties.ColorMode,System.UInt32,IDRSNET.ILineReader,System.Boolean)">
            <summary>
            Sets the source image for the page.
            </summary>
            <pre>! IsNull ()</pre>
            <pre>uiWidth &amp;&amp; uiHeight</pre>
            <pre>cmColorMode == CImageProperties::BLACK_AND_WHITE || cmColorMode == CImageProperties::GREYSCALE</pre>
            <remarks>|| cmColorMode == CImageProperties::COLOR</remarks>
            <param name="uiWidth">The width of the image.</param>
            <param name="uiHeight">The height of the image.</param>
            <param name="cmColorMode">The image color mode.</param>
            <param name="uiResolution">The resolution of the image (dpi).</param>
            <param name="rargLineReader">The object that provides the lines of the image.</param>
            <param name="bClearZones">If IDRS_TRUE, the existing zones are removed from the page.</param>
            <remarks>Removing zones also removes the page layout.</remarks>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CPage.AdoptSourceImage(IDRSNET.CImage,System.Boolean)">
            <summary>
            AdoptSourceImage takes the given source image, and transfer it in the page.
            </summary>
            <pre>! IsNull ()</pre>
            <pre>! argImage.IsNull ()</pre>
            <pre>argImage.GetHeight () &amp;&amp; argImage.GetWidth ()</pre>
            <pre>argImage.GetColorMode () == CImageProperties::BLACK_AND_WHITE || argImage.GetColorMode () == CImageProperties::GREYSCALE || argImage.GetColorMode () == CImageProperties::COLOR</pre>
            <param name="argImage">The image to transfer as a source image.</param>
            <param name="bClearZones">If IDRS_TRUE, the existing zones are removed from the page.</param>
            <remarks>Removing zones also removes the page layout.</remarks>
            <remarks>The CImage object will be set to NULL after the transfer.</remarks>
            <remarks>If the given CImage object has more than 1 reference on it, the function will throw IDRS_ERROR_INVALID_ARGS.</remarks>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CPage.SetBlackAndWhiteImage(IDRSNET.ILineReader)">
            <summary>
            SetBlackAndWhiteImage sets the black and white image for the page.
            The black and white image must have the same dimensions as the source image.
            </summary>
            <pre>! IsNull ()</pre>
            <pre>GetWidth () &amp;&amp; GetHeight ()</pre>
            <param name="lrLineReader">The object that will provide the black and white image's lines.</param>
            <exception>CIDRSException if an error occur.</exception>
            <remarks>
            \internal
            property disable
            \endinternal
            </remarks>
        </member>
        <member name="M:IDRSNET.CPage.SetBlackAndWhiteImage(IDRSNET.CImage)">
            <summary>
            SetBlackAndWhiteImage sets the black and white image for the page.
            The black and white image must have the same dimensions than the source image.
            </summary>
            <pre>! IsNull ()</pre>
            <pre>GetWidth () &amp;&amp; GetHeight ()</pre>
            <pre>! argImage.IsNull ()</pre>
            <pre>argImage.GetColorMode () == CImageProperties::BLACK_AND_WHITE</pre>
            <pre>argImage.GetWidth () == GetWidth ()</pre>
            <pre>argImage.GetHeight () == GetHeight ()</pre>
            <param name="argImage">The black and white image.</param>
            <exception>CIDRSException if an error occur.</exception>
            <remarks>
            \internal
            property disable
            \endinternal
            </remarks>
        </member>
        <member name="M:IDRSNET.CPage.LoadSourceImage(System.String,System.Boolean,System.UInt32)">
            <summary>
            LoadSourceImage loads the source image from a file.
            </summary>
            <pre>! IsNull ()</pre>
            <param name="strFileName">The name of the file that contains the source image.</param>
            <param name="bClearZones">If IDRS_TRUE, the current zones are removed from the page.</param>
            <param name="uiPageIndex">The 0 based index of the image to load from the provided file</param>
            <remarks>Removing zones also removes the page layout.</remarks>
            <remarks>
            iDRS default image plugin will throw an exception if uiImageIndex is uiPageIndex than 0 for
            non-multipage formats (any other than TIFF and PDF).
            </remarks>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CPage.LoadSourceImage(System.IO.Stream,System.Boolean,System.UInt32)">
            <summary>
            LoadSourceImage loads the source image from the supplied stream.
            </summary>
            <pre>! IsNull ()</pre>
            <param name="argInputStream">The input stream</param>
            <param name="bClearZones">If IDRS_TRUE, the current zones are removed from the page.</param>
            <param name="uiPageIndex">The 0 based index of the image to load from the provided file</param>
            <remarks>Removing zones also removes the page layout.</remarks>
            <remarks>
            iDRS default image plugin will throw an exception if uiImageIndex is uiPageIndex than 0 for
            non-multipage formats (any other than TIFF and PDF).
            </remarks>
            <remarks>The provided stream must contain one file.</remarks>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CPage.LoadSourceImage(System.String,IDRSNET.CImageLoadOptions,System.Boolean)">
            <summary>
            Load loads an image from a file, using options for loading.
            </summary>
            <pre>! IsNull ()</pre>
            <param name="strFileName">The name of the input file.</param>
            <param name="argLoadOptions">a reference to a CImageLoadOptions object.</param>
            <param name="bClearZones">If IDRS_TRUE, the current zones are removed from the page.</param>
            <remarks>Clearing zones also removes the page layout.</remarks>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CPage.LoadSourceImage(System.IO.Stream,IDRSNET.CImageLoadOptions,System.Boolean)">
            <summary>
            Load loads an image from a stream, using options for loading.
            </summary>
            <pre>! IsNull ()</pre>
            <param name="argInputStream">The image's input stream.</param>
            <param name="argLoadOptions">a reference to a CImageLoadOptions object.</param>
            <param name="bClearZones">If IDRS_TRUE, the current zones are removed from the page.</param>
            <remarks>Clearing zones also removes the page layout.</remarks>
            <remarks>The provided stream must contain one file.</remarks>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CPage.LoadBlackAndWhiteImage(System.String)">
            <summary>
            LoadBlackAndWhiteImage loads the page's black and white image from a file.
            The black and white image must have the same dimensions than the source image.
            </summary>
            <pre>! IsNull ()</pre>
            <pre>GetWidth () &amp;&amp; GetHeight ()</pre>
            <pre>GetSourceImageColorMode () != CImageProperties::BLACK_AND_WHITE</pre>
            <param name="strFileName">The name of the file that contains the black and white source image.</param>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CPage.LoadBlackAndWhiteImage(System.IO.Stream)">
            <summary>
            LoadBlackAndWhiteImage loads the page's black and white image from a stream.
            The black and white image must have the same dimensions than the source image.
            </summary>
            <pre>! IsNull ()</pre>
            <pre>GetWidth () &amp;&amp; GetHeight ()</pre>
            <pre>GetSourceImageColorMode () != CImageProperties::BLACK_AND_WHITE</pre>
            <param name="argInputStream">The stream that contains the black and white source image.</param>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CPage.SaveSourceImage(System.String,IDRSNET.CImageFileFormat.FileFormat,IDRSNET.CImageOptions)">
            <summary>
            SaveSourceImage saves the source image to a file.
            <see cref="M:IDRSNET.CImage.Save(System.String,IDRSNET.CImageFileFormat.FileFormat,IDRSNET.CImageOptions)"/> 
            </summary>
            <pre>! IsNull ()</pre>
            <pre>GetWidth () &amp;&amp; GetHeight ()</pre>
            <pre>! argImageOptions.IsNull ()</pre>
            <param name="strFileName">The name of the file.</param>
            <param name="ffFileFormat">The file format.</param>
            <param name="argImageOptions">The file format options.</param>
            <remarks>
            It requires an imaging module to be enabled in order to save the files.
            For more information about modules and available image types, please consult @ref page9
            </remarks>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CPage.SaveSourceImage(System.IO.Stream,IDRSNET.CImageFileFormat.FileFormat,IDRSNET.CImageOptions)">
            <summary>
            SaveSourceImage saves the source image to a file using the specified image compressor.
            <see cref="M:IDRSNET.CImage.Save(System.String,IDRSNET.CImageFileFormat.FileFormat,IDRSNET.CImageOptions)"/> 
            </summary>
            <pre>! IsNull ()</pre>
            <pre>GetWidth () &amp;&amp; GetHeight ()</pre>
            <pre>! argImageOptions.IsNull ()</pre>
            <param name="argStream">The stream where to store the image data</param>
            <param name="ffFileFormat">The file format.</param>
            <param name="argImageOptions">The file format options.</param>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CPage.SaveSourceImage(System.String,IDRSNET.IBaseImagePlugin,IDRSNET.CImageFileFormat.FileFormat,IDRSNET.CImageOptions)">
            <summary>
            SaveSourceImage saves the source image to a file using the specified image plugin.
            <see cref="M:IDRSNET.CImage.Save(System.String,IDRSNET.CImageFileFormat.FileFormat,IDRSNET.CImageOptions)"/> 
            </summary>
            <pre>! IsNull ()</pre>
            <pre>GetWidth () &amp;&amp; GetHeight ()</pre>
            <pre>! argImageOptions.IsNull ()</pre>
            <param name="strFileName">The name of the file.</param>
            <param name="argImagePlugin">The image plugin to use.</param>
            <param name="ffFileFormat">The file format.</param>
            <param name="argImageOptions">The file format options.</param>
            <remarks>
            It requires an imaging module to be enabled in order to save the files.
            For more information about modules and available image types, please consult @ref page9
            </remarks>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CPage.SaveSourceImage(System.IO.Stream,IDRSNET.IBaseImagePlugin,IDRSNET.CImageFileFormat.FileFormat,IDRSNET.CImageOptions)">
            <summary>
            SaveSourceImage saves the source image to a file using the specified image plugin.
            <see cref="M:IDRSNET.CImage.Save(System.String,IDRSNET.CImageFileFormat.FileFormat,IDRSNET.CImageOptions)"/> 
            </summary>
            <pre>! IsNull ()</pre>
            <pre>GetWidth () &amp;&amp; GetHeight ()</pre>
            <pre>! argImageOptions.IsNull ()</pre>
            <param name="argStream">The stream where to store the image data</param>
            <param name="argImagePlugin">The image plugin to use.</param>
            <param name="ffFileFormat">The file format.</param>
            <param name="argImageOptions">The file format options.</param>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CPage.SaveBlackAndWhiteImage(System.String,IDRSNET.CImageFileFormat.FileFormat,IDRSNET.CImageOptions)">
            <summary>
            SaveBlackAndWhiteImage saves the black and white image to the given file.
            </summary>
            <pre>! IsNull ()</pre>
            <pre>IsBlackAndWhiteImageAvailable ()</pre>
            <pre>! argImageOptions.IsNull ()</pre>
            <param name="strFileName">The name of the file.</param>
            <param name="ffFileFormat">The file format.</param>
            <param name="argImageOptions">The file format options.</param>
            <remarks>
            It requires an imaging module to be enabled in order to save the files.
            For more information about modules and available image types, please consult @ref page9
            </remarks>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CPage.SaveBlackAndWhiteImage(System.IO.Stream,IDRSNET.CImageFileFormat.FileFormat,IDRSNET.CImageOptions)">
            <summary>
            SaveBlackAndWhiteImage saves the black and white image to the given stream.
            </summary>
            <pre>! IsNull ()</pre>
            <pre>IsBlackAndWhiteImageAvailable ()</pre>
            <pre>! argImageOptions.IsNull ()</pre>
            <param name="argStream">The stream where to store the saved image.</param>
            <param name="ffFileFormat">The file format.</param>
            <param name="argImageOptions">The file format options.</param>
            <remarks>
            It requires an imaging module to be enabled in order to save the files.
            For more information about modules and available image types, please consult @ref page9
            </remarks>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CPage.SaveBlackAndWhiteImage(System.String,IDRSNET.IBaseImagePlugin,IDRSNET.CImageFileFormat.FileFormat,IDRSNET.CImageOptions)">
            <summary>
            SaveBlackAndWhiteImage saves the black and white image to the given file using the specified image plugin
            </summary>
            <pre>! IsNull ()</pre>
            <pre>IsBlackAndWhiteImageAvailable ()</pre>
            <pre>! argImageOptions.IsNull ()</pre>
            <param name="strFileName">The name of the file.</param>
            <param name="argImagePlugin">The image plugin to use for saving</param>
            <param name="ffFileFormat">The file format.</param>
            <param name="argImageOptions">The file format options.</param>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CPage.SaveBlackAndWhiteImage(System.IO.Stream,IDRSNET.IBaseImagePlugin,IDRSNET.CImageFileFormat.FileFormat,IDRSNET.CImageOptions)">
            <summary>
            SaveBlackAndWhiteImage saves the black and white image to the given stream, using the specified image plugin
            </summary>
            <pre>! IsNull ()</pre>
            <pre>IsBlackAndWhiteImageAvailable ()</pre>
            <pre>! argImageOptions.IsNull ()</pre>
            <param name="argStream">The stream where to store the saved image.</param>
            <param name="argImagePlugin">The image plugin to use for saving</param>
            <param name="ffFileFormat">The file format.</param>
            <param name="argImageOptions">The file format options.</param>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CPage.LoadZones(System.String)">
            <summary>
            LoadZones loads zones from the given file.
            </summary>
            <pre>! IsNull ()</pre>
            <param name="strFileName">The name of the file.</param>
        </member>
        <member name="M:IDRSNET.CPage.LoadZones(System.IO.Stream)">
            <summary>
            LoadZones loads zones from the given file.
            </summary>
            <pre>! IsNull ()</pre>
            <param name="argStream">The input stream</param>
        </member>
        <member name="M:IDRSNET.CPage.SaveZones(System.String,System.Byte)">
            <summary>
            SaveZones saves zones to the given file.
            </summary>
            <pre>! IsNull ()</pre>
            <param name="strFileName">The name of the file.</param>
            <param name="ucZonesVersion">The file version for the file header used to save the file.</param>
            <remarks>ucZonesVersion must be equal or higher than IDRS_ZONE_FILE_FORMAT_VERSION_10.</remarks>
        </member>
        <member name="M:IDRSNET.CPage.SaveZones(System.IO.Stream,System.Byte)">
            <summary>
            SaveZones saves zones to the given stream.
            </summary>
            <pre>! IsNull ()</pre>
            <param name="argStream">The output stream.</param>
            <param name="ucZonesVersion">The file version for the file header used to save the file.</param>
            <remarks>ucZonesVersion must be equal or higher than IDRS_ZONE_FILE_FORMAT_VERSION_10.</remarks>
        </member>
        <member name="M:IDRSNET.CPage.GetImagePixels(IDRSNET.CImageProperties.ColorMode)">
            <summary>
            GetImagePixels provides an access to the pixels of a page's image.
            </summary>
            <pre>! IsNull ()</pre>
            <pre>GetHeight () &amp;&amp; GetWidth ()</pre>
            <pre>cmColorMode != CImageProperties::BLACK_AND_WHITE || IsBlackAndWhiteImageAvailable ()</pre>
            <pre>cmColorMode == CImageProperties::BLACK_AND_WHITE || cmColorMode == GetSourceImageColorMode ()</pre>
            <param name="cmColorMode">The color mode of the image.</param>
            <returns>The pixels of the requested page's image.</returns>
        </member>
        <member name="M:IDRSNET.CPage.IsBlackAndWhiteImageAvailable">
            <summary>
            IsBlackAndWhiteImageAvailable tests if a black and white image is available.
            </summary>
            <pre>! IsNull ()</pre>
            <returns>IDRS_TRUE if there's a black and white image.</returns>
            <returns>IDRS_FALSE otherwise.</returns>
        </member>
        <member name="M:IDRSNET.CPage.GetImageCopy(IDRSNET.CImageProperties.ColorMode,IDRSNET.CImage)">
            <summary>
            GetImageCopy creates a copy of an image of the page.
            </summary>
            <pre>! IsNull ()</pre>
            <pre>GetHeight () &amp;&amp; GetWidth ()</pre>
            <pre>cmColorMode == CImageProperties::BLACK_AND_WHITE || cmColorMode == CImageProperties::GREYSCALE</pre>
            <remarks>|| cmColorMode == CImageProperties::COLOR</remarks>
            <param name="cmColorMode">The image color mode.</param>
            <param name="argImageTarget">To return the image copy.</param>
        </member>
        <member name="P:IDRSNET.CPage.PageContent2">
            <summary>
            Get/Set the CPageContent2 object associated with the CPage object.
            Using CPageContent2 class provides an integrator with read/write access to page content
            </summary>
            
            <pre> ! IsNull () </pre>
        </member>
        <member name="P:IDRSNET.CPage.Height">
            <summary>
            
            </summary>
            
            <pre> ! IsNull () </pre>
        </member>
        <member name="P:IDRSNET.CPage.Width">
            <summary>
            
            </summary>
            
            <pre> ! IsNull () </pre>
        </member>
        <member name="P:IDRSNET.CPage.SourceImageColorMode">
            <summary>
            
            </summary>
            
            <pre> ! IsNull ()
            GetWidth () &amp;&amp; GetHeight () </pre>
        </member>
        <member name="P:IDRSNET.CPage.Resolution">
            <summary>
            
            </summary>
            
            <pre> ! IsNull ()
            GetHeight () &amp;&amp; GetWidth () </pre>
        </member>
        <member name="P:IDRSNET.CPage.RecognitionZoneArray">
            <summary>
            SetRecognitionZoneArray Get/Set the zone array used for recognition
            Setting the recognition zones array would allow the integrators to perform recognition only on certain areas.
            This function is only used in conjunction with CPageRecognition::RecognizeZones.        /// The CRecognitionZoneArray object contains the recognition zones associated to the CPage object
            </summary>
            
        </member>
        <member name="T:IDRSNET.CPageBookmark">
            <summary>
            CPageBookmark represents a bookmark on a page.
            </summary>
        </member>
        <member name="M:IDRSNET.CPageBookmark.#ctor(System.String)">
            <summary>
            Creates a new instance.
            </summary>
            <pre>strTitle != NULL &amp;&amp; strTitle[0] != L'\0'</pre>
            <param name="strTitle">NULL terminated string of IDRS_WCHAR characters (UTF-16 encoded) specifying the bookmark's title.</param>
        </member>
        <member name="M:IDRSNET.CPageBookmark.Finalize">
            <summary>
            Destructor of CPageBookmark.
            </summary>
        </member>
        <member name="M:IDRSNET.CPageBookmark.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CPageBookmark.GetPointer">
            <summary>
            Internal override  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CPageBookmark.SetPointer(System.IntPtr)">
            <summary>
            Internal override  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CPageBookmark object</param>
        </member>
        <member name="P:IDRSNET.CPageBookmark.Destination">
            <summary>
            Get/Set the bookmark destination (positioning on the page).
            </summary>
            <remarks>
            The destination's coordinates actually used to write the bookmark depend on the display mode set:
            - uiTop: used by modes PageWidth, ContentWidth, Rectangle, Zoom
            - uiLeft: used by modes PageHeight, ContentHeight, Rectangle, Zoom
            - uiBottom and uiRight: used by mode Rectangle only
            </remarks>
        </member>
        <member name="P:IDRSNET.CPageBookmark.DisplayMode">
            <summary>
            Get/Set the display mode of the bookmark.
            </summary>
            <remarks>
            This setting allows to specify how a bookmark's destination should be displayed, when the created document is opened
            in a viewer and the bookmark is selected there.
            It has no effet on the content of the output document itself; only the intended behavior of the bookmark's selection in a viewer is concerned.
            </remarks>
        </member>
        <member name="P:IDRSNET.CPageBookmark.Children">
            <summary>
            Get/Set the bookmark's children.
            </summary>
            
            <pre> !xChildren.IsNull() </pre>
        </member>
        <member name="P:IDRSNET.CPageBookmark.ZoomFactor">
            <summary>
            Get/Set the bookmark zoom factor.
            </summary>
            <remarks>
            The zoom factor is used only if the display mode is set to Zoom. The magnification level of the page will
            then be set to the zoom factor.
            A zoom factor of 100 (i.e. 100%) means the page will be displayed with its actual size.
            </remarks>
            <pre> uiZoomFactor > 0 </pre>
        </member>
        <member name="P:IDRSNET.CPageBookmark.Title">
            <summary>
            Get/Set the title of the bookmark.
            </summary>
            
            <pre> strTitle != NULL &amp;&amp; strTitle[0] != L'\0' </pre>
        </member>
        <member name="T:IDRSNET.CPageColumn">
            <summary>
            CPageColumn represents a column in a page section.
            </summary>
        </member>
        <member name="M:IDRSNET.CPageColumn.#ctor">
            <summary>
            Instantiates a new CPageColumn object
            </summary>
        </member>
        <member name="M:IDRSNET.CPageColumn.Finalize">
            <summary>
            Destructor of CPageColumn.
            </summary>
        </member>
        <member name="M:IDRSNET.CPageColumn.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CPageColumn.GetPointer">
            <summary>
            Internal override  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CPageColumn.SetPointer(System.IntPtr)">
            <summary>
            Internal override  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CPageColumn object</param>
        </member>
        <member name="P:IDRSNET.CPageColumn.BoundingBox">
            <summary>
            Get/Set the coordinates for the bounding rectangle.
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageColumn.Zones">
            <summary>
            Get/Set the zones in the column.
            </summary>
            <remarks>The zone coordinates need to be included in the column bounding box</remarks>
        </member>
        <member name="T:IDRSNET.CPageContent2">
            <summary>
            CPageContent2 represents the results content of CPage.
            The content is editable, meaning that an integrator can easily update any part of the page content
            </summary>
        </member>
        <member name="T:IDRSNET.CPageContent2.IDRS_PAGE_CONTENT_FILE_TYPE">
            <summary>
            Enumerable that lists the possible output formats for saving page content
            </summary>
        </member>
        <member name="F:IDRSNET.CPageContent2.IDRS_PAGE_CONTENT_FILE_TYPE.IDRS_PAGE_CONTENT_FILE_TYPE_BINARY">
            <summary>
            Binary format
            </summary>
        </member>
        <member name="M:IDRSNET.CPageContent2.#ctor">
            <summary>
            Instantiates a new page content object with default values
            </summary>
        </member>
        <member name="M:IDRSNET.CPageContent2.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Create instantiates a new page content object and initializes the basic values
            </summary>
            <param name="iPageWidth">Page width</param>
            <param name="iPageHeight">Page height</param>
            <param name="iPageResolution">Page resolution</param>
        </member>
        <member name="M:IDRSNET.CPageContent2.Finalize">
            <summary>
            Destructor of CPageContent2.
            </summary>
        </member>
        <member name="M:IDRSNET.CPageContent2.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CPageContent2.GetPointer">
            <summary>
            Internal override  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CPageContent2.SetPointer(System.IntPtr)">
            <summary>
            Internal override  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CPageContent2 object</param>
        </member>
        <member name="M:IDRSNET.CPageContent2.Clear">
            <summary>
            Clears all elements in the page
            </summary>
        </member>
        <member name="M:IDRSNET.CPageContent2.Load(System.String)">
            <summary>
            Load loads zones from the given file.
            </summary>
            <pre>! IsNull ()</pre>
            <param name="strFileName">The name of the file.</param>
        </member>
        <member name="M:IDRSNET.CPageContent2.Load(System.IO.Stream)">
            <summary>
            Load loads zones from the given stream.
            </summary>
            <pre>! IsNull ()</pre>
            <param name="argStream">The input stream</param>
        </member>
        <member name="M:IDRSNET.CPageContent2.Save(System.String,System.Byte,IDRSNET.CPageContent2.IDRS_PAGE_CONTENT_FILE_TYPE)">
            <summary>
            Save saves zones to the given file.
            </summary>
            <pre>! IsNull ()</pre>
            <param name="strFileName">The name of the file.</param>
            <param name="ucZonesVersion">The file format version to use</param>
            <param name="evPageContentFileType">The file type to save to</param>
        </member>
        <member name="M:IDRSNET.CPageContent2.Save(System.IO.Stream,System.Byte,IDRSNET.CPageContent2.IDRS_PAGE_CONTENT_FILE_TYPE)">
            <summary>
            Save saves zones to the given stream.
            </summary>
            <pre>! IsNull ()</pre>
            <param name="argStream">The output stream.</param>
            <param name="ucZonesVersion">The file format version to use</param>
            <param name="evPageContentFileType">The file type to save to</param>
        </member>
        <member name="M:IDRSNET.CPageContent2.Save(System.String,IDRSNET.CPageContent2.IDRS_PAGE_CONTENT_FILE_TYPE,System.Byte)">
            <summary>
            Save saves zones to the given file.
            </summary>
            <pre>! IsNull ()</pre>
            <param name="strFileName">The name of the file.</param>
            <param name="evPageContentFileType">The file type to save to</param>
            <param name="ucZonesVersion">The file format version to use</param>
        </member>
        <member name="M:IDRSNET.CPageContent2.Save(System.IO.Stream,IDRSNET.CPageContent2.IDRS_PAGE_CONTENT_FILE_TYPE,System.Byte)">
            <summary>
            Save saves zones to the given stream.
            </summary>
            <pre>! IsNull ()</pre>
            <param name="argStream">The output stream.</param>
            <param name="evPageContentFileType">The file type to save to</param>
            <param name="ucZonesVersion">The file format version to use</param>
        </member>
        <member name="P:IDRSNET.CPageContent2.PageMargins">
            <summary>
            Get/Set the page margins.
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageContent2.PageHeight">
            <summary>
            Get/Set the page height.
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageContent2.PageMainLanguage">
            <summary>
            Get/Set the main language used in the page.
            </summary>
            <remarks>There might be several languages used in the page. The main language represents the language that is used more often.</remarks>
        </member>
        <member name="P:IDRSNET.CPageContent2.PageStyle">
            <summary>
            Get/Set the page style associated to the page content.
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageContent2.PageWidth">
            <summary>
            Get/Set the page width.
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageContent2.GraphicShapes">
            <summary>
            Get/Set the array containing the graphic shapes.
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageContent2.Metadata">
            <summary>
            Get/Set the page metadata.
            </summary>
            
            <pre> !argPageMetadata.IsNull() </pre>
        </member>
        <member name="P:IDRSNET.CPageContent2.Sections">
            <summary>
            Get/Set the array containing the page sections.
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageContent2.PageResolution">
            <summary>
            Get/Set the page resolution.
            </summary>
            
        </member>
        <member name="T:IDRSNET.CPageCustomData">
            <summary>
            CPageCustomData allows to store inside iDRS page content some integrator-provided data.
            </summary>
        </member>
        <member name="M:IDRSNET.CPageCustomData.Finalize">
            <summary>
            Destructor of CPageCustomData.
            </summary>
        </member>
        <member name="M:IDRSNET.CPageCustomData.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CPageCustomData.GetPointer">
            <summary>
            Internal override  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CPageCustomData.SetPointer(System.IntPtr)">
            <summary>
            Internal override  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CPageCustomData object</param>
        </member>
        <member name="P:IDRSNET.CPageCustomData.CustomDataSize">
            <summary>
            Get the size of the custom data currently stored in this object, or 0 if no data is stored.
            
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageCustomData.CustomData">
            <summary>
            Get/Set the custom data to be stored in this object. The iDRS will perform no interpretation of the provided buffer, and simply store it as-is.
            </summary>
            <remarks>If uiDataSize is 0, xbData will not be used and stored data will be reset.</remarks>
            <remarks>The provided data will be copied in an internal buffer.</remarks>
        </member>
        <member name="T:IDRSNET.CPageFont">
            <summary>
            CPageFont represents a font in iDRS SDK
            A font contains the following data:
            - font family name and/or font postscript name
            - font properties
            </summary>
        </member>
        <member name="M:IDRSNET.CPageFont.#ctor">
            <summary>
            Instantiates a new font object
            </summary>
        </member>
        <member name="M:IDRSNET.CPageFont.Finalize">
            <summary>
            Destructor of CPageFont.
            </summary>
        </member>
        <member name="M:IDRSNET.CPageFont.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CPageFont.GetPointer">
            <summary>
            Internal override  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CPageFont.SetPointer(System.IntPtr)">
            <summary>
            Internal override  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CPageFont object</param>
        </member>
        <member name="P:IDRSNET.CPageFont.FontFamilyName">
            <summary>
            Get/Set the font family name
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageFont.IsItalic">
            <summary>
            Get/Set the italic flag
            </summary>
            <remarks>
            \internal
            property IsItalic/Get
            \endinternal
            </remarks>
        </member>
        <member name="P:IDRSNET.CPageFont.FontPostscriptName">
            <summary>
            Get/Set the font postscript name
            </summary>
            
            <pre> strFontPostscriptName cannot contain space
            strFontPostscriptName cannot contain non-ASCII character
            The length of strFontPostscriptName &lt;= IDRS_MAX_POSTSCRIPT_NAME_SIZE, cannot contain space </pre>
        </member>
        <member name="P:IDRSNET.CPageFont.IsAsian">
            <summary>
            Get/Set the asian flag
            </summary>
            <remarks>
            \internal
            property IsAsian/Get
            \endinternal
            </remarks>
        </member>
        <member name="P:IDRSNET.CPageFont.FamilyType">
            <summary>
            Get/Set the font family type        /// <see cref="T:IDRSNET.CTextProperties.FONT_FAMILY_TYPE"/> for a list with available font family types
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageFont.TextFontSet">
            <summary>
            Get/Set the font Get/Set associated to the font
            Currently the only CTextProperties::IDRS_FONT_SET_CUSTOM is allowed to be created by integrators.
            Setting any other value might cause an error.
            <see cref="T:IDRSNET.CTextProperties.IDRS_FONT_SET"/> for more details
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageFont.IsBold">
            <summary>
            Get/Set the boolean flag for bold property
            </summary>
            <remarks>
            \internal
            property IsBold/Get
            \endinternal
            </remarks>
        </member>
        <member name="T:IDRSNET.CPageGraphicShape">
            <summary>
            CPageGraphicShape represents the base class for graphic shapes that can be represented in iDRS SDK
            This class is a base class, so integrators are not expected to instantiate objects of this type.
            </summary>
        </member>
        <member name="T:IDRSNET.CPageGraphicShape.GraphicShapeType">
            <summary>
            GraphicShapeType contains the types of graphic shapes in iDRS SDK
            </summary>
        </member>
        <member name="F:IDRSNET.CPageGraphicShape.GraphicShapeType.GraphicShapeLine">
            <summary>
            ! Line shape: can be either horizontal or vertical
            </summary>
        </member>
        <member name="M:IDRSNET.CPageGraphicShape.#ctor(IDRSNET.CPageGraphicShape.GraphicShapeType)">
            <summary>
            Creates a new instance of CPageGraphicShape, initialized with the proper data class, based on supplied evGraphicShapeType
            </summary>
        </member>
        <member name="M:IDRSNET.CPageGraphicShape.Finalize">
            <summary>
            Destructor of CPageGraphicShape.
            </summary>
        </member>
        <member name="M:IDRSNET.CPageGraphicShape.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CPageGraphicShape.GetPointer">
            <summary>
            Internal override  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CPageGraphicShape.SetPointer(System.IntPtr)">
            <summary>
            Internal override  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CPageGraphicShape object</param>
        </member>
        <member name="P:IDRSNET.CPageGraphicShape.RotationAngle">
            <summary>
            Get/Set the zone rotation angle, in degrees
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageGraphicShape.BoundingPolygon">
            <summary>
            Get/Set the polygon containing all zone content
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageGraphicShape.GraphicShapeTypeValue">
            <summary>
            Returns the type of graphic shape associated to this object
            
            </summary>
            <remarks>
            \internal
            property GraphicShapeTypeValue/Get
            \endinternal
            </remarks>
        </member>
        <member name="T:IDRSNET.CPageGraphicShapeLine">
            <summary>
            CPageGraphicShapeLine represents a line graphic shape
            </summary>
        </member>
        <member name="M:IDRSNET.CPageGraphicShapeLine.#ctor">
            <summary>
            Creates a new instance of a CPageGraphicShapeLine object
            </summary>
        </member>
        <member name="M:IDRSNET.CPageGraphicShapeLine.Finalize">
            <summary>
            Destructor of CPageGraphicShapeLine.
            </summary>
        </member>
        <member name="M:IDRSNET.CPageGraphicShapeLine.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CPageGraphicShapeLine.GetPointer">
            <summary>
            Internal override  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CPageGraphicShapeLine.SetPointer(System.IntPtr)">
            <summary>
            Internal override  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CPageGraphicShapeLine object</param>
        </member>
        <member name="P:IDRSNET.CPageGraphicShapeLine.Width">
            <summary>
            Get/Set the width of the line
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageGraphicShapeLine.DrawingColor">
            <summary>
            Get/Set the color used to draw the line
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageGraphicShapeLine.Center">
            <summary>
            Get/Set the coordinates for line center
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageGraphicShapeLine.LineType">
            <summary>
            Get/Set the type of line for the current object
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageGraphicShapeLine.Height">
            <summary>
            Get/Set the height of the line
            </summary>
            
        </member>
        <member name="T:IDRSNET.CPageMetadata">
            <summary>
            CPageMetadata represents the metadata content of a page.
            </summary>
        </member>
        <member name="M:IDRSNET.CPageMetadata.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:IDRSNET.CPageMetadata.Finalize">
            <summary>
            Destructor of CPageMetadata.
            </summary>
        </member>
        <member name="M:IDRSNET.CPageMetadata.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CPageMetadata.GetPointer">
            <summary>
            Internal override  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CPageMetadata.SetPointer(System.IntPtr)">
            <summary>
            Internal override  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CPageMetadata object</param>
        </member>
        <member name="P:IDRSNET.CPageMetadata.Bookmarks">
            <summary>
            Get/Set the page's bookmarks.
            </summary>
            
            <pre> !xBookmarks.IsNull() </pre>
        </member>
        <member name="P:IDRSNET.CPageMetadata.OriginalRotation">
            <summary>
            Get/Set the value for the original rotation of the input source.
            When running the OCR and automatic orientation detection is enabled, iDRS automatically sets the detected rotation angle as OriginalRotation.
            Since the OCR can only be executed on input sources with 0 degrees rotation, the input source is also rotated internally.
            Updating the OriginalRotation is having an effect on the following output document types:
            - PDF: when UseOriginalRotation is set to IDRS_TRUE in CPdfOutputParams     /// This function is retrieving the original rotation angle of the input source image
            </summary>
            
        </member>
        <member name="T:IDRSNET.CPageParagraph">
            <summary>
            CPageParagraph represents a text paragraph
            The class contains the following info:
            - lines with text
            - bounding rectangle
            - paragraph style
            </summary>
        </member>
        <member name="M:IDRSNET.CPageParagraph.#ctor">
            <summary>
            Creates a new instance of a paragraph object
            </summary>
        </member>
        <member name="M:IDRSNET.CPageParagraph.Finalize">
            <summary>
            Destructor of CPageParagraph.
            </summary>
        </member>
        <member name="M:IDRSNET.CPageParagraph.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CPageParagraph.GetPointer">
            <summary>
            Internal override  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CPageParagraph.SetPointer(System.IntPtr)">
            <summary>
            Internal override  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CPageParagraph object</param>
        </member>
        <member name="P:IDRSNET.CPageParagraph.ParagraphListStyle">
            <summary>
            Get/Set the list style
            The list style is expected to be set if the paragraph type is set to PARAGRAPH_TYPE_LIST (see <see cref="!:GetParagraphType"/>)       /// A paragraph can be part of a list spanning multiple paragraphs. Details about the type can be found in CPageParagraphListStyle
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageParagraph.Style">
            <summary>
            SetStyle Get/Set the paragraph style
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageParagraph.ParagraphType">
            <summary>
            Get/Set the paragraph type.
            Please note that if the paragraph type is set to PARAGRAPH_TYPE_LIST, the paragraph list style needs to be set as well. (see <see cref="!:SetParagraphListStyle"/>) 
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageParagraph.BoundingPolygon">
            <summary>
            Get/Set the polygon containing all paragraph content
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageParagraph.TextLines">
            <summary>
            SetTextLines Get/Set the text lines in the paragraph
            </summary>
            
        </member>
        <member name="T:IDRSNET.CPageParagraphListStyle">
            <summary>
            CPageParagraphListStyle represents a list style associated to a text paragraph
            A list can contain one or more paragraphs. This class contains the info that describe the style of the list which should be applied to the text paragraph:
            - List type: ordered/unordered
            - List style: character type used in front of list elements: disc, circle, square, decimal number, etc
            - Starting number: the starting number for numbered lists
            - Post character: the character to be used after the list type. Ex: ')' generates the output 1), 2), a), etc
            </summary>
        </member>
        <member name="M:IDRSNET.CPageParagraphListStyle.#ctor">
            <summary>
            Generates a new instance of a CPageParagraphListStyle and initializes it with default values
            </summary>
        </member>
        <member name="M:IDRSNET.CPageParagraphListStyle.#ctor(IDRSNET.CIDRSList)">
            <summary>
            Generates a new instance of CPageParagraphListStyle and initializes it with data from supplied IDRS_LIST argument
            </summary>
            <param name="stList">Structure containing initialization data</param>
        </member>
        <member name="M:IDRSNET.CPageParagraphListStyle.Finalize">
            <summary>
            Destructor of CPageParagraphListStyle.
            </summary>
        </member>
        <member name="M:IDRSNET.CPageParagraphListStyle.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CPageParagraphListStyle.GetPointer">
            <summary>
            Internal override  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CPageParagraphListStyle.SetPointer(System.IntPtr)">
            <summary>
            Internal override  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CPageParagraphListStyle object</param>
        </member>
        <member name="P:IDRSNET.CPageParagraphListStyle.ListType">
            <summary>
            Get/Set the list type (ordered/unordered).
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageParagraphListStyle.StartingNumber">
            <summary>
            Get/Set the list starting number.
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageParagraphListStyle.PostCharacter">
            <summary>
            Get/Set the character to be used after the list type. Ex: ')' generates the output 1), 2), a), etc.
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageParagraphListStyle.Coordinates">
            <summary>
            Get/Set list coordinates.
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageParagraphListStyle.ListStyle">
            <summary>
            Get/Set the list style: character type used in front of list elements: disc, circle, square, decimal number, etc.
            </summary>
            
        </member>
        <member name="T:IDRSNET.CPageParagraphsGroup">
            <summary>
            CPageParagraphsGroup represents a group of text paragraphs
            </summary>
        </member>
        <member name="M:IDRSNET.CPageParagraphsGroup.#ctor">
            <summary>
            Creates a new instance of CPageParagraphsGroup
            </summary>
        </member>
        <member name="M:IDRSNET.CPageParagraphsGroup.Finalize">
            <summary>
            Destructor of CPageParagraphsGroup.
            </summary>
        </member>
        <member name="M:IDRSNET.CPageParagraphsGroup.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CPageParagraphsGroup.GetPointer">
            <summary>
            Internal override  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CPageParagraphsGroup.SetPointer(System.IntPtr)">
            <summary>
            Internal override  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CPageParagraphsGroup object</param>
        </member>
        <member name="P:IDRSNET.CPageParagraphsGroup.ParagraphListStyle">
            <summary>
            Get/Set the paragraph list style applied to the paragraph group.        /// The paragraph list style is expected to be used only if the group paragraph type is PARAGRAPH_TYPE_LIST
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageParagraphsGroup.Style">
            <summary>
            Get/Set the paragraph group style
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageParagraphsGroup.ParagraphType">
            <summary>
            Get/Set the paragraph type for the paragraphs in the group
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageParagraphsGroup.BoundingPolygon">
            <summary>
            Get/Set the polygon that embeds the paragraphs group content
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageParagraphsGroup.Paragraphs">
            <summary>
            Get/Set the list with paragraphs
            </summary>
            
        </member>
        <member name="T:IDRSNET.CPageRecognition">
            <summary>
            The CPageRecognition class manages iDRS SDK analysis and recognition.
            \ingroup module_core module_ocr module_barcode
            The class is responsible for invoking the correct recognition engine, based on the parameters supplied and to get the recognition results.
            It offers the following functionalities:
            - gets the recognition parameters and translates them to the recognition engines
            - determine page orientation
            - analyze zoning information - detects which are the ocr/barcode zones in the page
            - performs recognition on full page or on a subset of zones
            </summary>
        </member>
        <member name="M:IDRSNET.CPageRecognition.#ctor(IDRSNET.CIDRS)">
            <summary>
            Creates a new CPageRecognition object
            </summary>
            <pre>! argIdrs.IsNull ()</pre>
            <param name="argIdrs">- handle to the CIDRS object</param>
            <returns>The newly created page recognition object</returns>
            <exception>CIDRSException if an error occur.</exception>
            <remarks>If the supplied CIDRS object is not initialized, an exception will be thrown.</remarks>
        </member>
        <member name="M:IDRSNET.CPageRecognition.#ctor(IDRSNET.CIDRS,IDRSNET.CBaseContext)">
            <summary>
            Creates a new CPageRecognition object
            </summary>
            <pre>! argIdrs.IsNull ()</pre>
            <pre>! argBaseContext.IsNull ()</pre>
            <param name="argIdrs">Handle to the CIDRS object</param>
            <param name="argBaseContext">The recognition context</param>
            <returns>The newly created page recognition object</returns>
            <exception>CIDRSException if an error occur.</exception>
            <remarks>If the supplied CIDRS object is not initialized, an exception will be thrown.</remarks>
        </member>
        <member name="M:IDRSNET.CPageRecognition.Finalize">
            <summary>
            Destructor of CPageRecognition.
            </summary>
        </member>
        <member name="M:IDRSNET.CPageRecognition.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CPageRecognition.GetPointer">
            <summary>
            Internal virtual  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CPageRecognition.SetPointer(System.IntPtr)">
            <summary>
            Internal virtual  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CPageRecognition object</param>
        </member>
        <member name="M:IDRSNET.CPageRecognition.SetOrientationDetection(System.Boolean,System.Boolean)">
            <summary>
            Set the orientation detection parameters.
            During page analysis, iDRS can detect the orientation of a page.
            It can also rotate the page.
            </summary>
            <pre>! IsNull ()</pre>
            <param name="bDetectOrientation">The detect orientation flag.</param>
            <param name="bRotatePage">The rotate page flag.</param>
        </member>
        <member name="M:IDRSNET.CPageRecognition.GetOrientationDetection(System.Boolean@,System.Boolean@)">
            <summary>
            Get the orientation detection parameters
            </summary>
            <pre>! IsNull ()</pre>
        </member>
        <member name="M:IDRSNET.CPageRecognition.AnalyzeLayout(IDRSNET.CPage,IDRSNET.IDRS_ENGINE,IDRSNET.CIDRSRect)">
            <summary>
            AnalyzeLayout analyzes the page using the given engine.
            Removes all the zone of the page and detects new zones using the given engine.
            </summary>
            <pre>! IsNull ()</pre>
            <pre>! argPage.IsNull ()</pre>
            <pre>argPage.GetHeight () &amp;&amp; argPage.GetWidth ()</pre>
            <pre>engine != IDRS_ENGINE_OCR || CIDRSSetup::IsModuleReady ( IDRS_MODULE_OCR )</pre>
            <pre>engine != IDRS_ENGINE_BARCODE || CIDRSSetup::IsModuleReady ( IDRS_MODULE_BARCODE )</pre>
            <pre>engine == IDRS_ENGINE_OCR || engine == IDRS_ENGINE_BARCODE</pre>
            <param name="argPage">The page to analyze.</param>
            <param name="eEngine">The identifier for the engine to use.</param>
            <param name="pRectangle">Pointer to the rectangular part of the page to analyze.</param>
            <returns>The rotation angle (automatic orientation detection).</returns>
            <remarks>The automatic language detection will never be performed when using this method (use AnalyzeLayoutEx() instead).</remarks>
        </member>
        <member name="M:IDRSNET.CPageRecognition.AnalyzeLayoutEx(IDRSNET.CPage,IDRSNET.IDRS_ENGINE,IDRSNET.CIDRSRect)">
            <summary>
            AnalyzeLayoutEx analyzes the page using the given engine.
            Removes all the zone of the page and detects new zones using the given engine.
            In addition it runs auto language detection if OCR engine is used.
            </summary>
            <pre>! IsNull ()</pre>
            <pre>! argPage.IsNull ()</pre>
            <pre>argPage.GetHeight () &amp;&amp; argPage.GetWidth ()</pre>
            <pre>engine != IDRS_ENGINE_OCR || CIDRSSetup::IsModuleReady ( IDRS_MODULE_OCR )</pre>
            <pre>engine != IDRS_ENGINE_BARCODE || CIDRSSetup::IsModuleReady ( IDRS_MODULE_BARCODE )</pre>
            <pre>engine == IDRS_ENGINE_OCR || engine == IDRS_ENGINE_BARCODE</pre>
            <param name="argPage">The page to analyze.</param>
            <param name="eEngine">The identifier for the engine to use.</param>
            <param name="pRectangle">Pointer to the rectangular part of the page to analyze. This structure should be instanciated beforehand.</param>
            <returns>A TextDetectionResults containing the results of the language and orientation detection.</returns>
            <remarks>This method does not work correctly on .NET Framework 4.8. If you are using this .NET version, please use the other overload.</remarks>
            <remarks>
            If language detection flag is set (via a call to SetLanguageDetection()), automatic language detection will be run.
            Detection results will be available in the structure returned, and can contain languages protected by an OCR extension even if
            the corresponding extension is not set up.
            If no language could be detected, or if language detection is disabled, the languages array in the TextDetectionResults output
            will be filled with IDRS_LANGUAGE_NONE at confidence level 255.
            </remarks>
        </member>
        <member name="M:IDRSNET.CPageRecognition.AnalyzeLayoutEx(IDRSNET.CPage,IDRSNET.CTextdetectionresults@,IDRSNET.IDRS_ENGINE,IDRSNET.CIDRSRect)">
            <summary>
            AnalyzeLayoutEx analyzes the page using the given engine.
            Removes all the zone of the page and detects new zones using the given engine.
            In addition it runs auto language detection if OCR engine is used.
            </summary>
            <pre>! IsNull ()</pre>
            <pre>! argPage.IsNull ()</pre>
            <pre>argPage.GetHeight () &amp;&amp; argPage.GetWidth ()</pre>
            <pre>engine != IDRS_ENGINE_OCR || CIDRSSetup::IsModuleReady ( IDRS_MODULE_OCR )</pre>
            <pre>engine != IDRS_ENGINE_BARCODE || CIDRSSetup::IsModuleReady ( IDRS_MODULE_BARCODE )</pre>
            <pre>engine == IDRS_ENGINE_OCR || engine == IDRS_ENGINE_BARCODE</pre>
            <param name="argPage">The page to analyze.</param>
            <param name="rargTextDetectionResults">A TextDetectionResults object that will be updated with the results of the language and orientation detection.</param>
            <param name="eEngine">The identifier for the engine to use.</param>
            <param name="pRectangle">Pointer to the rectangular part of the page to analyze. This structure should be instantiated beforehand.</param>
            <remarks>
            \internal
            out_struct_param rargTextDetectionResults
            \endinternal
            </remarks>
            <remarks>This method overload was introduced as an workaround an issue with .NET Framework 4.8 PInvoke which does not work with certain type of struct return types.</remarks>
            <remarks>
            If language detection flag is set (via a call to SetLanguageDetection()), automatic language detection will be run.
            Detection results will be available in the structure returned, and can contain languages protected by an OCR extension even if
            the corresponding extension is not set up.
            If no language could be detected, or if language detection is disabled, the languages array in the TextDetectionResults output
            will be filled with IDRS_LANGUAGE_NONE at confidence level 255.
            </remarks>
        </member>
        <member name="M:IDRSNET.CPageRecognition.RecognizeZones(IDRSNET.CPage,System.UInt32,System.UInt32,System.Boolean)">
            <summary>
            Recognizes the zones of the page using the appropriate recognition engine.
            Uses the zone type to determine the engine to be used.
            </summary>
            <param name="argPage">The page to process.</param>
            <param name="uiFirstZoneIndex">The 0 based index of the first zone to recognize.</param>
            <param name="uiZoneCount">The number of zones to recognize, 0 to recognize all zones.</param>
            <param name="bReadTextFormat">Boolean flag indicating if layout formatting information should be retrieved.</param>
            <remarks>If layout formatting information is requested, only ocr recognition will be performed</remarks>
        </member>
        <member name="M:IDRSNET.CPageRecognition.RecognizePage(IDRSNET.CPage,IDRSNET.IDRS_ENGINE,IDRSNET.CIDRSRect,System.Boolean)">
            <summary>
            RecognizePage Performs image recognition on a the page or part of a page, using the given engine.
            Removes all the zone of the page, detect new zones using the given engine then reads the zones, as well as detecting
            page orientation and document language if the corresponding flags are set.
            </summary>
            <pre>! IsNull ()</pre>
            <pre>! argPage.IsNull ()</pre>
            <pre>argPage.GetHeight () &amp;&amp; argPage.GetWidth ()</pre>
            <pre>pRectangle == NULL || (pRectangle != NULL &amp;&amp; pRectangle->uiTop &lt; pRectangle->uiBottom &amp;&amp; pRectangle->uiLeft &lt; pRectangle->uiRight )</pre>
            <pre>pRectangle == NULL || (pRectangle != NULL &amp;&amp; pRectangle->uiBottom &lt; argPage.GetHeight () &amp;&amp; pRectangle->uiRight &lt; argPage.GetWidth ())</pre>
            <pre>engine != IDRS_ENGINE_OCR || CIDRSSetup::IsModuleReady ( IDRS_MODULE_OCR )</pre>
            <pre>engine != IDRS_ENGINE_BARCODE || CIDRSSetup::IsModuleReady ( IDRS_MODULE_BARCODE )</pre>
            <pre>engine == IDRS_ENGINE_OCR || engine == IDRS_ENGINE_BARCODE</pre>
            <param name="argPage">The page to read.</param>
            <param name="engine">The identifier for the engine to use.</param>
            <param name="pRectangle">The rectangular part of the page to read.</param>
            <param name="bReadTextFormat">Boolean flag indicating if layout formatting information should be retrieved. This parameter is ignored when engine is set to IDRS_MODULE_BARCODE</param>
            <remarks>Please note that for barcode recognition, reading document layout doesn't make sense, so the parameter bReadTextFormat is ignored.</remarks>
            <returns>The rotation angle (result of page orientation detection).</returns>
            <remarks>
            If language detection flag is set (via a call to SetLanguageDetection()), automatic language detection will be run
            before performing OCR.
            If a language is detected, and is authorized by licensing, recognition will be performed with this language. Note that this will
            not modify the OCR context that has been set in the CPageRecognition instance.
            Otherwise, recognition will be performed using the OCR context set in this CPageRecognition instance.
            </remarks>
        </member>
        <member name="M:IDRSNET.CPageRecognition.RecognizePageEx(IDRSNET.CPage,IDRSNET.IDRS_ENGINE,IDRSNET.CIDRSRect,System.Boolean)">
            <summary>
            RecognizePage Performs image recognition on a the page or part of a page, using the given engine.
            Removes all the zone of the page, detect new zones using the given engine then reads the zones, as well as detecting
            page orientation and document language if the corresponding flags are set.
            </summary>
            <pre>! IsNull ()</pre>
            <pre>! argPage.IsNull ()</pre>
            <pre>argPage.GetHeight () &amp;&amp; argPage.GetWidth ()</pre>
            <pre>pRectangle == NULL || (pRectangle != NULL &amp;&amp; pRectangle->uiTop &lt; pRectangle->uiBottom &amp;&amp; pRectangle->uiLeft &lt; pRectangle->uiRight )</pre>
            <pre>pRectangle == NULL || (pRectangle != NULL &amp;&amp; pRectangle->uiBottom &lt; argPage.GetHeight () &amp;&amp; pRectangle->uiRight &lt; argPage.GetWidth ())</pre>
            <pre>engine != IDRS_ENGINE_OCR || CIDRSSetup::IsModuleReady ( IDRS_MODULE_OCR )</pre>
            <pre>engine != IDRS_ENGINE_BARCODE || CIDRSSetup::IsModuleReady ( IDRS_MODULE_BARCODE )</pre>
            <pre>engine == IDRS_ENGINE_OCR || engine == IDRS_ENGINE_BARCODE</pre>
            <param name="argPage">The page to read.</param>
            <param name="engine">The identifier for the engine to use.</param>
            <param name="pRectangle">The rectangular part of the page to read.</param>
            <param name="bReadTextFormat">Boolean flag indicating if layout formatting information should be retrieved. This parameter is ignored when engine is set to IDRS_MODULE_BARCODE</param>
            <remarks>Please note that for barcode recognition, reading document layout doesn't make sense, so the parameter bReadTextFormat is ignored.</remarks>
            <returns>A TextDetectionResults containing the results of language and page orientation detection.</returns>
            <remarks>This method does not work correctly on .NET Framework 4.8. If you are using this .NET version, please use the other overload.</remarks>
            <remarks>
            If language detection flag is set (via a call to SetLanguageDetection()), automatic language detection will be run
            before performing OCR.
            Detection results will be available in the structure returned, and can contain languages protected by an OCR extension even if
            the corresponding extension is not set up.
            If no language could be detected, or if language detection is disabled, the languages array in the TextDetectionResults output
            will be filled with IDRS_LANGUAGE_NONE at confidence level 255.
            If a language is detected, and is authorized by licensing, recognition will be performed with this language. Note that this will
            not modify the OCR context that has been set in the CPageRecognition instance.
            Otherwise, recognition will be performed using the OCR context set in this CPageRecognition instance.
            </remarks>
        </member>
        <member name="M:IDRSNET.CPageRecognition.RecognizePageEx(IDRSNET.CPage,IDRSNET.CTextdetectionresults@,IDRSNET.IDRS_ENGINE,IDRSNET.CIDRSRect,System.Boolean)">
            <summary>
            RecognizePage Performs image recognition on a the page or part of a page, using the given engine.
            Removes all the zone of the page, detect new zones using the given engine then reads the zones, as well as detecting
            page orientation and document language if the corresponding flags are set.
            </summary>
            <pre>! IsNull ()</pre>
            <pre>! argPage.IsNull ()</pre>
            <pre>argPage.GetHeight () &amp;&amp; argPage.GetWidth ()</pre>
            <pre>pRectangle == NULL || (pRectangle != NULL &amp;&amp; pRectangle->uiTop &lt; pRectangle->uiBottom &amp;&amp; pRectangle->uiLeft &lt; pRectangle->uiRight )</pre>
            <pre>pRectangle == NULL || (pRectangle != NULL &amp;&amp; pRectangle->uiBottom &lt; argPage.GetHeight () &amp;&amp; pRectangle->uiRight &lt; argPage.GetWidth ())</pre>
            <pre>engine != IDRS_ENGINE_OCR || CIDRSSetup::IsModuleReady ( IDRS_MODULE_OCR )</pre>
            <pre>engine != IDRS_ENGINE_BARCODE || CIDRSSetup::IsModuleReady ( IDRS_MODULE_BARCODE )</pre>
            <pre>engine == IDRS_ENGINE_OCR || engine == IDRS_ENGINE_BARCODE</pre>
            <param name="argPage">The page to read.</param>
            <param name="rargTextDetectionResults">A TextDetectionResults object that will be updated with the results of language and page orientation detection.</param>
            <param name="engine">The identifier for the engine to use.</param>
            <param name="pRectangle">The rectangular part of the page to read.</param>
            <param name="bReadTextFormat">Boolean flag indicating if layout formatting information should be retrieved. This parameter is ignored when engine is set to IDRS_MODULE_BARCODE</param>
            <remarks>Please note that for barcode recognition, reading document layout doesn't make sense, so the parameter bReadTextFormat is ignored.</remarks>
            <remarks>This method overload was introduced as an workaround an issue with .NET Framework 4.8 PInvoke which does not work with certain type of struct return types.</remarks>
            <remarks>
            If language detection flag is set (via a call to SetLanguageDetection()), automatic language detection will be run
            before performing OCR.
            Detection results will be available in the structure returned, and can contain languages protected by an OCR extension even if
            the corresponding extension is not set up.
            If no language could be detected, or if language detection is disabled, the languages array in the TextDetectionResults output
            will be filled with IDRS_LANGUAGE_NONE at confidence level 255.
            If a language is detected, and is authorized by licensing, recognition will be performed with this language. Note that this will
            not modify the OCR context that has been set in the CPageRecognition instance.
            Otherwise, recognition will be performed using the OCR context set in this CPageRecognition instance.
            </remarks>
            <remarks>
            \internal
            out_struct_param rargTextDetectionResults
            \endinternal
            </remarks>
        </member>
        <member name="M:IDRSNET.CPageRecognition.ResetProgressCallback">
            <summary>
            ResetProgressCallback resets the object for monitoring progress.
            After this method is called, the progress object set by a previous call to
            SetProgressCallback will not be used anymore, returning back to the initial
            behavior.
            </summary>
        </member>
        <member name="P:IDRSNET.CPageRecognition.ProgressCallback">
            <summary>
            Set the object for monitoring progress.
            The methods of the object overiding the methods of the CProgress class will be called
            during the execution.
            This let the integrator implement a cancel button or a progress bar.
            
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageRecognition.Context">
            <summary>
            Set a recognition context to be used during the recognition process
            
            </summary>
            
            <pre> ! IsNull () </pre>
        </member>
        <member name="P:IDRSNET.CPageRecognition.WorkerThreadCount">
            <summary>
            Get/Set the number of worker threads that are used for performing page recognition.
            By default this value is initialized with IDRS_DFLT_WORKER_THREAD_COUNT.
            Please note that, in order to get the best performance, the number of worker threads need to be set accordingly to your system capabilities.
            The iDRS SDK provides an "automatic" mode for balancing the number of work threads based on the system where it is executed. In order to activate
            this mode, you can supply the value IDRS_WORKER_THREAD_AUTO
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageRecognition.BinarizationOptions">
            <summary>
            Get/Set the binarizations options for the recognition process. <see cref="T:IDRSNET.CBinarizeOptions"/> for more details
            </summary>
            
            <pre> ! IsNull () </pre>
        </member>
        <member name="P:IDRSNET.CPageRecognition.LanguageDetection">
            <summary>
            Get/Set the automatic language detection on Page
            </summary>
            <remarks>If you enable the Auto Language Detection, and specify a COcrContext with a given language, the detected language will be prior to the one of your OcrContext at recognition time</remarks>
        </member>
        <member name="P:IDRSNET.CPageRecognition.AdvancedDecision">
            <summary>
            Set the CAdvancedDecision object that will be involved in score computation for ocr recognition.
            For more details please see <see cref="T:IDRSNET.CAdvancedDecision"/> 
            
            </summary>
            <remarks>Passing NULL to this value would disable custom score computation for the current CPageRecognition object</remarks>
        </member>
        <member name="P:IDRSNET.CPageRecognition.DeskewOptions">
            <summary>
            Get/Set the deskew options for the recognition process. <see cref="T:IDRSNET.CDeskewOptions"/> for more details
            </summary>
            
            <pre> ! IsNull () </pre>
        </member>
        <member name="T:IDRSNET.CPageResults">
            <summary>
            Class CPageResults parses a CPage object containing and creates IDRS_DOC_PAGE structure
            \ingroup module_core module_ocr module_barcode
            The class is used to export the results from CPageResults into IDRS_DOC_PAGE set of structures.
            </summary>
            <remarks>The CPage object is expected to contain data from the recognition process. See <see cref="T:IDRSNET.CPageRecognition"/> and CPage for more details</remarks>
        </member>
        <member name="M:IDRSNET.CPageResults.#ctor(IDRSNET.CPage)">
            <summary>
            Creates a CPageResults object
            </summary>
            <param name="argPage">- reference to the target page</param>
        </member>
        <member name="M:IDRSNET.CPageResults.Finalize">
            <summary>
            Destructor of CPageResults.
            </summary>
        </member>
        <member name="M:IDRSNET.CPageResults.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CPageResults.GetPointer">
            <summary>
            Internal virtual  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CPageResults.SetPointer(System.IntPtr)">
            <summary>
            Internal virtual  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CPageResults object</param>
        </member>
        <member name="M:IDRSNET.CPageResults.IsFormattingInformation">
            <summary>
            IsFormattingInformation checks whether the formatting information is present or not.
            </summary>
            <returns></returns>
            <remarks>
            - IDRS_TRUE if formatting information is present
            - IDRS_FALSE if formatting information is not present
            </remarks>
        </member>
        <member name="M:IDRSNET.CPageResults.ParsePage(IDRSNET.IPageResultsParser)">
            <summary>
            ParsePage converts a page to the IDRS_DOC_PAGE format and parses the result using the given parser.
            </summary>
            <pre>! IsNull ()</pre>
            <pre>! argPage.IsNull ()</pre>
            <param name="argResultsParser">The parser to use.</param>
            <exception>IDRSException if an error occur.</exception>
            <see cref="T:IDRSNET.IPageResultsParser"/> 
        </member>
        <member name="P:IDRSNET.CPageResults.DocPage">
            <summary>
            GetDocPage aggregates the page information into an IDRS_DOC_PAGE structures.
            IDRS_DOC_PAGE object returned by this function will be valid as long as the current CPageResults will be valid.
            The IDRS_DOC_PAGE pointer returned by GetDocPage function doesn't need to be release by calling code.
            The memory will be automatically released when the CPageResults object will be destroyed
            The IDRS_DOC_PAGE object computed by this function will be extracted from the recognized information present in the CPage object supplied in the constructor.
            Though, it is important that the recognition process has been already performed on the supplied page, at the moment of this function call.
            Please see functions: CPageRecognition::RecognizeZones and CPageRecognition::RecognizePage for more information about the way recognition process can be started.
            
            </summary>
            <remarks>This method is thread safe, meaning that thread access to this function will be serialized.</remarks>
        </member>
        <member name="T:IDRSNET.CPageSection2">
            <summary>
            CPageSection2 represents a section in a page
            A section class contains the following elements:
            - columns
            - zones outside columns
            </summary>
        </member>
        <member name="M:IDRSNET.CPageSection2.#ctor">
            <summary>
            Creates a new instance of a section object
            </summary>
        </member>
        <member name="M:IDRSNET.CPageSection2.Finalize">
            <summary>
            Destructor of CPageSection2.
            </summary>
        </member>
        <member name="M:IDRSNET.CPageSection2.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CPageSection2.GetPointer">
            <summary>
            Internal override  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CPageSection2.SetPointer(System.IntPtr)">
            <summary>
            Internal override  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CPageSection2 object</param>
        </member>
        <member name="P:IDRSNET.CPageSection2.BoundingBox">
            <summary>
            Get/Set the rectangle where the page section is located
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageSection2.Zones">
            <summary>
            Get/Set the array of zones in the current section that are not present in any column
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageSection2.HasLineBetweenColumns">
            <summary>
            SetHasLineBetweenColumns Get/Set the flag indicating that there's a line betweent the columns in the section
            </summary>
            <remarks>
            \internal
            property HasLineBetweenColumns/Get
            \endinternal
            </remarks>
        </member>
        <member name="P:IDRSNET.CPageSection2.Columns">
            <summary>
            Get/Set the array of columns available in the current section
            </summary>
            
        </member>
        <member name="T:IDRSNET.CPageSizeOptions">
            <summary>
            CPageSizeOptions class specifies the page size options
            </summary>
        </member>
        <member name="M:IDRSNET.CPageSizeOptions.#ctor">
            <summary>
            Create is instantiating a new instance of CPageSizeOptions and associated data object
            </summary>
            <remarks>by default we enable A4, A3, Letter and Legal all of them on both orientation (portrait &amp; landscape)</remarks>
            <returns>New instance of CPageSizeOptions</returns>
        </member>
        <member name="M:IDRSNET.CPageSizeOptions.Finalize">
            <summary>
            Destructor of CPageSizeOptions.
            </summary>
        </member>
        <member name="M:IDRSNET.CPageSizeOptions.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CPageSizeOptions.GetPointer">
            <summary>
            Internal virtual  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CPageSizeOptions.SetPointer(System.IntPtr)">
            <summary>
            Internal virtual  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CPageSizeOptions object</param>
        </member>
        <member name="M:IDRSNET.CPageSizeOptions.EnablePageSize(IDRSNET.PageSize,IDRSNET.PageOrientation,System.Boolean)">
            <summary>
            enables/disables a given page size for a given orientation.
            </summary>
            <param name="evPageSize">page size type to enable/disable</param>
            <param name="evPageOrientation">page orientation type to enable/disable</param>
            <param name="bEnable">boolean specifying the status</param>
        </member>
        <member name="M:IDRSNET.CPageSizeOptions.IsPageSizeEnabled(IDRSNET.PageSize,IDRSNET.PageOrientation)">
            <summary>
            checks if a given page size is enabled.
            </summary>
            <param name="evPageSize">page size type</param>
            <param name="evPageOrientation">page orienation type</param>
            <returns>IDRS_TRUE if enabled, otherwise IDRS_FALSE</returns>
        </member>
        <member name="T:IDRSNET.CPageStyle">
            <summary>
            Sets the page style associated to a page
            Usually when a page has a style object associated, it is considered that it is containing enough information to generate a document (pdf, docx, etc)
            </summary>
        </member>
        <member name="M:IDRSNET.CPageStyle.#ctor">
            <summary>
            Instantiates a new page style object
            </summary>
        </member>
        <member name="M:IDRSNET.CPageStyle.Finalize">
            <summary>
            Destructor of CPageStyle.
            </summary>
        </member>
        <member name="M:IDRSNET.CPageStyle.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CPageStyle.GetPointer">
            <summary>
            Internal virtual  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CPageStyle.SetPointer(System.IntPtr)">
            <summary>
            Internal virtual  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CPageStyle object</param>
        </member>
        <member name="P:IDRSNET.CPageStyle.PageParagraphLists">
            <summary>
            Get/Set the array containing the paragraph lists
            </summary>
            
        </member>
        <member name="T:IDRSNET.CPageStyleFont">
            <summary>
            CPageStyleFont represents a style used for a specific font
            This class contains:
            - A reference to a font object: see <see cref="T:IDRSNET.CPageFont"/> 
            - Size for the font
            - Stretch factor applied to the font
            </summary>
        </member>
        <member name="M:IDRSNET.CPageStyleFont.#ctor">
            <summary>
            Instantiates a new CPageStyleFont object
            </summary>
        </member>
        <member name="M:IDRSNET.CPageStyleFont.Finalize">
            <summary>
            Destructor of CPageStyleFont.
            </summary>
        </member>
        <member name="M:IDRSNET.CPageStyleFont.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CPageStyleFont.GetPointer">
            <summary>
            Internal override  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CPageStyleFont.SetPointer(System.IntPtr)">
            <summary>
            Internal override  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CPageStyleFont object</param>
        </member>
        <member name="P:IDRSNET.CPageStyleFont.FontSize">
            <summary>
            Get/Set the font size
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageStyleFont.FontStretch">
            <summary>
            Get/Set the font stretching     /// Default value is 100
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageStyleFont.PageFont">
            <summary>
            Get/Set the associated font object
            </summary>
            
        </member>
        <member name="T:IDRSNET.CPageStyleParagraph">
            <summary>
            CPageStyleParagraph represents the text paragraph style data.
            This class contains the following info related to a text paragraph.
            - horizontal alignment
            - margins
            - font, drop-cap font
            - foreground &amp; background colors
            - first line indentation
            - tabulations
            - line height
            </summary>
        </member>
        <member name="M:IDRSNET.CPageStyleParagraph.#ctor">
            <summary>
            Creates an instance of CPageStyleParagraph and initializes it with default values
            </summary>
        </member>
        <member name="M:IDRSNET.CPageStyleParagraph.Finalize">
            <summary>
            Destructor of CPageStyleParagraph.
            </summary>
        </member>
        <member name="M:IDRSNET.CPageStyleParagraph.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CPageStyleParagraph.GetPointer">
            <summary>
            Internal override  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CPageStyleParagraph.SetPointer(System.IntPtr)">
            <summary>
            Internal override  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CPageStyleParagraph object</param>
        </member>
        <member name="P:IDRSNET.CPageStyleParagraph.ForegroundColor">
            <summary>
            Get/Set the foreground color for the text in the paragraph
            Please note that individual components of the paragraph (lines, words, letters) are allowed to have different foreground colors
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageStyleParagraph.DropCapFont">
            <summary>
            Get/Set the font style used for the drop cap character
            The drop cap font style is used only if the paragraph has a drop cap character      /// This font style is expected to be set only if drop-cap is present in a paragraph
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageStyleParagraph.HorizontalAlignment">
            <summary>
            Get/Set the paragraph text horizontal alignment
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageStyleParagraph.FirstLineIndentation">
            <summary>
            Get/Set the indentation for the first line in the paragraph     /// The indentation value is specified in pixels
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageStyleParagraph.BackgroundColor">
            <summary>
            Get/Set the background color for the text in the paragraph
            Please note that individual components of the paragraph (lines, words, letters) are allowed to have different background colors
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageStyleParagraph.LineHeight">
            <summary>
            Get/Set the line height for the lines in the paragraph
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageStyleParagraph.PageStyleTabulations">
            <summary>
            Get/Set the list of tabulation styles associated to the paragraph
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageStyleParagraph.Margins">
            <summary>
            Get/Set the paragraph margins
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageStyleParagraph.Font">
            <summary>
            Get/Set the font style used for the paragraph
            Please note that individual components of the paragraph (lines, words, letters) are allowed to have different font styles
            </summary>
            
        </member>
        <member name="T:IDRSNET.CPageStyleTableCell">
            <summary>
            CPageStyleTableCell contains the style information associated to a table cell.
            The class holds the following information:
            - horizontal &amp; vertical alignment
            - padding
            - borders (present, color, width)
            - font
            </summary>
        </member>
        <member name="M:IDRSNET.CPageStyleTableCell.#ctor">
            <summary>
            Creates a new instance of CPageStyleTableCell
            </summary>
        </member>
        <member name="M:IDRSNET.CPageStyleTableCell.Finalize">
            <summary>
            Destructor of CPageStyleTableCell.
            </summary>
        </member>
        <member name="M:IDRSNET.CPageStyleTableCell.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CPageStyleTableCell.GetPointer">
            <summary>
            Internal override  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CPageStyleTableCell.SetPointer(System.IntPtr)">
            <summary>
            Internal override  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CPageStyleTableCell object</param>
        </member>
        <member name="P:IDRSNET.CPageStyleTableCell.LeftBorderWidth">
            <summary>
            Get/Set the width for the left border (in pixels)
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageStyleTableCell.LeftBorderColor">
            <summary>
            Get/Set the color for the top border
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageStyleTableCell.RightBorder">
            <summary>
            Get/Set a flag indicating that the style contains a right border
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageStyleTableCell.BottomBorderWidth">
            <summary>
            Get/Set the width for the bottom border (in pixels)
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageStyleTableCell.LeftPadding">
            <summary>
            Get/Set the left padding value
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageStyleTableCell.TopBorder">
            <summary>
            Get/Set a flag indicating that the style contains a top border
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageStyleTableCell.FontStyle">
            <summary>
            Get/Set the font style associated to the cell style
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageStyleTableCell.TopBorderColor">
            <summary>
            Get/Set the color for the top border
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageStyleTableCell.TopBorderWidth">
            <summary>
            Get/Set the width for the top border (in pixels)
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageStyleTableCell.LeftBorder">
            <summary>
            Get/Set a flag indicating that the style contains a left border
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageStyleTableCell.VerticalAlignment">
            <summary>
            Get/Set the vertical alignment for the text in the cell
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageStyleTableCell.RightPadding">
            <summary>
            Get/Set the right padding value
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageStyleTableCell.BackgroundColor">
            <summary>
            Get/Set the cell style background color
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageStyleTableCell.BottomBorderColor">
            <summary>
            Get/Set the color for the bottom border
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageStyleTableCell.HorizontalAlignment">
            <summary>
            Get/Set the horizontal alignment for the text in the cell
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageStyleTableCell.BottomBorder">
            <summary>
            Get/Set a flag indicating that the style contains a bottom border
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageStyleTableCell.RightBorderWidth">
            <summary>
            Get/Set the width for the right border (in pixels)
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageStyleTableCell.RightBorderColor">
            <summary>
            Get/Set the color for the right border
            </summary>
            
        </member>
        <member name="T:IDRSNET.CPageStyleTabulation">
            <summary>
            CPageStyleTabulation represents the style for a text tabulation
            </summary>
        </member>
        <member name="M:IDRSNET.CPageStyleTabulation.#ctor">
            <summary>
            Creates a new instance of a CPageStyleTabulation object
            </summary>
        </member>
        <member name="M:IDRSNET.CPageStyleTabulation.Finalize">
            <summary>
            Destructor of CPageStyleTabulation.
            </summary>
        </member>
        <member name="M:IDRSNET.CPageStyleTabulation.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CPageStyleTabulation.GetPointer">
            <summary>
            Internal override  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CPageStyleTabulation.SetPointer(System.IntPtr)">
            <summary>
            Internal override  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CPageStyleTabulation object</param>
        </member>
        <member name="P:IDRSNET.CPageStyleTabulation.CellWidth">
            <summary>
            Get/Set the tabulation cell width
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageStyleTabulation.LeftPadding">
            <summary>
            Get/Set the tabulation style left padding
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageStyleTabulation.TabulationLeader">
            <summary>
            Get/Set the tabulation leader type
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageStyleTabulation.HorizontalAlignment">
            <summary>
            Get/Set the horizontal alignment for the tabulation
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageStyleTabulation.RightPadding">
            <summary>
            Get/Set the tabulation style right padding
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageStyleTabulation.StopValue">
            <summary>
            Get/Set the tabulation stop value
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageStyleTabulation.Id">
            <summary>
            Get/Set the id for the tabulation style
            </summary>
            
        </member>
        <member name="T:IDRSNET.CPageStyleTextElement">
            <summary>
            CPageStyleTextElement represents the style associated to a text element <see cref="T:IDRSNET.CPageTextElement"/> 
            </summary>
        </member>
        <member name="M:IDRSNET.CPageStyleTextElement.#ctor">
            <summary>
            Creates a new instance of a CPageStyleTextElement initialized with default values
            </summary>
        </member>
        <member name="M:IDRSNET.CPageStyleTextElement.Finalize">
            <summary>
            Destructor of CPageStyleTextElement.
            </summary>
        </member>
        <member name="M:IDRSNET.CPageStyleTextElement.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CPageStyleTextElement.GetPointer">
            <summary>
            Internal virtual  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CPageStyleTextElement.SetPointer(System.IntPtr)">
            <summary>
            Internal virtual  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CPageStyleTextElement object</param>
        </member>
        <member name="M:IDRSNET.CPageStyleTextElement.GetBlobCleanupRectangleAt(System.Int32)">
            <summary>
            Gets the blob cleanup rectangle located at a specific index.
            </summary>
            <param name="iIndex">Index for the blob cleanup rectangle</param>
            <returns>Blob cleanup rectangle</returns>
        </member>
        <member name="M:IDRSNET.CPageStyleTextElement.AddBlobCleanupRectangle(IDRSNET.CIDRSRect)">
            <summary>
            AddBlobCleanupRectangle adds a cleanup rectangle
            </summary>
            <param name="stRectangle">Coordinates for the cleanup rectangle</param>
        </member>
        <member name="M:IDRSNET.CPageStyleTextElement.SetBlobCleanupRectangleAt(System.Int32,IDRSNET.CIDRSRect)">
            <summary>
            Sets a cleanup rectangle at a specific index in the internal array.
            </summary>
            <param name="iIndex">Array index</param>
            <param name="stRectangle">Coordinates of the cleanup rectangle</param>
        </member>
        <member name="M:IDRSNET.CPageStyleTextElement.RemoveBlobCleanupRectangleAt(System.Int32)">
            <summary>
            RemoveBlobCleanupRectanglesAt removes a cleanup rectangle at a specific index
            </summary>
            <param name="iIndex">Array index</param>
        </member>
        <member name="P:IDRSNET.CPageStyleTextElement.IsItalic">
            <summary>
            Get/Set the flag specifying if the text element is italic or not.
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageStyleTextElement.BlobCleanupRectanglesCount">
            <summary>
            Gets the number of blob cleanup rectangles.
            
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageStyleTextElement.FontStyle">
            <summary>
            Get/Set the font style.
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageStyleTextElement.IsDropCapital">
            <summary>
            Get/Set the flag specifying if the text element is drop cap or not.
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageStyleTextElement.Baseline">
            <summary>
            Get/Set the baseline value.
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageStyleTextElement.IsUnderlineStart">
            <summary>
            Get/Set the flag specifying if the text element is the first underlined text element or not.
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageStyleTextElement.IsFixedFont">
            <summary>
            Get/Set the flag specifying if the text element has fixed font or not.
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageStyleTextElement.IsUnderlined">
            <summary>
            Get/Set the flag specifying if the text element is underlined or not.
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageStyleTextElement.IsUnderlineEnd">
            <summary>
            Get/Set the flag specifying if the text element is the last underlined text element or not.
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageStyleTextElement.IsBold">
            <summary>
            Get/Set the flag specifying if the text element is bold or not.
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageStyleTextElement.IsSubscript">
            <summary>
            Get/Set the flag specifying if the text element is subscripted or not.
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageStyleTextElement.IsSuperscript">
            <summary>
            Get/Set the flag specifying if the text element is superscript or not.
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageStyleTextElement.ForegroundColor">
            <summary>
            Get/Set the foreground color for the text element.
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageStyleTextElement.BackgroundColor">
            <summary>
            Get/Set the background color for the text element.
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageStyleTextElement.TextDirection">
            <summary>
            Get/Set the text element text direction.
            </summary>
            
        </member>
        <member name="T:IDRSNET.CPageStyleWord">
            <summary>
            CPageStyleWord represents a text word style
            </summary>
        </member>
        <member name="M:IDRSNET.CPageStyleWord.#ctor">
            <summary>
            Creates a new instance of CPageStyleWord
            </summary>
        </member>
        <member name="M:IDRSNET.CPageStyleWord.Finalize">
            <summary>
            Destructor of CPageStyleWord.
            </summary>
        </member>
        <member name="M:IDRSNET.CPageStyleWord.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CPageStyleWord.GetPointer">
            <summary>
            Internal virtual  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CPageStyleWord.SetPointer(System.IntPtr)">
            <summary>
            Internal virtual  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CPageStyleWord object</param>
        </member>
        <member name="P:IDRSNET.CPageStyleWord.PageStyleTabulations">
            <summary>
            Get/Set the list of tabulation styles.
            </summary>
            
        </member>
        <member name="T:IDRSNET.CPageTableCell">
            <summary>
            CPageTableCell represents a table cell. It contains the following information:
            - row &amp; column indexes
            - row &amp; column spans
            - cell style
            - inner text lines
            </summary>
        </member>
        <member name="M:IDRSNET.CPageTableCell.#ctor">
            <summary>
            Instantiates a new CPageTableCell object
            </summary>
        </member>
        <member name="M:IDRSNET.CPageTableCell.Finalize">
            <summary>
            Destructor of CPageTableCell.
            </summary>
        </member>
        <member name="M:IDRSNET.CPageTableCell.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CPageTableCell.GetPointer">
            <summary>
            Internal override  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CPageTableCell.SetPointer(System.IntPtr)">
            <summary>
            Internal override  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CPageTableCell object</param>
        </member>
        <member name="P:IDRSNET.CPageTableCell.ColIndex">
            <summary>
            Get/Set the cell column index
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageTableCell.RowSpan">
            <summary>
            Get/Set the rows span for the cell
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageTableCell.RowIndex">
            <summary>
            Get/Set the cell row index
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageTableCell.ColSpan">
            <summary>
            Get/Set the cols span for the cell
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageTableCell.CellStyle">
            <summary>
            Get/Set the style associated to the table cell
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageTableCell.TextLines">
            <summary>
            Get/Set the array containing the lines of text in the cell
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageTableCell.BoundingBox">
            <summary>
            Get/Set the coordinates for the bounding rectangle
            </summary>
            
        </member>
        <member name="T:IDRSNET.CPageTextElement">
            <summary>
            CPageTextElement represents a text element in iDRS.
            A text element can be a single character or a sequence of characters.
            This class contains the following info:
            - Bounding polygon
            - Text value
            - Language
            - text element style. <see cref="T:IDRSNET.CPageStyleTextElement"/> 
            - Alternative solutions
            </summary>
        </member>
        <member name="M:IDRSNET.CPageTextElement.#ctor">
            <summary>
            Creates a new instance of a CPageTextElement
            </summary>
        </member>
        <member name="M:IDRSNET.CPageTextElement.Finalize">
            <summary>
            Destructor of CPageTextElement.
            </summary>
        </member>
        <member name="M:IDRSNET.CPageTextElement.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CPageTextElement.GetPointer">
            <summary>
            Internal override  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CPageTextElement.SetPointer(System.IntPtr)">
            <summary>
            Internal override  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CPageTextElement object</param>
        </member>
        <member name="P:IDRSNET.CPageTextElement.Style">
            <summary>
            Get/Set the text element style
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageTextElement.Language">
            <summary>
            Get/Set the language for the text value
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageTextElement.Alternatives">
            <summary>
            Get/Set the array of alternative text values
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageTextElement.TextValue">
            <summary>
            Get/Set the text value
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageTextElement.ConfidenceLevel">
            <summary>
            Get/Set the confidence level for the text value
            The confidence level is a value ranging from 0 to 255, where 0 means best confidence while 255 means lowest confidence
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageTextElement.AdvancedConfidence">
            <summary>
            Get/Set the detailed info about the confidence level
            More more information see <see cref="T:IDRSNET.IDRS_DOC_ADVANCED_CONFIDENCE"/> 
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageTextElement.BoundingPolygon">
            <summary>
            Get/Set the polygon where the text element is located
            </summary>
            
        </member>
        <member name="T:IDRSNET.CPageTextElementAlternative">
            <summary>
            CPageTextElementAlternative represents a text element alternative
            Text alternatives are usually generated by the ocr engine with text solutions close to the actual solution.
            Each text alternative has it's own text solution and confidence level
            </summary>
        </member>
        <member name="M:IDRSNET.CPageTextElementAlternative.#ctor">
            <summary>
            Creates a new instance of CPageTextElementAlternative
            </summary>
        </member>
        <member name="M:IDRSNET.CPageTextElementAlternative.Finalize">
            <summary>
            Destructor of CPageTextElementAlternative.
            </summary>
        </member>
        <member name="M:IDRSNET.CPageTextElementAlternative.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CPageTextElementAlternative.GetPointer">
            <summary>
            Internal override  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CPageTextElementAlternative.SetPointer(System.IntPtr)">
            <summary>
            Internal override  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CPageTextElementAlternative object</param>
        </member>
        <member name="P:IDRSNET.CPageTextElementAlternative.AdvancedConfidence">
            <summary>
            Get/Set the detailed info about the confidence level
            More more information see <see cref="T:IDRSNET.IDRS_DOC_ADVANCED_CONFIDENCE"/> 
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageTextElementAlternative.Solution">
            <summary>
            Get/Set the text solution for the alternative
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageTextElementAlternative.ConfidenceLevel">
            <summary>
            Get/Set the confidence level for the text value
            The confidence level is a value ranging from 0 to 255, where 0 means best confidence while 255 means lowest confidence
            </summary>
            
        </member>
        <member name="T:IDRSNET.CPageTextLine">
            <summary>
            CPageTextLine represents a line of text
            </summary>
        </member>
        <member name="M:IDRSNET.CPageTextLine.#ctor">
            <summary>
            Creates a new instance of CPageTextLine
            </summary>
        </member>
        <member name="M:IDRSNET.CPageTextLine.Finalize">
            <summary>
            Destructor of CPageTextLine.
            </summary>
        </member>
        <member name="M:IDRSNET.CPageTextLine.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CPageTextLine.GetPointer">
            <summary>
            Internal override  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CPageTextLine.SetPointer(System.IntPtr)">
            <summary>
            Internal override  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CPageTextLine object</param>
        </member>
        <member name="P:IDRSNET.CPageTextLine.BoundingPolygon">
            <summary>
            Get/Set the polygon where the text line is located
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageTextLine.Words">
            <summary>
            Get/Set the array containing the words in the line
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageTextLine.Baseline">
            <summary>
            Get/Set the baseline for the text line
            </summary>
            
        </member>
        <member name="T:IDRSNET.CPageWord">
            <summary>
            CPageWord represents a text word
            </summary>
        </member>
        <member name="M:IDRSNET.CPageWord.#ctor">
            <summary>
            Creates a new instance of CPageWord
            </summary>
        </member>
        <member name="M:IDRSNET.CPageWord.Finalize">
            <summary>
            Destructor of CPageWord.
            </summary>
        </member>
        <member name="M:IDRSNET.CPageWord.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CPageWord.GetPointer">
            <summary>
            Internal override  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CPageWord.SetPointer(System.IntPtr)">
            <summary>
            Internal override  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CPageWord object</param>
        </member>
        <member name="P:IDRSNET.CPageWord.Style">
            <summary>
            Get/Set the word style
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageWord.HyperlinkType">
            <summary>
            Get/Set the hyperlink type for the word
            By default the value of the hyperlink type is set to HYPERLINK_TYPE_NONE
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageWord.BoundingPolygon">
            <summary>
            Get/Set the polygon where the text word is located
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageWord.TextElements">
            <summary>
            Get/Set the array of text element in the word
            </summary>
            
        </member>
        <member name="T:IDRSNET.CPageZone">
            <summary>
            Class CPageZone represents the base class for all zones available in iDRS SDK
            A zone contains the following entities:
            - bounding polygon
            - rotation angle
            - skew angle
            - text distances to surrounding zones
            - zone context link id: useful for iDRS ocr zonal recognition using CMultiContext objects
            This class is a base class, so integrators are not expected to instantiate objects of this type.
            </summary>
        </member>
        <member name="M:IDRSNET.CPageZone.#ctor(IDRSNET.IDRS_ZONE_TYPE)">
            <summary>
            Creates an instance of CPageZone object with the data object pointing to the correct type of zone
            This method instantiates the following objects, based on the zone type:
            - IDRS_ZONE_TEXT, IDRS_ZONE_HAND: <see cref="T:IDRSNET.CPageZoneText"/> CPageZoneText
            - IDRS_ZONE_TABLE: <see cref="T:IDRSNET.CPageZoneTable"/> CPageZoneTable
            - IDRS_ZONE_BARCODE: <see cref="T:IDRSNET.CPageZoneBarcode"/> CPageZoneBarcode
            - IDRS_ZONE_GRAPHIC: <see cref="T:IDRSNET.CPageZoneGraphic"/> CPageZoneGraphic
            </summary>
            <param name="evZoneType">Zone type</param>
            <returns>CPageZone object with the data object pointing to the correct type of data class</returns>
        </member>
        <member name="M:IDRSNET.CPageZone.#ctor(IDRSNET.IDRS_ZONE_TYPE,IDRSNET.CPolygon,System.UInt32)">
            <summary>
            Creates an instance of CPageZone object with the data object pointing to the correct type of zone
            This method instantiates the following objects, based on the zone type:
            - IDRS_ZONE_TEXT, IDRS_ZONE_HAND: <see cref="T:IDRSNET.CPageZoneText"/> CPageZoneText
            - IDRS_ZONE_TABLE: <see cref="T:IDRSNET.CPageZoneTable"/> CPageZoneTable
            - IDRS_ZONE_BARCODE: <see cref="T:IDRSNET.CPageZoneBarcode"/> CPageZoneBarcode
            - IDRS_ZONE_GRAPHIC: <see cref="T:IDRSNET.CPageZoneGraphic"/> CPageZoneGraphic
            </summary>
            <param name="evZoneType">Zone type</param>
            <param name="objBoundingPolygon">Polygon where all elements withing the zone are located</param>
            <param name="uiZoneContextId">Identifier used to link recognized zones with contexts defined in CMultiContext objects</param>
            <returns>CPageZone object with the data object pointing to the correct type of data class</returns>
        </member>
        <member name="M:IDRSNET.CPageZone.Finalize">
            <summary>
            Destructor of CPageZone.
            </summary>
        </member>
        <member name="M:IDRSNET.CPageZone.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CPageZone.GetPointer">
            <summary>
            Internal override  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CPageZone.SetPointer(System.IntPtr)">
            <summary>
            Internal override  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CPageZone object</param>
        </member>
        <member name="M:IDRSNET.CPageZone.SetBoundingRectangle(IDRSNET.CIDRSRect)">
            <summary>
            Set the rectangle containing all zone content
            </summary>
            <param name="rcBoundingBox">Zone rectangle</param>
            <remarks>
            \internal
            property disable
            \endinternal
            </remarks>
        </member>
        <member name="P:IDRSNET.CPageZone.TextDirection">
            <summary>
            Get/Set the text direction for the current zone
            </summary>
            <remarks>
            Text direction is not useful for graphical and barcode zones
            The default value is IDRS::CTextProperties::TEXT_DIRECTION_LEFT_TO_RIGHT
            </remarks>
        </member>
        <member name="P:IDRSNET.CPageZone.ZoneContextLinkId">
            <summary>
            Get/Set the identifier that links the zone to a context
            defined in CMultiContext and CRecognitionZones added to CPageLayer
            The default value is set to 0       /// a context defined in CMultiContext and CRecognitionZones added to CPageLayer
            This id is set only when using iDRS ocr zonal recognition using CMultiContext objects.
            By default the value is set to 0
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageZone.ZoneOrder">
            <summary>
            Get/Set the reading order to a zone.        /// The ocr engine returns the zones in reading order.
            The reading order is considering the human reading order, based on the language used for OCR
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageZone.ZoneType">
            <summary>
            Get the zone type
            
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageZone.PaddingBox">
            <summary>
            Get/Set the zone's padding box.
            It adds the padding value to the bounding box, resulting in a rectangle containing the padding.
            Paragraph style's margins are expected to be computed relative to this rectangle.       /// The padding box correspond to the bounding box with padding values added to it, resulting in a rectangle
            containing the padding around the zone.
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageZone.BoundingPolygon">
            <summary>
            Get/Set the polygon containing all zone content
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageZone.TextDistances">
            <summary>
            Get/Set the distances between the zone borders and inner content
            </summary>
            
        </member>
        <member name="T:IDRSNET.CPageZoneBarcode">
            <summary>
            CPageZoneBarcode contains the barcode zone
            A barcode zone contains the following elements:
            - a bounding polygon
            - barcode result. A barcode zone contains only 1 result
            </summary>
        </member>
        <member name="M:IDRSNET.CPageZoneBarcode.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:IDRSNET.CPageZoneBarcode.#ctor(IDRSNET.CPageZone)">
            <summary>
            Constructor using the base class
            </summary>
            <param name="argPageZone">Base page zone</param>
        </member>
        <member name="M:IDRSNET.CPageZoneBarcode.Finalize">
            <summary>
            Destructor of CPageZoneBarcode.
            </summary>
        </member>
        <member name="M:IDRSNET.CPageZoneBarcode.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CPageZoneBarcode.GetPointer">
            <summary>
            Internal override  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CPageZoneBarcode.SetPointer(System.IntPtr)">
            <summary>
            Internal override  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CPageZoneBarcode object</param>
        </member>
        <member name="P:IDRSNET.CPageZoneBarcode.BarcodeResults">
            <summary>
            Get/Set the barcode results associated to the current object
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageZoneBarcode.BarcodeResult">
            <summary>
            Sets the barcode result associated to the current object
            
            </summary>
            
        </member>
        <member name="T:IDRSNET.IDRS_PAGE_GRAPHIC_SOURCE">
            <summary>
            Source for graphical zones
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_PAGE_GRAPHIC_SOURCE.IDRS_PAGE_GRAPHIC_SOURCE_BASE_IMAGE">
            <summary>
            ! The source is the base image, usually the one used for text or barcode detection
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_PAGE_GRAPHIC_SOURCE.IDRS_PAGE_GRAPHIC_SOURCE_EXTERNAL">
            <summary>
            ! The source is an image from an external source
            </summary>
        </member>
        <member name="T:IDRSNET.CPageZoneGraphic">
            <summary>
            CPageZoneGraphic represents a graphic zone
            The graphic zone can represent one of the following:
            - an area in the page underlying image. In this case the bounding box coordinates represent the coordinates in the page underlying image
            - a separate image loaded via a CImage object
            </summary>
        </member>
        <member name="M:IDRSNET.CPageZoneGraphic.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:IDRSNET.CPageZoneGraphic.#ctor(IDRSNET.CPageZone)">
            <summary>
            Constructor using the base class
            </summary>
            <param name="argPageZone">Base page zone</param>
        </member>
        <member name="M:IDRSNET.CPageZoneGraphic.Finalize">
            <summary>
            Destructor of CPageZoneGraphic.
            </summary>
        </member>
        <member name="M:IDRSNET.CPageZoneGraphic.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CPageZoneGraphic.GetPointer">
            <summary>
            Internal override  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CPageZoneGraphic.SetPointer(System.IntPtr)">
            <summary>
            Internal override  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CPageZoneGraphic object</param>
        </member>
        <member name="P:IDRSNET.CPageZoneGraphic.GraphicSourceType">
            <summary>
            Retrieves the source type for the graphical zone.
            The type can only be set by constructing the desired object type: CPageGraphic or CPageZoneGraphicExternalImage
            
            </summary>
            
        </member>
        <member name="T:IDRSNET.CPageZoneGraphicExternalImage">
            <summary>
            CPageZoneGraphicExternalImage represents a zone that is loaded from an external source
            By default the image zones in iDRS SDK represent parts of the source image for a document.
            The class CPageZoneGraphicExternalImage allows integrators to specify image zones that have the source in other images.
            This allows greater flexibility when creating output documents.
            </summary>
            <remarks>
            Currently the external images are used only as part of <see cref="T:IDRSNET.CSignatureContent"/> class.
            Trying to add an external graphical image to <see cref="T:IDRSNET.CPageContent2"/> would have no effect in the output.
            </remarks>
        </member>
        <member name="M:IDRSNET.CPageZoneGraphicExternalImage.#ctor(IDRSNET.CImage)">
            <summary>
            Creates a new instance of CPageZoneGraphicExternalImage and initializes it with an image
            </summary>
            <param name="argImage">Image that will be used as page graphical zone</param>
            <returns>IDRS::CPageZoneGraphicExternalImage newly created object</returns>
        </member>
        <member name="M:IDRSNET.CPageZoneGraphicExternalImage.Finalize">
            <summary>
            Destructor of CPageZoneGraphicExternalImage.
            </summary>
        </member>
        <member name="M:IDRSNET.CPageZoneGraphicExternalImage.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CPageZoneGraphicExternalImage.GetPointer">
            <summary>
            Internal override  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CPageZoneGraphicExternalImage.SetPointer(System.IntPtr)">
            <summary>
            Internal override  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CPageZoneGraphicExternalImage object</param>
        </member>
        <member name="P:IDRSNET.CPageZoneGraphicExternalImage.Image">
            <summary>
            Get/Set the image associated with the page graphical image
            </summary>
            
        </member>
        <member name="T:IDRSNET.CPageZoneTable">
            <summary>
            CPageZoneTable represents a table zone in iDRS SDK
            </summary>
        </member>
        <member name="M:IDRSNET.CPageZoneTable.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:IDRSNET.CPageZoneTable.#ctor(IDRSNET.CPageZone)">
            <summary>
            Constructor using the base class
            </summary>
            <param name="argPageZone">Base page zone</param>
        </member>
        <member name="M:IDRSNET.CPageZoneTable.Finalize">
            <summary>
            Destructor of CPageZoneTable.
            </summary>
        </member>
        <member name="M:IDRSNET.CPageZoneTable.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CPageZoneTable.GetPointer">
            <summary>
            Internal override  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CPageZoneTable.SetPointer(System.IntPtr)">
            <summary>
            Internal override  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CPageZoneTable object</param>
        </member>
        <member name="P:IDRSNET.CPageZoneTable.Cells">
            <summary>
            Get/Set an array containing the cells in the table
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageZoneTable.RowsCount">
            <summary>
            Get/Set the number of rows in the table
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPageZoneTable.ColsCount">
            <summary>
            Get/Set the number of columns in the table
            </summary>
            
        </member>
        <member name="T:IDRSNET.CPageZoneText">
            <summary>
            CPageZoneText represents a text zone in a page
            In contains a list with groups of paragraphs
            </summary>
        </member>
        <member name="M:IDRSNET.CPageZoneText.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:IDRSNET.CPageZoneText.#ctor(IDRSNET.CPageZone)">
            <summary>
            Constructor using the base class
            </summary>
            <param name="argPageZone">Base page zone</param>
        </member>
        <member name="M:IDRSNET.CPageZoneText.Finalize">
            <summary>
            Destructor of CPageZoneText.
            </summary>
        </member>
        <member name="M:IDRSNET.CPageZoneText.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CPageZoneText.GetPointer">
            <summary>
            Internal override  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CPageZoneText.SetPointer(System.IntPtr)">
            <summary>
            Internal override  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CPageZoneText object</param>
        </member>
        <member name="P:IDRSNET.CPageZoneText.ParagraphsGroups">
            <summary>
            Get/Set the list of paragraphs groups
            </summary>
            
        </member>
        <member name="T:IDRSNET.CPdfCompressionOptions">
            <summary>
            CPdfCompressionOptions class specifies the pdf compression options
            </summary>
        </member>
        <member name="M:IDRSNET.CPdfCompressionOptions.#ctor">
            <summary>
            Create is instantiating a new instance of CPdfCompressionOptions and associated data object
            </summary>
            <returns>New instance of CPdfCompressionOptions</returns>
        </member>
        <member name="M:IDRSNET.CPdfCompressionOptions.Finalize">
            <summary>
            Destructor of CPdfCompressionOptions.
            </summary>
        </member>
        <member name="M:IDRSNET.CPdfCompressionOptions.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CPdfCompressionOptions.GetPointer">
            <summary>
            Internal virtual  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CPdfCompressionOptions.SetPointer(System.IntPtr)">
            <summary>
            Internal virtual  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CPdfCompressionOptions object</param>
        </member>
        <member name="P:IDRSNET.CPdfCompressionOptions.BitonalFormat">
            <summary>
            Get/Set the Bitonal file format.
            This compression format will be used when input is black and white,
            or for the mask layer if PDF PageDisplay is set to HyperCompressed
            </summary>
            
            <pre> Only Tiff and Jbig2 accepted </pre>
        </member>
        <member name="P:IDRSNET.CPdfCompressionOptions.ColorFormat">
            <summary>
            Get/Set the Color file format.
            This compression format will be used when when input is color or grayscale
            </summary>
            
            <pre> Only Jpeg and Jpeg2000 accepted </pre>
        </member>
        <member name="P:IDRSNET.CPdfCompressionOptions.CompressionQuality">
            <summary>
            Get/Set the pdf compression quality.
            </summary>
            
        </member>
        <member name="T:IDRSNET.CPdfCustomMetadata">
            <summary>
            CPdfCustomMetadata is the root container gathering all PDF metadata resources
            </summary>
        </member>
        <member name="M:IDRSNET.CPdfCustomMetadata.#ctor">
            <summary>
            Create Creates a CPdfCustomMetadata object.
            </summary>
            <exception>CIDRSException if an error occurs.</exception>
        </member>
        <member name="M:IDRSNET.CPdfCustomMetadata.Finalize">
            <summary>
            Destructor of CPdfCustomMetadata.
            </summary>
        </member>
        <member name="M:IDRSNET.CPdfCustomMetadata.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CPdfCustomMetadata.GetPointer">
            <summary>
            Internal override  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CPdfCustomMetadata.SetPointer(System.IntPtr)">
            <summary>
            Internal override  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CPdfCustomMetadata object</param>
        </member>
        <member name="T:IDRSNET.CPdfCustomMetadataContainer">
            <summary>
            CPdfCustomMetadataContainer represents a PDF metadata bag
            A container can contain
            </summary>
        </member>
        <member name="M:IDRSNET.CPdfCustomMetadataContainer.#ctor(System.String)">
            <summary>
            Create Creates a CPdfCustomMetadata object.
            </summary>
            <exception>CIDRSException if an error occurs.</exception>
        </member>
        <member name="M:IDRSNET.CPdfCustomMetadataContainer.Finalize">
            <summary>
            Destructor of CPdfCustomMetadataContainer.
            </summary>
        </member>
        <member name="M:IDRSNET.CPdfCustomMetadataContainer.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CPdfCustomMetadataContainer.GetPointer">
            <summary>
            Internal override  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CPdfCustomMetadataContainer.SetPointer(System.IntPtr)">
            <summary>
            Internal override  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CPdfCustomMetadataContainer object</param>
        </member>
        <member name="M:IDRSNET.CPdfCustomMetadataContainer.Add(IDRSNET.CPdfCustomMetadataResource)">
            <summary>
            Adds a new CPdfCustomMetadataResource to the PDF custom metadata list
            </summary>
            <param name="pPdfCustomMetadataResource">Object containing a custom metadata resource.</param>
        </member>
        <member name="M:IDRSNET.CPdfCustomMetadataContainer.Add(IDRSNET.CPdfCustomMetadataResource[])">
            <summary>
            Adds a list of CPdfCustomMetadataResource to the PDF custom metadata list
            </summary>
            <param name="xPdfCustomMetadataResource">Vector containing the custom metadata resources to add.</param>
        </member>
        <member name="M:IDRSNET.CPdfCustomMetadataContainer.GetAt(System.UInt32)">
            <summary>
            GetAt returns the CPdfCustomMetadataResource at a certain index
            </summary>
            <param name="uiIndex">Index where to read the CPdfCustomMetadataResource</param>
            <returns>The CPdfCustomMetadataResource at the supplied index</returns>
        </member>
        <member name="M:IDRSNET.CPdfCustomMetadataContainer.RemoveAt(System.UInt32)">
            <summary>
            RemoveAt removes a CPdfCustomMetadataResource from the list
            </summary>
            <param name="uiIndex">The index where to remove the object</param>
        </member>
        <member name="M:IDRSNET.CPdfCustomMetadataContainer.RemoveAll">
            <summary>
            RemoveAll removes all CPdfCustomMetadataResource from the list
            </summary>
        </member>
        <member name="P:IDRSNET.CPdfCustomMetadataContainer.Count">
            <summary>
            GetCount returns the number of PDF custom metadata resource
            
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPdfCustomMetadataContainer.ContainerName">
            <summary>
            Retrieves the container name
            
            </summary>
            
        </member>
        <member name="T:IDRSNET.CPdfCustomMetadataProperty">
            <summary>
            CPdfCustomMetadataProperty represents a PDF metadata property composed of a name/value pair.
            </summary>
        </member>
        <member name="M:IDRSNET.CPdfCustomMetadataProperty.#ctor(System.String,System.String)">
            <summary>
            Create Creates a CPdfCustomMetadataProperty object.
            </summary>
            <exception>CIDRSException if an error occurs.</exception>
            <param name="strPropertyName">The name of the custom metadata property tag</param>
            <param name="strPropertyValue">The value of the custom metadata property</param>
        </member>
        <member name="M:IDRSNET.CPdfCustomMetadataProperty.Finalize">
            <summary>
            Destructor of CPdfCustomMetadataProperty.
            </summary>
        </member>
        <member name="M:IDRSNET.CPdfCustomMetadataProperty.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CPdfCustomMetadataProperty.GetPointer">
            <summary>
            Internal virtual  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CPdfCustomMetadataProperty.SetPointer(System.IntPtr)">
            <summary>
            Internal virtual  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CPdfCustomMetadataProperty object</param>
        </member>
        <member name="P:IDRSNET.CPdfCustomMetadataProperty.PropertyName">
            <summary>
            Get/Set the name of the metadata property tag.
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPdfCustomMetadataProperty.PropertyValue">
            <summary>
            Get/Set the value of the metadata property.
            </summary>
            
        </member>
        <member name="T:IDRSNET.CPdfCustomMetadataPropertyList">
            <summary>
            CPdfCustomMetadataPropertyList represents a list of custom metadata properties
            </summary>
        </member>
        <member name="M:IDRSNET.CPdfCustomMetadataPropertyList.#ctor">
            <summary>
            Create Creates a CPdfCustomMetadataPropertyList object.
            </summary>
            <exception>CIDRSException if an error occurs.</exception>
        </member>
        <member name="M:IDRSNET.CPdfCustomMetadataPropertyList.Finalize">
            <summary>
            Destructor of CPdfCustomMetadataPropertyList.
            </summary>
        </member>
        <member name="M:IDRSNET.CPdfCustomMetadataPropertyList.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CPdfCustomMetadataPropertyList.GetPointer">
            <summary>
            Internal override  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CPdfCustomMetadataPropertyList.SetPointer(System.IntPtr)">
            <summary>
            Internal override  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CPdfCustomMetadataPropertyList object</param>
        </member>
        <member name="M:IDRSNET.CPdfCustomMetadataPropertyList.AddProperty(IDRSNET.CPdfCustomMetadataProperty)">
            <summary>
            Adds a new CPdfCustomMetadataProperty to the metadata properties list
            </summary>
            <param name="objPdfCustomMetadataProperty">Object containing a cutsom metadata property.</param>
        </member>
        <member name="M:IDRSNET.CPdfCustomMetadataPropertyList.AddPropertyList(IDRSNET.CPdfCustomMetadataPropertyList)">
            <summary>
            Adds a list of CPdfCustomMetadataResource to the PDF custom metadata list
            </summary>
            <param name="objPdfCustomMetadataPropertyList">a CPdfCustomMetadataPropertyList containing the properties to merge.</param>
        </member>
        <member name="M:IDRSNET.CPdfCustomMetadataPropertyList.GetAt(System.UInt32)">
            <summary>
            GetAt returns the CPdfCustomMetadataResource at a certain index
            </summary>
            <param name="uiIndex">Index where to read the CPdfCustomMetadataResource</param>
            <returns>The CPdfCustomMetadataResource at the supplied index</returns>
        </member>
        <member name="M:IDRSNET.CPdfCustomMetadataPropertyList.RemoveAt(System.UInt32)">
            <summary>
            RemoveAt removes a CPdfCustomMetadataProperty from the list
            </summary>
            <param name="uiIndex">The index where to remove the object</param>
        </member>
        <member name="M:IDRSNET.CPdfCustomMetadataPropertyList.RemoveAll">
            <summary>
            RemoveAll removes all CPdfCustomMetadataProperty from the list
            </summary>
        </member>
        <member name="P:IDRSNET.CPdfCustomMetadataPropertyList.Count">
            <summary>
            GetCount returns the number of properties stored in the list
            
            </summary>
            
        </member>
        <member name="T:IDRSNET.CPdfCustomMetadataResource">
            <summary>
            CPdfCustomMetadataResource is the base class for a PDF metadata element.
            A metadata resource can be a either a list of properties or a container.
            </summary>
        </member>
        <member name="T:IDRSNET.CPdfCustomMetadataResource.ePdfCustomMetadataResourceType">
            <summary>
            Flags for describing a Pdf Metadata Resource type
            </summary>
        </member>
        <member name="F:IDRSNET.CPdfCustomMetadataResource.ePdfCustomMetadataResourceType.PdfCustomMetadataResourceContainer">
            <summary>
            The container flag
            </summary>
        </member>
        <member name="F:IDRSNET.CPdfCustomMetadataResource.ePdfCustomMetadataResourceType.PdfCustomMetadataResourcePropertyList">
            <summary>
            The property list flag
            </summary>
        </member>
        <member name="M:IDRSNET.CPdfCustomMetadataResource.Finalize">
            <summary>
            Destructor of CPdfCustomMetadataResource.
            </summary>
        </member>
        <member name="M:IDRSNET.CPdfCustomMetadataResource.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CPdfCustomMetadataResource.GetPointer">
            <summary>
            Internal virtual  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CPdfCustomMetadataResource.SetPointer(System.IntPtr)">
            <summary>
            Internal virtual  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CPdfCustomMetadataResource object</param>
        </member>
        <member name="M:IDRSNET.CPdfCustomMetadataResource.SetNamespace(System.String,System.String)">
            <summary>
            SetNamespace set both namespace prefix and namespace name for the metadata resource.
            The default value is: xmlns:idrs="https://ns.iriscorporate.com/xmp-idrs"
            </summary>
            <param name="strPrefix">The namespace prefix value</param>
            <param name="strNamespaceName">The namespace name</param>
        </member>
        <member name="P:IDRSNET.CPdfCustomMetadataResource.NamespaceName">
            <summary>
            SetNamespaceName Get/Set the value of the namespace for the PDF metadata resource.
            The default value for a resource namespace is "https://ns.iriscorporate.com/xmp-idrs"
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPdfCustomMetadataResource.Description">
            <summary>
            SetDescription Get/Set a description text associated with the PDF metadata resource
            </summary>
            
        </member>
        <!-- Badly formed XML comment ignored for member "P:IDRSNET.CPdfCustomMetadataResource.NamespacePrefix" -->
        <member name="P:IDRSNET.CPdfCustomMetadataResource.PdfCustomMetadataType">
            <summary>
            GetPdfCustomMetadataType returns the type of metadata resource
            
            </summary>
            
        </member>
        <member name="T:IDRSNET.CPdfOperation">
            <summary>
            CPdfOperation exposes features which can be used on PDF documents.
            </summary>
        </member>
        <member name="M:IDRSNET.CPdfOperation.ApplySignature(System.String,System.String,System.String,IDRSNET.CDigitalSignature,IDRSNET.CPdfUpdateParams)">
            <summary>
            Adds a digital signature to an existing PDF document and save the result to another document
            </summary>
            <param name="strInputFilePath">Path to the PDF document</param>
            <param name="strOutputFilePath">Path to the new PDF document to create</param>
            <param name="strPassword">Owner password if specified otherwise User password used to open the PDF document. (NULL if it is not password-protected)</param>
            <param name="argDigitalSignature">digital signature to apply</param>
            <param name="argPdfUpdateParams">The PDF update parameters</param>
            <returns>IDRS_SUCCESS if the digital signature was properly added, a specific error code otherwise</returns>
            \req IDRS::IDRS_MODULE_DOCUMENT_OUTPUT
            \req IDRS::IDRS_MODULE_IMAGE_FILE with extension IDRS::IDRS_FILE_EXTENSION_PDF
            <remarks>If the input PDF is a PDF/A, the method will throw an exception with code IDRS_ERROR_INVALID_ARGS unless font embedding is set in the PDF Update params.</remarks>
        </member>
        <member name="M:IDRSNET.CPdfOperation.ApplySignature(System.String,System.String,IDRSNET.CDigitalSignature,IDRSNET.CPdfUpdateParams)">
            <summary>
            Adds a digital signature to an existing PDF document and save the result in the same document (appending)
            </summary>
            <param name="strDocumentFilePath">Path to the PDF document to update</param>
            <param name="strPassword">Owner password if specified otherwise User password used to open the PDF document. (NULL if it is not password-protected)</param>
            <param name="argDigitalSignature">digital signature to apply</param>
            <param name="argPdfUpdateParams">The PDF update parameters</param>
            <returns>IDRS_SUCCESS if the digital signature was properly added, a specific error code otherwise</returns>
            <remarks>
            Updating the input file "in-place" will be faster and consume less memory, however if the method fails, the document may be corrupted.
            \req IDRS::IDRS_MODULE_DOCUMENT_OUTPUT
            \req IDRS::IDRS_MODULE_IMAGE_FILE with extension IDRS::IDRS_FILE_EXTENSION_PDF
            </remarks>
            <remarks>If the input PDF is a PDF/A, the method will throw an exception with code IDRS_ERROR_INVALID_ARGS unless font embedding is set in the PDF Update params.</remarks>
        </member>
        <member name="M:IDRSNET.CPdfOperation.ApplySignature(System.IO.Stream,System.IO.Stream,System.String,IDRSNET.CDigitalSignature,IDRSNET.CPdfUpdateParams)">
            <summary>
            Adds a digital signature to an existing PDF document and save the result to another document
            </summary>
            <param name="argInputStream">Stream opened on the PDF document</param>
            <param name="argOutputStream">Stream to the new PDF document to create</param>
            <param name="strPassword">Owner password if specified otherwise User password used to open the PDF document. (NULL if it is not password-protected)</param>
            <param name="argDigitalSignature">digital signature to apply</param>
            <param name="argPdfUpdateParams">The PDF update parameters</param>
            <returns>IDRS_SUCCESS if the digital signature was properly added, a specific error code otherwise</returns>
            \req IDRS::IDRS_MODULE_DOCUMENT_OUTPUT
            \req IDRS::IDRS_MODULE_IMAGE_FILE with extension IDRS::IDRS_FILE_EXTENSION_PDF
            <remarks>If the input PDF is a PDF/A, the method will throw an exception with code IDRS_ERROR_INVALID_ARGS unless font embedding is set in the PDF Update params.</remarks>
        </member>
        <member name="M:IDRSNET.CPdfOperation.ApplySignature(System.IO.Stream,System.String,IDRSNET.CDigitalSignature,IDRSNET.CPdfUpdateParams)">
            <summary>
            Adds a digital signature to an existing PDF document and save the result in the same document (appending)
            </summary>
            <param name="argDocumentStream">Stream opened on the PDF document to update</param>
            <param name="strPassword">Owner password if specified otherwise User password used to open the PDF document. (NULL if it is not password-protected)</param>
            <param name="argDigitalSignature">digital signature to apply</param>
            <param name="argPdfUpdateParams">The PDF update parameters</param>
            <returns>IDRS_SUCCESS if the digital signature was properly added, a specific error code otherwise</returns>
            <remarks>
            Updating the input file "in-place" will be faster and consume less memory, however if the method fails, the document may be corrupted.
            \req IDRS::IDRS_MODULE_DOCUMENT_OUTPUT
            \req IDRS::IDRS_MODULE_IMAGE_FILE with extension IDRS::IDRS_FILE_EXTENSION_PDF
            </remarks>
            <remarks>If the input PDF is a PDF/A, the method will throw an exception with code IDRS_ERROR_INVALID_ARGS unless font embedding is set in the PDF Update params.</remarks>
        </member>
        <member name="T:IDRSNET.CPdfOutputParams">
            <summary>
            CPdfOutputParams class manages the parameters to create a Pdf file
            </summary>
        </member>
        <member name="M:IDRSNET.CPdfOutputParams.#ctor(IDRSNET.PdfVersion,IDRSNET.PageDisplay)">
            <summary>
            Create is instantiating a new instance of CPdfOutputParams and associated data object
            </summary>
            <param name="evPdfVersion">pdf version value</param>
            <param name="evPageDisplay">page display value</param>
            <returns>New instance of CPdfOutputParams</returns>
        </member>
        <member name="M:IDRSNET.CPdfOutputParams.Finalize">
            <summary>
            Destructor of CPdfOutputParams.
            </summary>
        </member>
        <member name="M:IDRSNET.CPdfOutputParams.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CPdfOutputParams.GetPointer">
            <summary>
            Internal override  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CPdfOutputParams.SetPointer(System.IntPtr)">
            <summary>
            Internal override  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CPdfOutputParams object</param>
        </member>
        <member name="P:IDRSNET.CPdfOutputParams.EmbedFonts">
            <summary>
            Gets the boolean flag specifying if the embed fonts is enabled.
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPdfOutputParams.PdfCompressionOptions">
            <summary>
            Get/Set the pdf compression options object
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPdfOutputParams.DigitalSignatures">
            <summary>
            Get/Set the digital signatures associated to the ouput pdf document.
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPdfOutputParams.EncryptionOptions">
            <summary>
            Get/Set the encryption options.
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPdfOutputParams.MetadataInfo">
            <summary>
            Get/Set the metadata info.
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPdfOutputParams.PdfCustomMetadata">
            <summary>
            Get/Set the pdf custom metadata.
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPdfOutputParams.PageDisplay">
            <summary>
            Gets the page display type.
            
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPdfOutputParams.ImageProcessingOptions">
            <summary>
            Get/Set the image processing options.
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPdfOutputParams.UseOriginalRotation">
            <summary>
            Get/Set a boolean flag indicating whether the use original rotation is enabled.
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPdfOutputParams.BookmarksOptions">
            <summary>
            Get/Set the pdf bookmarks options.
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPdfOutputParams.PdfVersion">
            <summary>
            Gets the pdf version.
            
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPdfOutputParams.AttachmentsList">
            <summary>
            Get/Set the list of attachments to add to the output PDF.
            </summary>
            <remarks>Calling this method with a NULL parameter will remove any attachments list from this object.</remarks>
            <remarks>It is not possible to set attachments for PDF/A-1 and PDF/A-2 files, therefore in this case an exception will be thrown.</remarks>
        </member>
        <member name="T:IDRSNET.CPdfUpdateParams">
            <summary>
            The CPdfUpdateParams class manages the parameters for PDF update operations.
            </summary>
        </member>
        <member name="M:IDRSNET.CPdfUpdateParams.#ctor">
            <summary>
            The Create method creates a CPdfUpdateParams object with default configuration (do not embed signature fonts, and use
            default pdf image compression parameters).
            </summary>
            <returns>The newly created CPdfUpdateParams object.</returns>
        </member>
        <member name="M:IDRSNET.CPdfUpdateParams.#ctor(System.Boolean,IDRSNET.CPdfCompressionOptions)">
            <summary>
            The Create method creates a CPdfUpdateParams object.
            </summary>
            <param name="bEmbedSignatureFonts">embed signature fonts flag value.</param>
            <param name="argPdfSignatureCompressionOptions">Signature compression options object.</param>
            <returns>The newly created CPdfUpdateParams object.</returns>
        </member>
        <member name="M:IDRSNET.CPdfUpdateParams.Finalize">
            <summary>
            Destructor of CPdfUpdateParams.
            </summary>
        </member>
        <member name="M:IDRSNET.CPdfUpdateParams.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CPdfUpdateParams.GetPointer">
            <summary>
            Internal virtual  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CPdfUpdateParams.SetPointer(System.IntPtr)">
            <summary>
            Internal virtual  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CPdfUpdateParams object</param>
        </member>
        <member name="P:IDRSNET.CPdfUpdateParams.EmbedSignatureFonts">
            <summary>
            Get/Set the font embedding flag's value.
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPdfUpdateParams.SignatureCompressionOptions">
            <summary>
            Get/Set the signature image compression parameters to use.
            </summary>
            
        </member>
        <member name="T:IDRSNET.CPersistentPageSet">
            <summary>
            The CPersistentPageSet class represents the CPageSet implementation class that uses saved xml file and image files as input for document output engine
            \ingroup module_core module_ocr module_document_output
            </summary>
        </member>
        <member name="M:IDRSNET.CPersistentPageSet.#ctor">
            <summary>
            Creates a new CPersistentPageSet
            </summary>
            <returns>The newly created CPersistentPageSet</returns>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CPersistentPageSet.Finalize">
            <summary>
            Destructor of CPersistentPageSet.
            </summary>
        </member>
        <member name="M:IDRSNET.CPersistentPageSet.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CPersistentPageSet.GetPointer">
            <summary>
            Internal GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CPersistentPageSet.SetPointer(System.IntPtr)">
            <summary>
            Internal SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CPersistentPageSet object</param>
        </member>
        <member name="M:IDRSNET.CPersistentPageSet.GetPageCount">
            <summary>
            GetPageCount returns the number of pages in the current CPageSet.
            </summary>
            <returns>The number of pages in the page set</returns>
        </member>
        <member name="M:IDRSNET.CPersistentPageSet.Seek(System.Int32,IDRSNET.IDRS_SEEK_POSITION)">
            <summary>
            Changes the page index in the page set
            This change affects the return of GetNextPage function
            </summary>
            <param name="iOffset">The number of pages to move the page index</param>
            <param name="spSeekPosition">The position relative to which the page index will be changed</param>
            <returns>The new 0-based index</returns>
        </member>
        <member name="M:IDRSNET.CPersistentPageSet.Add(System.String,System.String)">
            <summary>
            Adds a new entry in the CPageSet
            </summary>
            <param name="strXmlPath">Path to the xml file containing the recognition results</param>
            <param name="strImagePath">Path to the image file</param>
        </member>
        <member name="M:IDRSNET.CPersistentPageSet.Get(System.UInt32,System.String@,System.String@)">
            <summary>
            Fetches the path of XML file and the Image file at the value defined by uiIndex
            </summary>
            <param name="uiIndex">Page index of the paths to get</param>
            <param name="strXmlPath">Buffer to retrieve the path to the xml file</param>
            <param name="uiXmlPathBufferSize">Size of strXmlPath</param>
            <param name="strImagePath">Buffer to retrieve the path to the image</param>
            <param name="uiImagePathBufferSize">Size of strImagePath</param>
        </member>
        <member name="M:IDRSNET.CPersistentPageSet.GetNextPage">
            <summary>
            GetNextPage returns the next page to be processed by the document output engine
            </summary>
            <returns>The page to be used by the document output engine</returns>
        </member>
        <member name="T:IDRSNET.CPerspective">
            <summary>
            The CPerspective class offers perspective correction of document images captured by a camera. Perspective distortions are a frequent phenomenon when it comes to camera-based document images and their correction is highly recommended as it increases significantly the recognition accuracy. The CPerspective class can be used for all types of document images (document images containing barcodes, printed or handwritten text).
            \ingroup module_prepro_mobile_capture
            The following examples display camera-captured document images before and after the projective correction.
            \image html perspective_correction_examples.png
            \image rtf perspective_correction_examples.png
            <b>IMPORTANT</b>
            
            To clarify any confusion between the deskew correction and the perspective correction, it is important to note that the first one is needed for scanned image documents (estimation of the rotation angle of the distorted image) whereas the second one for camera-captured document images (estimation of many parameters).
            
            To identify the source of an image (scanner, camera or unknown), please use the CImageSource class.
            \req IDRS::IDRS_MODULE_PREPRO with extension IDRS::IDRS_PREPRO_EXTENSION_MOBILE_CAPTURE
            <see cref="F:IDRSNET.IDRS_MODULE.IDRS_MODULE_PREPRO"/> 
            <see cref="F:IDRSNET.IDRS_EXTENSION.IDRS_PREPRO_EXTENSION_MOBILE_CAPTURE"/> for information about mobile capture extension
            </summary>
        </member>
        <member name="M:IDRSNET.CPerspective.#ctor(IDRSNET.CIDRS)">
            <summary>
            Creates a new CPerspective object
            </summary>
            <pre>! objIdrs.IsNull ()</pre>
            <param name="objIdrs">Idrs handle</param>
            <returns>The newly created CPerspective object.</returns>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CPerspective.Finalize">
            <summary>
            Destructor of CPerspective.
            </summary>
        </member>
        <member name="M:IDRSNET.CPerspective.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CPerspective.GetPointer">
            <summary>
            Internal override  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CPerspective.SetPointer(System.IntPtr)">
            <summary>
            Internal override  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CPerspective object</param>
        </member>
        <member name="M:IDRSNET.CPerspective.DetectDocumentCorners(IDRSNET.CImage,IDRSNET.CIDRSPerspectiveCorners@)">
            <summary>
            DetectDocumentCorners retrieves the corners for the supplied image.
            </summary>
            <pre>! IsNull ()</pre>
            <param name="argImage">The image for which the perspective distortion corners will be computed.</param>
            <param name="argPerspectiveCorners">Output structure that will contain the perspective distortion corners computed.</param>
            <remarks>
            \internal
            out_struct_param argPerspectiveCorners
            \endinternal
            </remarks>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CPerspective.DetectDocumentCorners(IDRSNET.CPage,IDRSNET.CIDRSPerspectiveCorners@)">
            <summary>
            DetectDocumentCorners retrieves the corners for the supplied page.
            </summary>
            <pre>! IsNull ()</pre>
            <param name="argPage">The page for which the perspective distortion corners will be computed.</param>
            <param name="argPerspectiveCorners">Output structure that will contain the perspective distortion corners computed.</param>
            <remarks>
            \internal
            out_struct_param argPerspectiveCorners
            \endinternal
            </remarks>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CPerspective.ApplyCorrection(IDRSNET.CImage,IDRSNET.CIDRSPerspectiveCorners)">
            <summary>
            ApplyCorrection corrects perspective distortion of the supplied image using the provided corners.
            </summary>
            <pre>! IsNull ()</pre>
            <param name="argImage">The image where perspective distortions will be corrected, using the corners provided in pcPerspectiveCorners</param>
            <param name="pcPerspectiveCorners">The corners of corrected document (usually obtained using <see cref="M:IDRSNET.CPerspective.DetectDocumentCorners(IDRSNET.CImage,IDRSNET.CIDRSPerspectiveCorners@)"/>) </param>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CPerspective.ApplyCorrection(IDRSNET.CPage,IDRSNET.CIDRSPerspectiveCorners)">
            <summary>
            ApplyCorrection corrects perspective distortion of the supplied page using the provided corners.
            </summary>
            <pre>! IsNull ()</pre>
            <param name="argPage">The page where perspective distortions will be corrected, using the corners provided in pcPerspectiveCorners</param>
            <param name="pcPerspectiveCorners">The corners of corrected document (usually obtained using <see cref="M:IDRSNET.CPerspective.DetectDocumentCorners(IDRSNET.CImage,IDRSNET.CIDRSPerspectiveCorners@)"/>) </param>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="P:IDRSNET.CPerspective.BoundaryCorners">
            <summary>
            Get/Set the use boundary corners flag.
            If the flag is set to IDRS_TRUE, the method ApplyCorrection () will crop the underlying CImage or CPage object
            so that it contains only the area delimited by the four corners provided as parameters.
            If the flag is set to IDRS_FALSE, the method ApplyCorrection () will keep all pixels of the underlying CImage or CPage object.      /// Default value for the flag is IDRS_TRUE.
            </summary>
            <remarks>
            If the flag is set to IDRS_FALSE, the method DetectDocumentCorners() may fail with a specific exception thrown: IDRS_ERROR_MOBILE_CAPTURE_PERSPECTIVE_DISTORTION_TOO_LARGE.
            This will happen when the detected perspective is considered too large; which consists in the following cases:
            - The angle of any of the corners is less than 23 degrees
            - The dimension (width or height) of the corrected image would be more than 2.5 times the corresponding dimension of the original image.
            When such an exception is thrown, an integrator can fallback to performing perspective correction with BoundaryCorners flag set to IDRS_TRUE.
            </remarks>
        </member>
        <member name="T:IDRSNET.CPolygon">
            <summary>
            The CPolygon class handles polygons for iDRS.
            \ingroup module_core
            iDRS SDK uses polygons to describe zones in images.
            The CPolygon class provides many geometric tests on closed convex polygon:
            - intersection detection,
            - point in a polygon,
            - ...
            In iDRS, a polygon is a list of horizontal vectors. It must be oriented counterclockwise.
            <see cref="T:IDRSNET.IDRS_VECTOR"/> 
            </summary>
        </member>
        <member name="M:IDRSNET.CPolygon.#ctor(IDRSNET.CIDRSRect)">
            <summary>
            Creates a new polygon that fits the given rectangle.
            </summary>
            <pre>rect.uiTop &lt; rect.uiBottom</pre>
            <pre>rect.uiLeft &lt; rect.uiRight</pre>
            <param name="rect">The rectangle.</param>
            <returns>The newly created polygon.</returns>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CPolygon.#ctor(IDRSNET.CPolygonVectorBuffer)">
            <summary>
            Creates a new polygon with the vectors of the buffer.
            </summary>
            <pre>! argPolygonVectorBuffer.IsNull ()</pre>
            <pre>argPolygonVectorBuffer.GetCount () != 0</pre>
            <param name="argPolygonVectorBuffer">The buffer containing the vectors to add.</param>
            <returns>The newly created polygon.</returns>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CPolygon.#ctor(IDRSNET.CIDRSVector[])">
            <summary>
            Creates a new polygon with the vectors of the buffer.
            </summary>
            <param name="xvVectorToAdd">The array of vectors.</param>
            <returns>The newly created polygon.</returns>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CPolygon.Finalize">
            <summary>
            Destructor of CPolygon.
            </summary>
        </member>
        <member name="M:IDRSNET.CPolygon.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CPolygon.GetPointer">
            <summary>
            Internal virtual  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CPolygon.SetPointer(System.IntPtr)">
            <summary>
            Internal virtual  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CPolygon object</param>
        </member>
        <member name="M:IDRSNET.CPolygon.IsRectangle">
            <summary>
            Tests if the polygon is a simple rectangle.
            </summary>
            <pre>! IsNull ()</pre>
            <returns>IDRS_TRUE if the polygon is a simple rectangle.</returns>
            <returns>IDRS_FALSE otherwise.</returns>
        </member>
        <member name="M:IDRSNET.CPolygon.GetVectorAt(System.UInt32,IDRSNET.CIDRSVector)">
            <summary>
            Retrieves the vector at the given index.
            </summary>
            <pre>! IsNull ()</pre>
            <pre>uiIndex &lt; GetVectorCount ()</pre>
            <param name="uiIndex">The 0 based index of the vector to retrieve.</param>
            <param name="rVector">To return the vector's coordinates.</param>
        </member>
        <member name="M:IDRSNET.CPolygon.GetVectorsAt(System.UInt32,System.UInt32,IDRSNET.CIDRSVector[])">
            <summary>
            Retrieves the vectors at the given index.
            </summary>
            <pre>! IsNull ()</pre>
            <pre>xvVector != NULL</pre>
            <pre>( uiIndex + uiCount ) &lt;= GetVectorCount ()</pre>
            <pre>uiCount != 0</pre>
            <param name="uiIndex">The zero based index of the first vector to retrieve.</param>
            <param name="uiCount">The number of vectors to get.</param>
            <param name="xvVector">To receive the vectors.</param>
        </member>
        <member name="M:IDRSNET.CPolygon.IsContainPoint(System.UInt32,System.UInt32)">
            <summary>
            Tests if the given point is inside the polygon.
            </summary>
            <pre>! IsNull ()</pre>
            <param name="uiX">The x coordinate of the point to test.</param>
            <param name="uiY">The y coordinate of the point to test.</param>
            <returns>IDRS_TRUE if the point is inside the polygon.</returns>
            <returns>IDRS_FALSE otherwise.</returns>
        </member>
        <member name="M:IDRSNET.CPolygon.IsIntersectRectangle(IDRSNET.CIDRSRect)">
            <summary>
            Tests if the polygon intersects the given rectangle.
            </summary>
            <pre>! IsNull ()</pre>
            <pre>rect.uiTop &lt; rect.uiBottom</pre>
            <pre>rect.uiLeft &lt; rect.uiRight</pre>
            <param name="rect">The rectangle to test.</param>
            <returns>IDRS_TRUE if the polygon intersects the rectangle.</returns>
            <returns>IDRS_FALSE otherwise.</returns>
        </member>
        <member name="M:IDRSNET.CPolygon.IsIntersectPolygon(IDRSNET.CPolygon)">
            <summary>
            Tests if it exists an intersection between the two polygons.
            </summary>
            <pre>! IsNull ()</pre>
            <pre>! argPolygonToTest.IsNull ()</pre>
            <pre>argPolygonToTest.IsClosed ()</pre>
            <param name="argPolygonToTest">The polygon to test.</param>
            <returns>IDRS_TRUE if it exists an intersection.</returns>
            <returns>IDRS_FALSE otherwise.</returns>
        </member>
        <member name="M:IDRSNET.CPolygon.IsEqual(IDRSNET.CPolygon)">
            <summary>
            Compares the two polygons.
            </summary>
            <pre>! IsNull ()</pre>
            <pre>! argPolygonToTest.IsNull ()</pre>
            <param name="argPolygonToTest">The polygon to test.</param>
            <returns>IDRS_TRUE if the two polygons are equals.</returns>
            <returns>IDRS_FALSE otherwise.</returns>
        </member>
        <member name="M:IDRSNET.CPolygon.IsEqual(IDRSNET.CIDRSRect)">
            <summary>
            Compares the polygon with the supplied rectangle
            </summary>
            <pre>! IsNull ()</pre>
            <param name="argRectangle">The rectangle to test</param>
            <returns>IDRS_TRUE if the the polygons are equal</returns>
            <returns>IDRS_FALSE if the polygons are not equal</returns>
        </member>
        <member name="M:IDRSNET.CPolygon.Clone">
            <summary>
            Clone creates a copy of the current object
            It performs a deep copy of the information stored in current object
            </summary>
        </member>
        <member name="P:IDRSNET.CPolygon.VectorCount">
            <summary>
            
            </summary>
            
            <pre> ! IsNull () </pre>
        </member>
        <member name="P:IDRSNET.CPolygon.Width">
            <summary>
            
            </summary>
            
            <pre> ! IsNull () </pre>
        </member>
        <member name="P:IDRSNET.CPolygon.BoundingRect">
            <summary>
            
            </summary>
            
            <pre> ! IsNull () </pre>
        </member>
        <member name="P:IDRSNET.CPolygon.Height">
            <summary>
            
            </summary>
            
            <pre> ! IsNull () </pre>
        </member>
        <member name="T:IDRSNET.CPolygonVectorBuffer">
            <summary>
            The CPolygonVectorBuffer manages a buffer of vectors.
            \ingroup module_core
            The class handles a rough buffer of vectors, there's no check on polygon integrity.
            Polygon integrity check and geometrical operations are part of the CPolygon class.
            <see cref="T:IDRSNET.CPolygon"/> 
            </summary>
        </member>
        <member name="M:IDRSNET.CPolygonVectorBuffer.#ctor">
            <summary>
            Creates a new empty buffer of vectors.
            </summary>
            <returns>The newly created CPolygonVectorBuffer object.</returns>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CPolygonVectorBuffer.Finalize">
            <summary>
            Destructor of CPolygonVectorBuffer.
            </summary>
        </member>
        <member name="M:IDRSNET.CPolygonVectorBuffer.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CPolygonVectorBuffer.GetPointer">
            <summary>
            Internal virtual  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CPolygonVectorBuffer.SetPointer(System.IntPtr)">
            <summary>
            Internal virtual  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CPolygonVectorBuffer object</param>
        </member>
        <member name="M:IDRSNET.CPolygonVectorBuffer.Add(IDRSNET.CIDRSVector)">
            <summary>
            Add adds the vector to the buffer.
            </summary>
            <pre>! IsNull ()</pre>
            <param name="vVectorToAdd">The vector to add.</param>
        </member>
        <member name="M:IDRSNET.CPolygonVectorBuffer.Add(IDRSNET.CIDRSVector[])">
            <summary>
            AddVectors adds the vectors to the buffer.
            </summary>
            <pre>! IsNull ()</pre>
            <param name="xvVectorToAdd">The array of vectors to add.</param>
        </member>
        <member name="M:IDRSNET.CPolygonVectorBuffer.GetAt(System.UInt32,IDRSNET.CIDRSVector)">
            <summary>
            GetAt retrieves the vector at the given index.
            </summary>
            <pre>! IsNull ()</pre>
            <param name="uiIndex">The zero based index of the vector to retrieve.</param>
            <param name="vVector">To receive the vector.</param>
        </member>
        <member name="M:IDRSNET.CPolygonVectorBuffer.GetAt(System.UInt32,System.UInt32,IDRSNET.CIDRSVector[])">
            <summary>
            GetAt retrieves the vectors at the given index.
            </summary>
            <pre>xvVector != NULL</pre>
            <pre>! IsNull ()</pre>
            <param name="uiIndex">The zero based index of the first vector to retrieve.</param>
            <param name="uiVectorCount">The number of vector to get.</param>
            <param name="xvVector">To receive the vector.</param>
        </member>
        <member name="M:IDRSNET.CPolygonVectorBuffer.RemoveAll">
            <summary>
            RemoveAll removes all the vectors from the buffer.
            </summary>
            <pre>! IsNull ()</pre>
        </member>
        <member name="M:IDRSNET.CPolygonVectorBuffer.RemoveAt(System.UInt32,System.UInt32)">
            <summary>
            Removes vectors from the buffer
            </summary>
            <pre>! IsNull ()</pre>
            <param name="uiFirstIndex">The index of the first vector to remove.</param>
            <param name="uiCount">The number of vectors to remove.</param>
        </member>
        <member name="M:IDRSNET.CPolygonVectorBuffer.Clone(IDRSNET.CPolygonVectorBuffer)">
            <summary>
            Clone creates a clone of the buffer of vectors
            </summary>
            <pre>! IsNull ()</pre>
            <pre>! toClone.IsNull ()</pre>
            <param name="toClone">The buffer to clone.</param>
        </member>
        <member name="M:IDRSNET.CPolygonVectorBuffer.Find(IDRSNET.CIDRSVector,System.UInt32@)">
            <summary>
            Find looks for a vector equal to v.
            </summary>
            <param name="v">The vector to find.</param>
            <param name="uiIndex">To return the index of the vector.</param>
            <returns>IDRS_TRUE if the vector has been found, otherwise return IDRS_FALSE.</returns>
        </member>
        <member name="P:IDRSNET.CPolygonVectorBuffer.Count">
            <summary>
            
            </summary>
            
            <pre> ! IsNull () </pre>
        </member>
        <member name="T:IDRSNET.CPptxOutputParams">
            <summary>
            CPptxOutputParams class manages the parameters to create a pptx file
            </summary>
        </member>
        <member name="M:IDRSNET.CPptxOutputParams.#ctor(IDRSNET.SlideSize)">
            <summary>
            Create is instantiating a new instance of CPptxOutputParams and associated data object
            </summary>
            <param name="evSlideSize">slide size type</param>
            <returns>New instance of CPptxOutputParams</returns>
        </member>
        <member name="M:IDRSNET.CPptxOutputParams.Finalize">
            <summary>
            Destructor of CPptxOutputParams.
            </summary>
        </member>
        <member name="M:IDRSNET.CPptxOutputParams.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CPptxOutputParams.GetPointer">
            <summary>
            Internal override  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CPptxOutputParams.SetPointer(System.IntPtr)">
            <summary>
            Internal override  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CPptxOutputParams object</param>
        </member>
        <member name="P:IDRSNET.CPptxOutputParams.MetadataInfo">
            <summary>
            Get/Set the metadata info.
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPptxOutputParams.JpegCompressionOptions">
            <summary>
            Get/Set the Jpeg Compression Options property.
            </summary>
            
        </member>
        <member name="P:IDRSNET.CPptxOutputParams.SlideSize">
            <summary>
            Get the Slide Size.
            
            </summary>
            
        </member>
        <member name="T:IDRSNET.CPunchHoleRemoval">
            <summary>
            The CPunchHoleRemoval class is part of iDRS advanced preprocessing module. It provides punch hole removal capabilities.
            \ingroup module_prepro_adv
            \req IDRS::IDRS_MODULE_PREPRO with extension IDRS::IDRS_PREPRO_EXTENSION_ADVANCED_PREPRO
            </summary>
        </member>
        <member name="M:IDRSNET.CPunchHoleRemoval.#ctor(IDRSNET.CIDRS)">
            <summary>
            The Create method creates a CPunchHoleRemoval object.
            </summary>
            <param name="argIDRS">The iDRS instance.</param>
            <returns>The newly created CPunchHoleRemoval object.</returns>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CPunchHoleRemoval.Finalize">
            <summary>
            Destructor of CPunchHoleRemoval.
            </summary>
        </member>
        <member name="M:IDRSNET.CPunchHoleRemoval.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CPunchHoleRemoval.GetPointer">
            <summary>
            Internal virtual  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CPunchHoleRemoval.SetPointer(System.IntPtr)">
            <summary>
            Internal virtual  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CPunchHoleRemoval object</param>
        </member>
        <member name="M:IDRSNET.CPunchHoleRemoval.RemovePunchHole(IDRSNET.CImage)">
            <summary>
            RemovePunchHole automatically detects the location of the punch holes on the image and removes them.
            </summary>
            <pre>! IsNull ()</pre>
            <pre>! argImage.IsNull ()</pre>
            <param name="argImage">The image to process.</param>
            <remarks>
            The punch hole algorithm can be used on images with the following minimum dimensions (computed for 300dpi): width: 300px, height: 100
            Please note that the minimum height and width can vary with the image resolution.
            </remarks>
        </member>
        <member name="M:IDRSNET.CPunchHoleRemoval.RemovePunchHole(IDRSNET.CPage)">
            <summary>
            RemovePunchHole automatically detects the location of the punch holes on the image and removes them.
            </summary>
            <pre>! IsNull ()</pre>
            <pre>! argPage.IsNull ()</pre>
            <pre>argPage.IsBitonalAvailable ()</pre>
            <param name="argPage">The page to process.</param>
            <remarks>
            The punch hole algorithm can be used on images with the following minimum dimensions (computed for 300dpi): width: 300px, height: 100
            Please note that the minimum height and width can vary with the image resolution.
            </remarks>
        </member>
        <member name="T:IDRSNET.CQualityAssessment">
            <summary>
            The CQualityAssessment class offers a set of methods to estimate the OCR quality of a provided image.
            \ingroup module_prepro_mobile_capture
            \req IDRS::IDRS_MODULE_PREPRO with extension IDRS::IDRS_PREPRO_EXTENSION_MOBILE_CAPTURE
            <see cref="F:IDRSNET.IDRS_MODULE.IDRS_MODULE_PREPRO"/> 
            <see cref="F:IDRSNET.IDRS_EXTENSION.IDRS_PREPRO_EXTENSION_MOBILE_CAPTURE"/> for information about mobile capture extension
            </summary>
        </member>
        <member name="M:IDRSNET.CQualityAssessment.#ctor(IDRSNET.CIDRS)">
            <summary>
            Creates a new CQualtityAssessment object to estimate the OCR quality on the provided image.
            </summary>
            <returns>The newly created CQualityAssessment object.</returns>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CQualityAssessment.Finalize">
            <summary>
            Destructor of CQualityAssessment.
            </summary>
        </member>
        <member name="M:IDRSNET.CQualityAssessment.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CQualityAssessment.GetPointer">
            <summary>
            Internal virtual  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CQualityAssessment.SetPointer(System.IntPtr)">
            <summary>
            Internal virtual  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CQualityAssessment object</param>
        </member>
        <member name="M:IDRSNET.CQualityAssessment.EstimateOcrQuality(IDRSNET.CPage)">
            <summary>
            Estimate the OCR quality of a given page
            If the result is:
            - Between 0 and 50: the conditions for OCR are bad
            - Between 50 and 90 : the conditions for OCR are acceptable
            - Between 90 and 100 : the conditions for OCR are excellent
            </summary>
            <param name="argPage">the input page</param>
            <returns>An estimation value between 0 and 100</returns>
        </member>
        <member name="M:IDRSNET.CQualityAssessment.EstimateOcrQuality(IDRSNET.CImage)">
            <summary>
            Estimate the OCR quality of a given image
            If the result is:
            - Between 0 and 50: the conditions for OCR are bad
            - Between 50 and 90 : the conditions for OCR are acceptable
            - Between 90 and 100 : the conditions for OCR are excellent
            </summary>
            <param name="argImage">the input image</param>
            <returns>An estimation value between 0 and 100</returns>
        </member>
        <member name="M:IDRSNET.CQualityAssessment.EstimateOcrQuality(IDRSNET.CImage,IDRSNET.CIDRSPerspectiveCorners)">
            <summary>
            Estimate the OCR quality of a given image zone defined by corners
            If the result is:
            - Between 0 and 50: the conditions for OCR are bad
            - Between 50 and 90 : the conditions for OCR are acceptable
            - Between 90 and 100 : the conditions for OCR are excellent
            </summary>
            <param name="argImage">the input image</param>
            <param name="pcPerspectiveCorners">zone corners</param>
            <returns>An estimation value between 0 and 100</returns>
        </member>
        <member name="T:IDRSNET.CRangedPageQueue">
            <summary>
            The CRangedPageQueue class is an implementation of IPageQueue interface designed to bring advantage to
            multithreaded workflows.
            It stores internally the provided CPage objects in-memory, up to a maximum range after which no more objects
            can be added until some are consumed by the document output engine.
            It can be used in two ways:
            a. Same manner as a CMemoryPageSet, if created with a large range:
            - Integrator adds pages to the CRangedPageQueue instance and invokes method Close() once done
            - Then provides the instance as argument of CDocumentOutput::Save(), which will consume the pages
            and write the output document.
            This way of using has the same limitations than a CMemoryPageSet: as all pages are stored in memory, consumption
            will grow fast as pages are added to the range.
            b. Second way takes advantage of multithreaded workflows to avoid growing memory consumption:
            - One thread starts document output creation via a call to CDocumentOutput::Save() method and provides an instance
            of this object as argument
            - Parallelly, one (or several) threads perform OCR and add pages in the queue. If the add fails, the thread should
            wait then try again later on, when the output thread would have consumed some more pages from the front of the queue.
            - When there are no more pages to add, method Close() should be called.
            \ingroup module_core module_document_output
            </summary>
        </member>
        <member name="M:IDRSNET.CRangedPageQueue.#ctor(System.UInt32)">
            <summary>
            Creates a new CRangedPageQueue instance.
            </summary>
            <param name="uiMaxSize">The maximum size of the queue: instance won't allow to add more pages until one</param>
            <remarks>has been poped from the front of the queue by the document output engine.</remarks>
            <returns>The newly created CRangedPageQueue</returns>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CRangedPageQueue.Finalize">
            <summary>
            Destructor of CRangedPageQueue.
            </summary>
        </member>
        <member name="M:IDRSNET.CRangedPageQueue.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CRangedPageQueue.GetPointer">
            <summary>
            Internal GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CRangedPageQueue.SetPointer(System.IntPtr)">
            <summary>
            Internal SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CRangedPageQueue object</param>
        </member>
        <member name="M:IDRSNET.CRangedPageQueue.PopFront">
            <summary>
            Removes and return the page currently at the front of the queue.
            <see cref="M:IDRSNET.IPageQueue.PopFront"/> 
            </summary>
            <returns>The page to provide to the document output engine. If there is no more pages in the document, this</returns>
            <remarks>method must return NULL.</remarks>
            <remarks>
            Note that this implementation of PopFront() will be a blocking call until either next page is available
            (i.e. the page with following number than the last that has been poped), or method Close() has been invoked and
            there is no more pages to provide.
            </remarks>
        </member>
        <member name="M:IDRSNET.CRangedPageQueue.TryAddPage(IDRSNET.CPage,System.UInt32)">
            <summary>
            Try to add a new page to the CRangedPageQueue instance.
            </summary>
            <param name="argPage">The page to add</param>
            <param name="uiPageNumber">The 0-based page number in the output document.</param>
            <returns>IDRS_TRUE if the page was successfully added to the queue.</returns>
            <returns>IDRS_FALSE if the page has not been added.</returns>
            <remarks>Non-sequential addition is allowed: page number N can be added even if page number N-1 is not yet there.</remarks>
            <remarks>Pages with number higher than (last poped page number + uiMaxSize) will not be added to the queue.</remarks>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CRangedPageQueue.Close">
            <summary>
            Close the page queue. No more pages can then be added afterwards.
            The goal of this method is to declare the document as being complete i.e. no more pages will be added, so that
            the document output engine can stop waiting for more pages.
            </summary>
        </member>
        <member name="M:IDRSNET.CRangedPageQueue.Abort">
            <summary>
            Close the page queue. No more pages can then be added afterwards, and pages currently stored in the queue
            (i.e. waiting to be written to output document) will be discarded.
            The goal of this method is to interrupt document output creation as soon as possible if an exception occurs in
            a processing thread and workflow should be aborted.
            </summary>
        </member>
        <member name="T:IDRSNET.CRecognitionZone">
            <summary>
            The CRecognitionZone class provides a way for setting the area to be used by iDRS SDK to perform OCR and/or Barcode recognition
            \ingroup module_core module_ocr
            The recognition area can be represented with a simple rectangle or with a complex polygon.
            </summary>
        </member>
        <member name="M:IDRSNET.CRecognitionZone.#ctor(IDRSNET.CPolygon,IDRSNET.IDRS_ZONE_TYPE,System.UInt32)">
            <summary>
            Creates a new CRecognitionZone object initialized with an area representing a complex polygon
            </summary>
            <param name="argPolygon">Polygon representing the area to be used by the recognition engine</param>
            <param name="ztZoneType">The zone type</param>
            <param name="ui32Style">The zone style</param>
            <returns>The newly created CRecognitionZone</returns>
            <exception>CIDRSException if an error occur.</exception>
            <see cref="T:IDRSNET.CPolygon"/> 
            <see cref="T:IDRSNET.IDRS_ZONE_TYPE"/> 
        </member>
        <member name="M:IDRSNET.CRecognitionZone.#ctor(IDRSNET.CIDRSRect,IDRSNET.IDRS_ZONE_TYPE,System.UInt32)">
            <summary>
            Creates a new CRecognitionZone object initialized with an rectangle
            </summary>
            <param name="rRectangle">Rectangle representing the area to be used by the recognition engine</param>
            <param name="ztZoneType">The expected zone type</param>
            <param name="ui32Style">The zone style</param>
            <returns>The newly created CRecognitionZone</returns>
            <exception>CIDRSException if an error occur.</exception>
            <see cref="T:IDRSNET.IDRS_ZONE_TYPE"/> 
        </member>
        <member name="M:IDRSNET.CRecognitionZone.Finalize">
            <summary>
            Destructor of CRecognitionZone.
            </summary>
        </member>
        <member name="M:IDRSNET.CRecognitionZone.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CRecognitionZone.GetPointer">
            <summary>
            Internal override  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CRecognitionZone.SetPointer(System.IntPtr)">
            <summary>
            Internal override  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CRecognitionZone object</param>
        </member>
        <member name="M:IDRSNET.CRecognitionZone.SetRecognitionRectangle(IDRSNET.CIDRSRect)">
            <summary>
            SetRecognitionRectangle sets the rectangle area where iDRS SDK will perform recognition
            </summary>
            <param name="rRectangle">Rectangle representing the area to be used by the recognition engine</param>
            <remarks>
            \internal
            property disable
            \endinternal
            </remarks>
        </member>
        <member name="M:IDRSNET.CRecognitionZone.IsEqual(IDRSNET.CRecognitionZone)">
            <summary>
            IsEqual checks if two CRecognitionZone objects are equal
            </summary>
            <param name="argOtherRecognitionZone">CRecognitionZone object to compare</param>
            <returns>IDRS_TRUE if the two CRecognitionZone objects are equal</returns>
            <returns>IDRS_FALSE if the two CRecognitionZone objects are not equal</returns>
        </member>
        <member name="M:IDRSNET.CRecognitionZone.Clone">
            <summary>
            Clone creates a copy of the current object
            It performs a deep copy of the information stored in current object
            </summary>
        </member>
        <member name="P:IDRSNET.CRecognitionZone.RecognitionZone">
            <summary>
            SetRecognitionZone Get/Set the polygon area where iDRS SDK will perform recognition
            </summary>
            
        </member>
        <member name="P:IDRSNET.CRecognitionZone.ZoneStyle">
            <summary>
            SetZoneStyle Get/Set the zone style.
            Zone style is useful when trying to recognize zones with different parameters using CMultiContext
            <see cref="T:IDRSNET.CMultiContext"/>         /// GetZoneStyle outputs the zone style for current recognition zone
            </summary>
            
        </member>
        <member name="P:IDRSNET.CRecognitionZone.ZoneType">
            <summary>
            SetZoneType Get/Set the type of zone
            </summary>
            
        </member>
        <member name="T:IDRSNET.CResize">
            <summary>
            The CResize class offers image resizing.
            \ingroup module_prepro
            The class contains an algorithm for image resizing using all types of images:
            - black and white
            - greyscale
            - color
            \req IDRS::IDRS_MODULE_PREPRO
            </summary>
        </member>
        <member name="M:IDRSNET.CResize.#ctor(IDRSNET.CIDRS)">
            <summary>
            Creates a new CResize object.
            </summary>
            <param name="argIDRS">The iDRS</param>
            <returns>The newly created CResize object.</returns>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CResize.Finalize">
            <summary>
            Destructor of CResize.
            </summary>
        </member>
        <member name="M:IDRSNET.CResize.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CResize.GetPointer">
            <summary>
            Internal override  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CResize.SetPointer(System.IntPtr)">
            <summary>
            Internal override  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CResize object</param>
        </member>
        <member name="M:IDRSNET.CResize.Resize(IDRSNET.CImage,IDRSNET.CImage,System.UInt32)">
            <summary>
            Resize resizes the image
            </summary>
            <pre>! IsNull ()</pre>
            <pre>! argImageSource.IsNull ()</pre>
            <pre>uiPercentage > 0</pre>
            <param name="argImageTarget">The target image</param>
            <param name="argImageSource">The source image</param>
            <param name="uiPercentage">The resize percentage.</param>
        </member>
        <member name="M:IDRSNET.CResize.Resize(IDRSNET.CImage,IDRSNET.CImage,System.UInt32,System.UInt32)">
            <summary>
            Resize resizes the image
            </summary>
            <pre>! IsNull ()</pre>
            <pre>! argImageSource.IsNull ()</pre>
            <pre>uiNewWidth != 0</pre>
            <pre>uiNewHeight != 0</pre>
            <pre>uiNewWidth &lt;= IDRS_MAX_IMAGE_WIDTH</pre>
            <pre>uiNewHeight &lt;= IDRS_MAX_IMAGE_HEIGHT</pre>
            <param name="argImageTarget">The target image</param>
            <param name="argImageSource">The source image</param>
            <param name="uiNewWidth">The new width.</param>
            <param name="uiNewHeight">The new height.</param>
        </member>
        <member name="T:IDRSNET.CRotate">
            <summary>
            The CRotate class offers image rotation features.
            \ingroup module_prepro
            The class contains an algorithm for image rotation using all types of images:
            - black and white
            - greyscale
            - color
            \req IDRS::IDRS_MODULE_PREPRO
            </summary>
        </member>
        <member name="M:IDRSNET.CRotate.#ctor(IDRSNET.CIDRS)">
            <summary>
            Creates a new CRotate object.
            </summary>
            <returns>The newly created CRotate object.</returns>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CRotate.Finalize">
            <summary>
            Destructor of CRotate.
            </summary>
        </member>
        <member name="M:IDRSNET.CRotate.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CRotate.GetPointer">
            <summary>
            Internal override  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CRotate.SetPointer(System.IntPtr)">
            <summary>
            Internal override  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CRotate object</param>
        </member>
        <member name="M:IDRSNET.CRotate.Rotate(IDRSNET.CImage,System.Double)">
            <summary>
            Rotates the image clockwise by the supplied angle.
            </summary>
            <remarks>The rotation angle can be any value (integer or floating point) between -360 and 360</remarks>
            <pre>! IsNull ()</pre>
            <pre>! argImage.IsNull ()</pre>
            <pre>-360 &lt; dAngle &lt; 360</pre>
            <param name="argImage">The image to rotate.</param>
            <param name="dAngle">The rotation angle in degrees.</param>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CRotate.Rotate(IDRSNET.CImage,System.Double,IDRSNET.CIDRSColor)">
            <summary>
            Rotates the image clockwise by the supplied angle.
            </summary>
            <remarks>The rotation angle can be any value (integer or floating point) between -360 and 360</remarks>
            <pre>! IsNull ()</pre>
            <pre>! argImage.IsNull ()</pre>
            <pre>-360 &lt; dAngle &lt; 360</pre>
            <param name="argImage">The image to rotate.</param>
            <param name="dAngle">The rotation angle in degrees.</param>
            <param name="clrBackgroundColor">The background color used to fill the corners of the resulting image (if needed)</param>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CRotate.Rotate(IDRSNET.CPage,System.Double)">
            <summary>
            Rotates the page clockwise by the given angle:
            - rotates the page's images
            - rotates the zones of the pages.
            </summary>
            <remarks>The rotation doesn't keep the meaning of the zones.</remarks>
            <remarks>The rotation angle must be a multiple of 90� ( 90�, 180� or 270� ). Other values currently aren't supported yet.</remarks>
            <remarks>All of the page's zones have to be closed.</remarks>
            <pre>! IsNull ()</pre>
            <pre>! argPage.IsNull ()</pre>
            <pre>argPage.GetHeight () &amp;&amp; argPage.GetWidth ()</pre>
            <pre>(dAngle == 0 || dAngle == 90 || dAngle == 180 || dAngle == 270)</pre>
            <param name="argPage">The page to rotate.</param>
            <param name="dAngle">The rotation angle in degrees.</param>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="T:IDRSNET.CRtfOutputParams">
            <summary>
            CRtfOutputParams class manages the parameters to create an Rtf file
            </summary>
        </member>
        <member name="M:IDRSNET.CRtfOutputParams.#ctor(IDRSNET.PageLayout)">
            <summary>
            Create is instantiating a new instance of CRtfOutputParams and associated data object
            </summary>
            <param name="evPageLayout">the page layout type</param>
            <returns>New instance of CRtfOutputParams</returns>
        </member>
        <member name="M:IDRSNET.CRtfOutputParams.Finalize">
            <summary>
            Destructor of CRtfOutputParams.
            </summary>
        </member>
        <member name="M:IDRSNET.CRtfOutputParams.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CRtfOutputParams.GetPointer">
            <summary>
            Internal override  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CRtfOutputParams.SetPointer(System.IntPtr)">
            <summary>
            Internal override  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CRtfOutputParams object</param>
        </member>
        <member name="P:IDRSNET.CRtfOutputParams.PageLayout">
            <summary>
            Gets the page layout type.
            
            </summary>
            
        </member>
        <member name="P:IDRSNET.CRtfOutputParams.MetadataInfo">
            <summary>
            Get/Set the metadata info.
            </summary>
            
        </member>
        <member name="P:IDRSNET.CRtfOutputParams.JpegCompressionOptions">
            <summary>
            Get/Set for the Jpeg Compression Options property.
            </summary>
            
        </member>
        <member name="P:IDRSNET.CRtfOutputParams.PageSizeOptions">
            <summary>
            Get/Set the page size options.
            </summary>
            
        </member>
        <member name="P:IDRSNET.CRtfOutputParams.ImageProcessingOptions">
            <summary>
            Get/Set the image processing options.
            </summary>
            
        </member>
        <member name="T:IDRSNET.CSignatureContent">
            <summary>
            CSignatureContent contains the UI elements for displaying a signature on a PDF document
            The class is a light weight version of CPageContent2, allowing the integrators to define custom zones,
            paragraphs, lines, words and text elements having custom styles and fonts
            </summary>
        </member>
        <member name="M:IDRSNET.CSignatureContent.#ctor">
            <summary>
            Creates a new CSignatureContent object
            </summary>
            <returns>The newly created CPdfOutputParameters object.</returns>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CSignatureContent.Finalize">
            <summary>
            Destructor of CSignatureContent.
            </summary>
        </member>
        <member name="M:IDRSNET.CSignatureContent.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CSignatureContent.GetPointer">
            <summary>
            Internal virtual  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CSignatureContent.SetPointer(System.IntPtr)">
            <summary>
            Internal virtual  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CSignatureContent object</param>
        </member>
        <member name="P:IDRSNET.CSignatureContent.SignatureArea">
            <summary>
            Get/Set the area where the signature will be placed on pdf page.
            The coordinates are expressed in pixels.
            While the coordinates are expected to be in the page bounding box, there is no strict enforcement on this rule.
            In case the coordinates are partially in the page area, only that part of the signature will appear on the pdf document.
            </summary>
            
        </member>
        <member name="P:IDRSNET.CSignatureContent.Zones">
            <summary>
            Get/Set the zones in the signature.
            </summary>
            <remarks>The zone coordinates need to be included in the signature bounding box.</remarks>
        </member>
        <member name="T:IDRSNET.CStdLineReader">
            <summary>
            The CStdLineReader class provides a standard implementation for a line reader class that reads the lines in a memory buffer.
            \ingroup module_core
            The class is providing a quick and convenient way of accessing a memory buffer that stores the pixels of image or some other data.
            <see cref="T:IDRSNET.ILineReader"/> 
            </summary>
        </member>
        <member name="M:IDRSNET.CStdLineReader.#ctor(System.IntPtr,System.UInt32,System.UInt32)">
            <summary>
            Constructs a CStdLineReader object.
            Initializes members with the provided values
            </summary>
            <param name="pvPixels">- buffer containing the image pixels</param>
            <param name="ui32LineCount">- number of lines of pixels available in the pixels buffer (image height)</param>
            <param name="ui32ByteWidth">- number of bytes for representing the width in bytes of each line</param>
        </member>
        <member name="M:IDRSNET.CStdLineReader.Finalize">
            <summary>
            Destructor of CStdLineReader.
            </summary>
        </member>
        <member name="M:IDRSNET.CStdLineReader.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CStdLineReader.GetPointer">
            <summary>
            Internal GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CStdLineReader.SetPointer(System.IntPtr)">
            <summary>
            Internal SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CStdLineReader object</param>
        </member>
        <member name="M:IDRSNET.CStdLineReader.GetLine(System.IntPtr,System.UInt32,System.UInt32)">
            <summary>
            Retrieve a line of pixels from the memory buffer.
            </summary>
            <pre>m_pbPixels != NULL</pre>
            <pre>m_ui32ByteWidth != 0</pre>
            <pre>ui32Line &lt; m_ui32LineCount</pre>
            <pre>pvLine != NULL</pre>
            <param name="pvLine">The buffer where to write the line data.</param>
            <param name="ui32Line">The 0 based index of the line to retrieve.</param>
            <param name="ui32Bytes">The number of bytes to retrieve.</param>
            <remarks>If the number of bytes to be retrieved is greater than the line width in bytes, the number of bytes surpassing the line byte width will be set to 0</remarks>
        </member>
        <member name="T:IDRSNET.CStopwatch">
            <summary>
            The CStopwatch class is a helper class for measuring time spans.
            \ingroup module_core
            The class has a granularity of 1 millisecond.
            </summary>
        </member>
        <member name="M:IDRSNET.CStopwatch.#ctor">
            <summary>
            Create creates a stopwatch object.
            </summary>
            <exception>CIDRSException if an error occur.</exception>
        </member>
        <member name="M:IDRSNET.CStopwatch.Finalize">
            <summary>
            Destructor of CStopwatch.
            </summary>
        </member>
        <member name="M:IDRSNET.CStopwatch.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CStopwatch.GetPointer">
            <summary>
            Internal virtual  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CStopwatch.SetPointer(System.IntPtr)">
            <summary>
            Internal virtual  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CStopwatch object</param>
        </member>
        <member name="M:IDRSNET.CStopwatch.Start(System.Boolean)">
            <summary>
            Start starts the stop watch.
            </summary>
            <pre>! IsNull ()</pre>
            <param name="bReset">Indicates whether or note the elapsed time must be reset.</param>
        </member>
        <member name="M:IDRSNET.CStopwatch.Stop">
            <summary>
            Stop stops the stop watch.
            </summary>
            <pre>! IsNull ()</pre>
        </member>
        <member name="M:IDRSNET.CStopwatch.GetElapsedTime(System.UInt32@,System.UInt32@,System.UInt32@,System.UInt32@)">
            <summary>
            GetElapsedTime retrieves the elapsed time.
            </summary>
            <pre>! IsNull ()</pre>
            <param name="ruiHour">To return the elapsed hours.</param>
            <param name="ruiMinute">To return the elapsed minutes.</param>
            <param name="ruiSecond">To return the elapsed second.</param>
            <param name="ruiMilliseconds">To return the elapsed milliseconds.</param>
        </member>
        <member name="M:IDRSNET.CStopwatch.IsStarted">
            <summary>
            IsStrarted returns the flag indicating that counter has started
            </summary>
            <pre>! IsNull ()</pre>
            <returns>IDRS_TRUE if the stopwatch is started</returns>
        </member>
        <member name="P:IDRSNET.CStopwatch.ElapsedTime">
            <summary>
            GetElapsedTime retrieves the elapsed time in milliseconds
            
            </summary>
            
            <pre> ! IsNull () </pre>
        </member>
        <member name="T:IDRSNET.TextDetectionResults">
            <summary>
            this structure gathers the results of the detections performed on a page.
            </summary>
        </member>
        <member name="M:IDRSNET.TextDetectionResults.#ctor(IDRSNET.CTextdetectionresults)">
            <summary>
            Structure constructor that converts class CTextdetectionresults to
            structure TextDetectionResults by copying each fields
            </summary>
            <param name="_class">Class to be converted</param>
        </member>
        <member name="F:IDRSNET.TextDetectionResults.xstLanguageCandidates">
            <summary>
            Structures containing the results of language detection.
            If language detection was not requested, the array returned will contain IDRS_LNG_NONE
            with confidence 0.
            </summary>
        </member>
        <member name="F:IDRSNET.TextDetectionResults.uiPageOrientationAngle">
            <summary>
            The angle resulting of page orientation detection.
            If page orientation detection was not requested, the angle returned will be 0.
            </summary>
        </member>
        <member name="T:IDRSNET.CTextdetectionresults">
            <summary>
            this structure gathers the results of the detections performed on a page.
            </summary>
        </member>
        <member name="M:IDRSNET.CTextdetectionresults.#ctor">
            <summary>
            Default constructor of CTextdetectionresults.
            </summary>
        </member>
        <member name="M:IDRSNET.CTextdetectionresults.Finalize">
            <summary>
            Destructor of CTextdetectionresults.
            </summary>
        </member>
        <member name="M:IDRSNET.CTextdetectionresults.#ctor(IDRSNET.TextDetectionResults)">
            <summary>
            Class constructor that converts structure TextDetectionResults to
            class CTextdetectionresults by copying each fields
            </summary>
            <param name="_struct">set fields based on the values of the structure</param>
        </member>
        <member name="M:IDRSNET.CTextdetectionresults.Update(IDRSNET.TextDetectionResults)">
            <summary>
            Update the fields of the the class based on the input structure
            </summary>
            <param name="_struct">update fields based on the values of the structure</param>
        </member>
        <member name="M:IDRSNET.CTextdetectionresults.ToStruct">
            <summary>
            Converts the class fields to a structure
            </summary>
            <returns>TextDetectionResults</returns>
        </member>
        <member name="P:IDRSNET.CTextdetectionresults.LanguageCandidates">
            <summary>
            Structures containing the results of language detection.
            If language detection was not requested, the array returned will contain IDRS_LNG_NONE
            with confidence 0.
            </summary>
        </member>
        <member name="P:IDRSNET.CTextdetectionresults.PageOrientationAngle">
            <summary>
            The angle resulting of page orientation detection.
            If page orientation detection was not requested, the angle returned will be 0.
            </summary>
        </member>
        <member name="T:IDRSNET.CTextOutputParams">
            <summary>
            CTextOutputParams class manages the parameters to create a text file
            </summary>
        </member>
        <member name="M:IDRSNET.CTextOutputParams.#ctor(IDRSNET.CharacterEncoding)">
            <summary>
            Create is instantiating a new instance of CTextOutputParams and associated data object
            </summary>
            <param name="evCharacterEncoding">character encoding value.</param>
            <returns>New instance of CTextOutputParams</returns>
        </member>
        <member name="M:IDRSNET.CTextOutputParams.Finalize">
            <summary>
            Destructor of CTextOutputParams.
            </summary>
        </member>
        <member name="M:IDRSNET.CTextOutputParams.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CTextOutputParams.GetPointer">
            <summary>
            Internal override  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CTextOutputParams.SetPointer(System.IntPtr)">
            <summary>
            Internal override  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CTextOutputParams object</param>
        </member>
        <member name="P:IDRSNET.CTextOutputParams.CharacterEncoding">
            <summary>
            getter for the character encoding.
            
            </summary>
            
        </member>
        <member name="T:IDRSNET.CTextProperties">
            <summary>
            Class CTextProperties contains the ocr text properties in iDRS SDK
            \ingroup module_core
            </summary>
        </member>
        <member name="T:IDRSNET.CTextProperties.TEXT_TYPE">
            <summary>
            The TEXT_TYPE data type defines the type text type.
            \enum TEXT_TYPE
            </summary>
        </member>
        <member name="F:IDRSNET.CTextProperties.TEXT_TYPE.TEXT_TYPE_NORMAL">
            <summary>
            Normal text 
            </summary>
        </member>
        <member name="F:IDRSNET.CTextProperties.TEXT_TYPE.TEXT_TYPE_DOTMATRIX">
            <summary>
            Dot matrix text 
            </summary>
        </member>
        <member name="F:IDRSNET.CTextProperties.TEXT_TYPE.TEXT_TYPE_OCRA1">
            <summary>
            OCR A, requires banking fonts module. 
            </summary>
        </member>
        <member name="F:IDRSNET.CTextProperties.TEXT_TYPE.TEXT_TYPE_OCRB1">
            <summary>
            OCR B, requires banking fonts module. 
            </summary>
        </member>
        <member name="F:IDRSNET.CTextProperties.TEXT_TYPE.TEXT_TYPE_E13B">
            <summary>
            E13B, requires banking fonts module. 
            </summary>
        </member>
        <member name="F:IDRSNET.CTextProperties.TEXT_TYPE.TEXT_TYPE_CMC7">
            <summary>
            CMC7, requires banking fonts module. 
            </summary>
        </member>
        <member name="F:IDRSNET.CTextProperties.TEXT_TYPE.TEXT_TYPE_HANDPRINT_BOX">
            <summary>
            Spaced handprinting. 
            </summary>
        </member>
        <member name="F:IDRSNET.CTextProperties.TEXT_TYPE.TEXT_TYPE_HANDPRINT_FREE">
            <summary>
            Handprint text that may be near one another or even touching (Contiguous handprinting) 
            </summary>
        </member>
        <member name="T:IDRSNET.CTextProperties.TEXT_SPACING">
            <summary>
            The TEXT_SPACING data types defines the text spacing.
            \enum TEXT_SPACING
            </summary>
        </member>
        <member name="F:IDRSNET.CTextProperties.TEXT_SPACING.TEXT_SPACING_FIX">
            <summary>
            Fixed text spacing. 
            </summary>
        </member>
        <member name="F:IDRSNET.CTextProperties.TEXT_SPACING.TEXT_SPACING_PRO">
            <summary>
            Proportional text spacing. 
            </summary>
        </member>
        <member name="F:IDRSNET.CTextProperties.TEXT_SPACING.TEXT_SPACING_UNKNOWN">
            <summary>
            Unknown text spacing. 
            </summary>
        </member>
        <member name="T:IDRSNET.CTextProperties.TEXT_DIRECTION">
            <summary>
            The IDRS_TEXT_DIRECTION data type defines the text direction.
            \enum TEXT_DIRECTION
            </summary>
        </member>
        <member name="F:IDRSNET.CTextProperties.TEXT_DIRECTION.TEXT_DIRECTION_UNK">
            <summary>
            Unknown text direction. 
            </summary>
        </member>
        <member name="F:IDRSNET.CTextProperties.TEXT_DIRECTION.TEXT_DIRECTION_LEFT_TO_RIGHT">
            <summary>
            The text runs from left to right. 
            </summary>
        </member>
        <member name="F:IDRSNET.CTextProperties.TEXT_DIRECTION.TEXT_DIRECTION_TOP_TO_BOTTOM">
            <summary>
            Text goes top to bottom. 
            </summary>
        </member>
        <member name="F:IDRSNET.CTextProperties.TEXT_DIRECTION.TEXT_DIRECTION_RIGHT_TO_LEFT">
            <summary>
            Text goes right to left. 
            </summary>
        </member>
        <member name="T:IDRSNET.CTextProperties.HORIZONTAL_ALIGNMENT">
            <summary>
            HORIZONTAL_ALIGNMENT defines all possible horizontal alignments in iDRS
            \enum HORIZONTAL_ALIGNMENT
            </summary>
        </member>
        <member name="F:IDRSNET.CTextProperties.HORIZONTAL_ALIGNMENT.HORIZONTAL_ALIGNMENT_LEFT">
            <summary>
            Left.
            </summary>
        </member>
        <member name="F:IDRSNET.CTextProperties.HORIZONTAL_ALIGNMENT.HORIZONTAL_ALIGNMENT_RIGHT">
            <summary>
            Right.
            </summary>
        </member>
        <member name="F:IDRSNET.CTextProperties.HORIZONTAL_ALIGNMENT.HORIZONTAL_ALIGNMENT_JUSTIFY">
            <summary>
            Justify.
            </summary>
        </member>
        <member name="F:IDRSNET.CTextProperties.HORIZONTAL_ALIGNMENT.HORIZONTAL_ALIGNMENT_CENTER">
            <summary>
            Center.
            </summary>
        </member>
        <member name="T:IDRSNET.CTextProperties.VERTICAL_ALIGNMENT">
            <summary>
            VERTICAL_ALIGNMENT defines all possible vertical alignments in iDRS
            \enum VERTICAL_ALIGNMENT
            </summary>
        </member>
        <member name="F:IDRSNET.CTextProperties.VERTICAL_ALIGNMENT.VERTICAL_ALIGNMENT_TOP">
            <summary>
            Top.
            </summary>
        </member>
        <member name="F:IDRSNET.CTextProperties.VERTICAL_ALIGNMENT.VERTICAL_ALIGNMENT_MIDDLE">
            <summary>
            Middle.
            </summary>
        </member>
        <member name="F:IDRSNET.CTextProperties.VERTICAL_ALIGNMENT.VERTICAL_ALIGNMENT_BOTTOM">
            <summary>
            Bottom.
            </summary>
        </member>
        <member name="F:IDRSNET.CTextProperties.VERTICAL_ALIGNMENT.VERTICAL_ALIGNMENT_BASELINE">
            <summary>
            Baseline.
            </summary>
        </member>
        <member name="T:IDRSNET.CTextProperties.TABULATION_LEADER_TYPE">
            <summary>
            iDRS tabulation leader.
            \enum TABULATION_LEADER_TYPE
            </summary>
        </member>
        <member name="F:IDRSNET.CTextProperties.TABULATION_LEADER_TYPE.TABULATION_LEADER_NONE">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:IDRSNET.CTextProperties.TABULATION_LEADER_TYPE.TABULATION_LEADER_DOTTED">
            <summary>
            Dots.
            </summary>
        </member>
        <member name="F:IDRSNET.CTextProperties.TABULATION_LEADER_TYPE.TABULATION_LEADER_HYPHEN">
            <summary>
            Hyphen.
            </summary>
        </member>
        <member name="F:IDRSNET.CTextProperties.TABULATION_LEADER_TYPE.TABULATION_LEADER_UNDERSCORE">
            <summary>
            Underscore.
            </summary>
        </member>
        <member name="T:IDRSNET.CTextProperties.LIST_TYPE">
            <summary>
            iDRS list types.
            \enum LIST_TYPE
            </summary>
        </member>
        <member name="F:IDRSNET.CTextProperties.LIST_TYPE.LIST_TYPE_UL">
            <summary>
            ! Unordered list.
            </summary>
        </member>
        <member name="F:IDRSNET.CTextProperties.LIST_TYPE.LIST_TYPE_OL">
            <summary>
            ! Ordered list.
            </summary>
        </member>
        <member name="T:IDRSNET.CTextProperties.LIST_STYLE">
            <summary>
            iDRS list styles.
            \enum LIST_STYLE
            </summary>
        </member>
        <member name="F:IDRSNET.CTextProperties.LIST_STYLE.LIST_STYLE_NONE">
            <summary>
            ! None.
            </summary>
        </member>
        <member name="F:IDRSNET.CTextProperties.LIST_STYLE.LIST_STYLE_DISC">
            <summary>
            ! Disc.
            </summary>
        </member>
        <member name="F:IDRSNET.CTextProperties.LIST_STYLE.LIST_STYLE_CIRCLE">
            <summary>
            ! Circle.
            </summary>
        </member>
        <member name="F:IDRSNET.CTextProperties.LIST_STYLE.LIST_STYLE_SQUARE">
            <summary>
            ! Square.
            </summary>
        </member>
        <member name="F:IDRSNET.CTextProperties.LIST_STYLE.LIST_STYLE_DECIMAL">
            <summary>
            ! Decimal.
            </summary>
        </member>
        <member name="F:IDRSNET.CTextProperties.LIST_STYLE.LIST_STYLE_LEADING_ZERO">
            <summary>
            ! Decimal with leading zero.
            </summary>
        </member>
        <member name="F:IDRSNET.CTextProperties.LIST_STYLE.LIST_STYLE_LOWER_ROMAN">
            <summary>
            ! Lower roman.
            </summary>
        </member>
        <member name="F:IDRSNET.CTextProperties.LIST_STYLE.LIST_STYLE_UPPER_ROMAN">
            <summary>
            ! Upper roman.
            </summary>
        </member>
        <member name="F:IDRSNET.CTextProperties.LIST_STYLE.LIST_STYLE_LOWER_ALPHA">
            <summary>
            ! Lower alphanumeric.
            </summary>
        </member>
        <member name="F:IDRSNET.CTextProperties.LIST_STYLE.LIST_STYLE_UPPER_ALPHA">
            <summary>
            ! Upper alphanumeric.
            </summary>
        </member>
        <member name="F:IDRSNET.CTextProperties.LIST_STYLE.LIST_STYLE_LOWER_GREEK">
            <summary>
            ! Lower greek.
            </summary>
        </member>
        <member name="F:IDRSNET.CTextProperties.LIST_STYLE.LIST_STYLE_LOWER_LATIN">
            <summary>
            ! Lower latin.
            </summary>
        </member>
        <member name="F:IDRSNET.CTextProperties.LIST_STYLE.LIST_STYLE_UPPER_LATIN">
            <summary>
            ! Upper latin.
            </summary>
        </member>
        <member name="T:IDRSNET.CTextProperties.FONT_FAMILY_TYPE">
            <summary>
            FONT_FAMILY_TYPE contains the types of font families available in iDRS SDK
            </summary>
        </member>
        <member name="F:IDRSNET.CTextProperties.FONT_FAMILY_TYPE.FONT_FAMILY_TYPE_UNKNOWN">
            <summary>
            ! Unknown.
            </summary>
        </member>
        <member name="F:IDRSNET.CTextProperties.FONT_FAMILY_TYPE.FONT_FAMILY_TYPE_SANSERIF">
            <summary>
            ! Sanserif.
            </summary>
        </member>
        <member name="F:IDRSNET.CTextProperties.FONT_FAMILY_TYPE.FONT_FAMILY_TYPE_SERIF">
            <summary>
            ! Serif.
            </summary>
        </member>
        <member name="F:IDRSNET.CTextProperties.FONT_FAMILY_TYPE.FONT_FAMILY_TYPE_MONOTYPE">
            <summary>
            ! Monotype.
            </summary>
        </member>
        <member name="T:IDRSNET.CTextProperties.HYPERLINK_TYPE">
            <summary>
            HYPERLINK_TYPE contains the hyperlink states for elements in iDRS SDK
            </summary>
        </member>
        <member name="F:IDRSNET.CTextProperties.HYPERLINK_TYPE.HYPERLINK_TYPE_NONE">
            <summary>
            No hyperlink.
            </summary>
        </member>
        <member name="F:IDRSNET.CTextProperties.HYPERLINK_TYPE.HYPERLINK_TYPE_EMAIL">
            <summary>
            The following words are in an hyperlink for an e-mail
            </summary>
        </member>
        <member name="F:IDRSNET.CTextProperties.HYPERLINK_TYPE.HYPERLINK_TYPE_URL">
            <summary>
            The following words are in an hyperlink for an URL
            </summary>
        </member>
        <member name="T:IDRSNET.CTextProperties.PARAGRAPH_TYPE">
            <summary>
            ! iDRS paragraph types
            </summary>
        </member>
        <member name="F:IDRSNET.CTextProperties.PARAGRAPH_TYPE.PARAGRAPH_TYPE_NORMAL">
            <summary>
            ! Normal.
            </summary>
        </member>
        <member name="F:IDRSNET.CTextProperties.PARAGRAPH_TYPE.PARAGRAPH_TYPE_TITLE">
            <summary>
            ! Title.
            </summary>
        </member>
        <member name="F:IDRSNET.CTextProperties.PARAGRAPH_TYPE.PARAGRAPH_TYPE_LIST">
            <summary>
            ! List.
            </summary>
        </member>
        <member name="T:IDRSNET.CTextProperties.IDRS_FONT_SET">
            <summary>
            Contains all sets of fonts that iDRS is able to recognize
            </summary>
        </member>
        <member name="F:IDRSNET.CTextProperties.IDRS_FONT_SET.IDRS_FONT_SET_DEFAULT">
            <summary>
            The the most basic set of fonts that iDRS is able to recognize.
            It is set as the default value, so we can have similar fonts as in older versions of iDRS.
            The fonts included in this font set are:
            - Arial
            - Times New Roman
            - Courier New
            - Tahoma
            - Batang (windows, linux)
            - MS-PMincho (windows, linux)
            - SimSun (windows, linux)
            - PMingLiU (windows, linux)
            - AppleMyungjo (osx)
            - HiraMinPro-W3 (osx)
            - Kai (osx)
            - BiauKai (osx)
            </summary>
        </member>
        <member name="F:IDRSNET.CTextProperties.IDRS_FONT_SET.IDRS_FONT_SET_EXTENDED">
            <summary>
            Represents an extended set of fonts used for OCR.
            In includes the following fonts:
            - Arial
            - Times New Roman
            - Courier New
            - Tahoma
            - Verdana
            - Georgia
            - Trebuchet MS
            - Batang (windows, linux)
            - MS-PMincho (windows, linux)
            - SimSun (windows, linux)
            - PMingLiU (windows, linux)
            - AppleMyungjo (osx)
            - HiraMinPro-W3 (osx)
            - Kai (osx)
            - BiauKai (osx)
            </summary>
        </member>
        <member name="F:IDRSNET.CTextProperties.IDRS_FONT_SET.IDRS_FONT_SET_MS_OFFICE">
            <summary>
            Contains a set of fonts usually included in Microsoft Office.
            This font set includes the following fonts:
            - Arial
            - Times New Roman
            - Courier New
            - Tahoma
            - Calibri
            - Cambria
            - Candara
            - Consolas
            - Constantia
            - Corbel
            - Bookman Old Style
            - Gill Sans MT
            - Trebuchet MS
            - Franklin Gothic
            - Tw Cen MT
            - Century Schoolbook
            - Century Gothic
            - Garamond
            - Batang (windows, linux)
            - MS-PMincho (windows, linux)
            - SimSun (windows, linux)
            - PMingLiU (windows, linux)
            - AppleMyungjo (osx)
            - HiraMinPro-W3 (osx)
            - Kai (osx)
            - BiauKai (osx)
            </summary>
        </member>
        <member name="F:IDRSNET.CTextProperties.IDRS_FONT_SET.IDRS_FONT_SET_CUSTOM">
            <summary>
            Represents a value that is expected to be used by integrators when defining custom fonts for the results in iDRS SDK
            </summary>
        </member>
        <member name="T:IDRSNET.CUnicodeString">
            <summary>
            The CUnicodeString class represents a UTF-16 unicode string.
            \ingroup module_core
            The string representation for this class is UTF-16
            </summary>
        </member>
        <member name="M:IDRSNET.CUnicodeString.#ctor(System.UInt32)">
            <summary>
            Create creates an empty Unicode string.
            </summary>
        </member>
        <member name="M:IDRSNET.CUnicodeString.#ctor(System.String)">
            <summary>
            Creates a Unicode string with the given value.
            </summary>
            <param name="wstr">The string to copy.</param>
        </member>
        <member name="M:IDRSNET.CUnicodeString.Finalize">
            <summary>
            Destructor of CUnicodeString.
            </summary>
        </member>
        <member name="M:IDRSNET.CUnicodeString.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CUnicodeString.GetPointer">
            <summary>
            Internal virtual  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CUnicodeString.SetPointer(System.IntPtr)">
            <summary>
            Internal virtual  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CUnicodeString object</param>
        </member>
        <member name="M:IDRSNET.CUnicodeString.Empty">
            <summary>
            Empty empties the Unicode string.
            </summary>
        </member>
        <member name="M:IDRSNET.CUnicodeString.Clone">
            <summary>
            Clone creates a copy of the current object
            </summary>
            <pre>! IsNull ()</pre>
            <remarks>It performs a deep copy of the information stored in current object</remarks>
        </member>
        <member name="M:IDRSNET.CUnicodeString.Append(System.String,System.UInt32)">
            <summary>
            Append appends the given characters to the string.
            </summary>
            <pre>! IsNull ()</pre>
            <pre>wstr != NULL</pre>
            <param name="wstr">A buffer containing the characters to append.</param>
            <param name="uiNbCharacters">The number of characters to append.</param>
            <remarks>If uiNbCharacters == 0, wstr is expected to be a null terminated string. All of its characters will be appended.</remarks>
        </member>
        <member name="M:IDRSNET.CUnicodeString.Append3(System.String,System.UInt32)">
            <summary>
            Append appends the given characters to the string.
            </summary>
            <pre>! IsNull ()</pre>
            <pre>strAnsi != NULL</pre>
            <param name="strAnsi">A buffer containing the characters to append.</param>
            <param name="uiNbCharacters">The number of characters to append.</param>
            <remarks>If uiNbCharacters == 0, wstr is expected to be a null terminated string. All of its characters will be appended.</remarks>
        </member>
        <member name="M:IDRSNET.CUnicodeString.Remove(System.String,System.UInt32)">
            <summary>
            Remove removes the given characters from the string.
            </summary>
            <pre>! IsNull ()</pre>
            <pre>strAnsi != NULL</pre>
            <param name="strAnsi">A buffer containing the characters to remove.</param>
            <param name="uiNbCharacters">The number of characters to remove.</param>
            <remarks>If uiNbCharacters == 0, strAnsi is expected to be a null terminated string. All of its characters will be removed.</remarks>
        </member>
        <member name="M:IDRSNET.CUnicodeString.Remove3(System.String,System.UInt32)">
            <summary>
            Remove removes the given characters from the string.
            </summary>
            <pre>! IsNull ()</pre>
            <pre>wstr != NULL</pre>
            <param name="wstr">A buffer containing the characters to remove.</param>
            <param name="uiNbCharacters">The number of characters to remove.</param>
            <remarks>If uiNbCharacters == 0, wstr is expected to be a null terminated string. All of its characters will be removed.</remarks>
        </member>
        <member name="M:IDRSNET.CUnicodeString.Find(System.Char,System.UInt32@)">
            <summary>
            Find finds a given character into the string.
            </summary>
            <pre>! IsNull ()</pre>
            <pre>cCharToFind != 0</pre>
            <param name="cCharToFind">the charchter to find</param>
            <param name="ruiIndex">the index of the first occurence if the charchter is found otherwise IDRS_MAX_PATH</param>
            \ return true if found otherwise false
        </member>
        <member name="M:IDRSNET.CUnicodeString.Find2(System.Char,System.UInt32@)">
            <summary>
            Find finds a given character into the string.
            </summary>
            <pre>! IsNull ()</pre>
            <pre>wCharToFind != 0</pre>
            <param name="wCharToFind">the charchter to find</param>
            <param name="ruiIndex">the index of the first occurence if the charchter is found otherwise IDRS_MAX_PATH</param>
            \ return true if found otherwise false
        </member>
        <member name="P:IDRSNET.CUnicodeString.Buffer">
            <summary>
            REturns the unicode string buffer
            
            </summary>
            
            <pre> ! IsNull () </pre>
        </member>
        <member name="P:IDRSNET.CUnicodeString.Length">
            <summary>
            GetLength () returns the length of the string.
            
            </summary>
            
            <pre> ! IsNull () </pre>
        </member>
        <member name="T:IDRSNET.CXlsxOutputParams">
            <summary>
            CXlsxOutputParams class manages the parameters to create an xlsx file
            </summary>
        </member>
        <member name="M:IDRSNET.CXlsxOutputParams.#ctor(IDRSNET.SpreadsheetLayout)">
            <summary>
            Create is instantiating a new instance of CXlsxOutputParams and associated data object
            </summary>
            <param name="evSpreadsheetLayout">spreadsheet layout type</param>
            <returns>New instance of CXlsxOutputParams</returns>
        </member>
        <member name="M:IDRSNET.CXlsxOutputParams.Finalize">
            <summary>
            Destructor of CXlsxOutputParams.
            </summary>
        </member>
        <member name="M:IDRSNET.CXlsxOutputParams.Dispose">
            <summary>
            Public dispose method needed by IDisposable.
            </summary>
        </member>
        <member name="M:IDRSNET.CXlsxOutputParams.GetPointer">
            <summary>
            Internal override  GetPointer method.
            </summary>
            <returns>IntPtr object instance of the class</returns>
        </member>
        <member name="M:IDRSNET.CXlsxOutputParams.SetPointer(System.IntPtr)">
            <summary>
            Internal override  SetPointer method.
            </summary>
            <param name="ptr">Pointer to an instance of another CXlsxOutputParams object</param>
        </member>
        <member name="P:IDRSNET.CXlsxOutputParams.MetadataInfo">
            <summary>
            Get/Set the metadata info.
            </summary>
            
        </member>
        <member name="P:IDRSNET.CXlsxOutputParams.JpegCompressionOptions">
            <summary>
            setter for the Jpeg Compression Options property.       /// getter for the Jpeg Compression Options.
            </summary>
            
        </member>
        <member name="P:IDRSNET.CXlsxOutputParams.SpreadsheetLayout">
            <summary>
            getter for the spreadsheet layout.
            
            </summary>
            
        </member>
        <member name="T:IDRSNET.IAdvancedBinarizeCallback">
            <summary>
            The CAdvancedBinarizeCallback class is the base class to provide a callback class to the CAdvancedBinarize class' methods.
            Inheriting this class allows the integrator to define a custom algorithm for image binarization.
            \ingroup module_prepro_adv
            \req IDRS::IDRS_MODULE_PREPRO with extension IDRS::IDRS_PREPRO_EXTENSION_ADVANCED_PREPRO
            <see cref="F:IDRSNET.IDRS_MODULE.IDRS_MODULE_PREPRO"/> for information about the preprocessing library
            <see cref="F:IDRSNET.IDRS_EXTENSION.IDRS_PREPRO_EXTENSION_ADVANCED_PREPRO"/> for information about advanced preprocessing extension
            <see cref="T:IDRSNET.CAdvancedBinarize"/> for the binarization algorithms.
            </summary>
        </member>
        <member name="M:IDRSNET.IAdvancedBinarizeCallback.RemovePixel(System.Byte,System.Byte,System.Byte)">
            <summary>
            Dropout callback method called at the end of the binarization for each black pixel.
            The black pixel is transformed to white if the function returns IDRS_TRUE.
            </summary>
            <param name="ucRed">The red component of the pixel's color.</param>
            <param name="ucGreen">The green component of the pixel's color.</param>
            <param name="ucBlue">The blue component of the pixel's color.</param>
            <returns>IDRS_TRUE If the black pixel must be transformed to white.</returns>
            <returns>IDRS_FALSE otherwise.</returns>
        </member>
        <member name="T:IDRSNET.IAdvancedDespeckleCallback">
            <summary>
            The CAdvancedDespeckleCallback class is the base class to provide a callback class to the CAdvancedDespeckle class'methods.
            \ingroup module_prepro_adv
            Inheriting this class allows the integrator to define a custom algorithm for speckle removing.
            \req IDRS::IDRS_MODULE_PREPRO with extension IDRS::IDRS_PREPRO_EXTENSION_ADVANCED_PREPRO
            <see cref="F:IDRSNET.IDRS_MODULE.IDRS_MODULE_PREPRO"/> for information about the preprocessing library
            <see cref="F:IDRSNET.IDRS_EXTENSION.IDRS_PREPRO_EXTENSION_ADVANCED_PREPRO"/> for information about advanced preprocessing extension
            <see cref="T:IDRSNET.CAdvancedDespeckle"/> for the despeckle algorithm.
            </summary>
        </member>
        <member name="M:IDRSNET.IAdvancedDespeckleCallback.RemoveBlobTest(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            RemoveBlobTest is a callback method called by CAdvancedDespeckle before removing a group of connected pixels.
            </summary>
            <param name="uiBlobHeight">The height of the group of connected pixels.</param>
            <param name="uiBlobWidth">The width of the group of connected pixels.</param>
            <param name="uiBlobPixelsCount">The number of black pixels in the group.</param>
            <returns>IDRS_TRUE If the group of connected pixels must be removed.</returns>
            <returns>IDRS_FALSE otherwise.</returns>
        </member>
        <member name="T:IDRSNET.IDRS_BARCODE_COLOR_MODE">
            <summary>
            ! Barcode color modes defines the color mode for the input image provided to the barcode engine
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_BARCODE_COLOR_MODE.IDRS_BARCODE_COLOR_MODE_BLACK_AND_WHITE">
            <summary>
            ! Input image should be black &amp; white
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_BARCODE_COLOR_MODE.IDRS_BARCODE_COLOR_MODE_GREYSCALE">
            <summary>
            ! Input image should be greyscale
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_BARCODE_COLOR_MODE.IDRS_BARCODE_COLOR_MODE_COLOR">
            <summary>
            ! Input image should be color
            </summary>
        </member>
        <member name="T:IDRSNET.IDRS_BARCODE_RECOGNITION_MODE">
            <summary>
            ! recognition mode specifies how the engine will behave when performing recognition
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_BARCODE_RECOGNITION_MODE.IDRS_BARCODE_RECOGNITION_MODE_STOP_ON_FIRST_RESULT">
            <summary>
            ! stop on first result
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_BARCODE_RECOGNITION_MODE.IDRS_BARCODE_RECOGNITION_MODE_READ_ALL_BARCODES">
            <summary>
            ! read all barcodes in the supplied image
            </summary>
        </member>
        <member name="T:IDRSNET.IDRS_BARCODE_CAPABILITY">
            <summary>
            ! list with all possible capabilities for a barcode engine
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_BARCODE_CAPABILITY.IDRS_BARCODE_CAPABILITY_IMAGE_BLACK_AND_WHITE">
            <summary>
            ! the engine supports black&amp;white images
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_BARCODE_CAPABILITY.IDRS_BARCODE_CAPABILITY_IMAGE_GREYSCALE">
            <summary>
            ! the engine supports greyscale images
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_BARCODE_CAPABILITY.IDRS_BARCODE_CAPABILITY_IMAGE_COLOR">
            <summary>
            ! the engine supports color images
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_BARCODE_CAPABILITY.IDRS_BARCODE_CAPABILITY_DETECT_SLANTED_BARCODES">
            <summary>
            ! the engine is able to detect skewed barcodes
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_BARCODE_CAPABILITY.IDRS_BARCODE_CAPABILITY_CODE128_CONTROL_CODE">
            <summary>
            ! the engine is able to get control codes for code128 barcode
            </summary>
        </member>
        <member name="T:IDRSNET.IDRS_BARCODE_SESSION_PARAMETER">
            <summary>
            Enumerable containing all barcode session parameters
            These parameters are used to control the behavior of the barcode engines
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_BARCODE_SESSION_PARAMETER.IDRS_BARCODE_SESSION_PARAMETER_GLOBAL_PROCESSING">
            <summary>
            Enables barcode global processing.
            Possible values are:
            - IDRS_TRUE: enables the setting
            - IDRS_FALSE: disables the setting
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_BARCODE_SESSION_PARAMETER.IDRS_BARCODE_SESSION_PARAMETER_WORK_DEPTH">
            <summary>
            Sets the barcode engine work depth.
            A lower value means that the engine should return the result(s) fast, while a higher value allows the engine to spend more time searching for barcodes.
            Expected range of values: [0 - 100]
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_BARCODE_SESSION_PARAMETER.IDRS_BARCODE_SESSION_PARAMETER_MIN_HEIGHT">
            <summary>
            Sets the minimum height for a barcode to be taken into consideration. Values are in pixels
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_BARCODE_SESSION_PARAMETER.IDRS_BARCODE_SESSION_PARAMETER_MAX_HEIGHT">
            <summary>
            Sets the maximum height for a barcode to be taken into consideration. Values are in pixels
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_BARCODE_SESSION_PARAMETER.IDRS_BARCODE_SESSION_PARAMETER_MIN_LENGTH">
            <summary>
            Sets the minimum solution length (character count) for a barcode to be taken into consideration.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_BARCODE_SESSION_PARAMETER.IDRS_BARCODE_SESSION_PARAMETER_MAX_LENGTH">
            <summary>
            Sets the maximum solution length (character count) for a barcode to be taken into consideration.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_BARCODE_SESSION_PARAMETER.IDRS_BARCODE_SESSION_PARAMETER_DETECT_SLANTED_BARCODES">
            <summary>
            Enables detection of slanted barcodes
            Possible values are:
            - IDRS_TRUE: enables the setting
            - IDRS_FALSE: disables the setting
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_BARCODE_SESSION_PARAMETER.IDRS_BARCODE_SESSION_PARAMETER_RECOGNITION_DIRECTION">
            <summary>
            Sets the barcode direction that could be used for detection.
            The available directions are found in <see cref="T:IDRSNET.IDRS_BARCODE_DIRECTION"/> 
            - IDRS_BARCODE_LEFT_RIGHT      (0x01)
            - IDRS_BARCODE_RIGHT_LEFT      (0x02)
            - IDRS_BARCODE_TOP_BOTTOM      (0x04)
            - IDRS_BARCODE_BOTTOM_TOP      (0x08)
            - IDRS_BARCODE_DIRECTION_ANY   (0x0F)
            The value provided with this parameter is a bitmask combination of the available directions.
            When provided with a value that is different than IDRS_BARCODE_DIRECTION_ANY, the barcode engine is expected to disregard the barcode solutions
            for which the reading is different than the one requested
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_BARCODE_SESSION_PARAMETER.IDRS_BARCODE_SESSION_PARAMETER_RECOGNITION_MODE">
            <summary>
            Sets the barcode recognition mode that needs to be used for detection.
            The possible values are described in <see cref="T:IDRSNET.IDRS_BARCODE_RECOGNITION_MODE"/> 
            - IDRS_BARCODE_RECOGNITION_MODE_STOP_ON_FIRST_RESULT
            - IDRS_BARCODE_RECOGNITION_MODE_READ_ALL_BARCODES
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_BARCODE_SESSION_PARAMETER.IDRS_BARCODE_SESSION_TIMEOUT_MILLISECONDS">
            <summary>
            Sets the timeout in milliseconds after which the engine should stop doing recognition
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_BARCODE_SESSION_PARAMETER.IDRS_BARCODE_SESSION_PARAMETER_CODE128_CONTROL_CODE">
            <summary>
            Enables barcode code128 control code mode.
            Possible values are:
            - IDRS_TRUE: enables the setting
            - IDRS_FALSE: disables the setting
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_BARCODE_SESSION_PARAMETER.IDRS_BARCODE_SESSION_PARAMETER_AUTOMATIC_ENCODING_DETECTION_UTF8">
            <summary>
            Enables automatic utf8 encoding detection.
            Possible values are:
            - IDRS_TRUE: enables the automatic detection
            - IDRS_FALSE: disables the automatic detection
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_BARCODE_SESSION_PARAMETER.IDRS_BARCODE_SESSION_PARAMETER_AUTOMATIC_ENCODING_DETECTION_SJIS">
            <summary>
            Enables automatic SJIS encoding detection.
            Possible values are:
            - IDRS_TRUE: enables the automatic detection
            - IDRS_FALSE: disables the automatic detection
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_BARCODE_SESSION_PARAMETER.IDRS_BARCODE_SESSION_PARAMETER_MAX">
            <summary>
            ! Internal value.
            </summary>
        </member>
        <member name="T:IDRSNET.IBarcodeEngine">
            <summary>
            CBarcodeEngine represents the base class for the barcode engines used by iDRS SDK
            This class needs to be extended when creating a new barcode engine that would be used with iDRS SDK.
            A typical barcode engine is expected to have:
            - session based recognition
            - a set of barcodes that it can recognize.
            - a set of capabilities
            - a unique identifier which will be used to target the specific barcode engine. Please use a value larger than 100.
            </summary>
        </member>
        <member name="M:IDRSNET.IBarcodeEngine.GetBarcodeEngineUniqueIdentifier">
            <summary>
            GetBarcodeEngineUniqueIdentifier retrieves barcode unique identifier.
            The value retrieved by this function will be used to reference this barcode engine when setting different properties
            as well as in results.
            Please use values larger than 100 when creating new barcode engines registered with iDRS SDK.
            Currently iDRS SDK uses values 0 to 7, but future versions might include new engines.
            </summary>
            <returns>Unique identifier for the barcode engine</returns>
        </member>
        <member name="M:IDRSNET.IBarcodeEngine.GetCapabilitiesCount">
            <summary>
            GetCapabilitiesCount retrieves the number of capabilities supported by the barcode engine.
            For a list of available capabilities, please consult <see cref="T:IDRSNET.IDRS_BARCODE_CAPABILITY"/> 
            </summary>
            <returns>Number of capabilities supported by the barcode engine</returns>
        </member>
        <member name="M:IDRSNET.IBarcodeEngine.HasCapability(IDRSNET.IDRS_BARCODE_CAPABILITY)">
            <summary>
            HasCapability verifies if the barcode engine supports a certain capability
            </summary>
            <param name="evBarcodeCapability">Capability value</param>
            <returns>IDRS_TRUE if the capability is supported, IDRS_FALSE otherwise</returns>
        </member>
        <member name="M:IDRSNET.IBarcodeEngine.GetSupportedCapabilities(IDRSNET.IDRS_BARCODE_CAPABILITY[],System.UInt32)">
            <summary>
            GetSupportedCapabilities retrieves the list with supported capabilities
            </summary>
            <param name="pargSupportedCapabilities">Preallocated array that the engine is expected to fill with the capabilities information</param>
            <param name="uiVectorSize">Number of elements in the array</param>
            <returns>IDRS_SUCCESS if all supported capabilities can be retrieved. Error code otherwise</returns>
        </member>
        <member name="M:IDRSNET.IBarcodeEngine.GetSupportedBarcodeTypesCount">
            <summary>
            GetSupportedBarcodeTypesCount retrieves the number of barcode types in <see cref="T:IDRSNET.IDRS_BARCODE_TYPE"/> that the engine can recognize.
            If the new engine can detect barcode types that are not in the IDRS_BARCODE_TYPE enum, iDRS SDK considers it as custom barcode type.
            For these type of barcodes, please use GetSupportedCustomBarcodeTypesCount, GetSupportedCustomBarcodeTypes and IsCustomBarcodeTypeSupported methods
            </summary>
            <returns>Number of barcode types supported by the engine</returns>
        </member>
        <member name="M:IDRSNET.IBarcodeEngine.GetSupportedBarcodeTypes(IDRSNET.IDRS_BARCODE_TYPE[],System.UInt32)">
            <summary>
            GetSupportedBarcodeTypes retrieves the engine's supported barcode types
            </summary>
            <param name="pargBarcodeTypesBuffer">Buffer of IDRS_BARCODE_TYPE elements where the barcode types supported by the engine should be copied</param>
            <param name="uiBufferSize">Number of elements in pargBarcodeTypesBuffer</param>
            <returns>IDRS_SUCCESS if all supported barcode types can be retrieved. Error code otherwise</returns>
        </member>
        <member name="M:IDRSNET.IBarcodeEngine.IsBarcodeTypeSupported(IDRSNET.IDRS_BARCODE_TYPE)">
            <summary>
            IsBarcodeTypeSupported checks if a barcode type is supported by the engine or not
            </summary>
            <param name="evBarcodeType">Barcode type</param>
            <returns>IDRS_TRUE if the barcode type is supported by the engine, IDRS_FALSE otherwise</returns>
        </member>
        <member name="M:IDRSNET.IBarcodeEngine.GetSupportedCustomBarcodeTypesCount">
            <summary>
            GetSupportedCustomBarcodeTypesCount retrieves the number custom of barcode types not found in <see cref="T:IDRSNET.IDRS_BARCODE_TYPE"/> that the engine can recognize.
            If the new engine can detect barcode types that are not in the IDRS_BARCODE_TYPE enum, iDRS SDK considers it as custom barcode type.
            </summary>
            <returns>Number of custom barcode types supported by the engine</returns>
        </member>
        <member name="M:IDRSNET.IBarcodeEngine.GetSupportedCustomBarcodeTypes(System.UInt32[],System.UInt32)">
            <summary>
            GetSupportedCustomBarcodeTypes retrieves the engine's supported custom barcode types
            </summary>
            <param name="pargBarcodeCustomTypesBuffer">Buffer of IDRS_CUSTOM_BARCODE_TYPE elements where the custom barcode types supported by the engine should be copied</param>
            <param name="uiBufferSize">Number of elements in pargBarcodeTypesBuffer</param>
            <returns>IDRS_SUCCESS if all supported custom barcode types can be retrieved. Error code otherwise</returns>
        </member>
        <member name="M:IDRSNET.IBarcodeEngine.IsCustomBarcodeTypeSupported(System.UInt32)">
            <summary>
            IsCustomBarcodeTypeSupported checks if a custom barcode type is supported by the engine or not
            </summary>
            <param name="uiCustomBarcodeType">Custom barcode type</param>
            <returns>IDRS_TRUE if the custom barcode type is supported by the engine, IDRS_FALSE otherwise</returns>
        </member>
        <member name="M:IDRSNET.IBarcodeEngine.CreateSession">
            <summary>
            CreateSession creates a new session for recognition purposes
            </summary>
            <returns>Barcode session handle</returns>
        </member>
        <member name="M:IDRSNET.IBarcodeEngine.CloseSession(System.Object)">
            <summary>
            CloseSession closes an already opened session
            </summary>
            <param name="hBarcodeSession">Barcode session</param>
        </member>
        <member name="M:IDRSNET.IBarcodeEngine.SessionEnableBarcodeType(System.Object,IDRSNET.IDRS_BARCODE_TYPE,System.UInt32,System.Boolean)">
            <summary>
            SessionEnableBarcodeType enables a barcode type for the specified session
            </summary>
            <param name="hBarcodeHandle">Barcode session handle</param>
            <param name="evBarcodeType">Barcode type</param>
            <param name="uiCustomIdentifier">Custom barcode type. Valid only if evBarcodeType is set to IDRS_BARCODE_CUSTOM</param>
            <param name="bEnable">Flag indicating whether the barcode type should be enabled or not.</param>
            <returns>IDRS_SUCCESS if the barcode type could be enabled. Error code otherwise</returns>
        </member>
        <member name="M:IDRSNET.IBarcodeEngine.SessionSetBarcodeProperties(System.Object,IDRSNET.IDRS_BARCODE_TYPE,System.UInt32,IDRSNET.CIDRSBarcodeAdvancedParameters)">
            <summary>
            SessionSetBarcodeProperties sets barcode type properties for the specified session
            </summary>
            <param name="hBarcodeHandle">Barcode session handle</param>
            <param name="evBarcodeType">Barcode type</param>
            <param name="uiCustomIdentifier">Custom barcode type. Valid only if evBarcodeType is set to IDRS_BARCODE_CUSTOM</param>
            <param name="stAdvancedParameters">Structure containing the barcode type properties</param>
            <returns>IDRS_SUCCESS if the barcode type properties could be set. Error code otherwise</returns>
        </member>
        <member name="M:IDRSNET.IBarcodeEngine.SessionSetParameters(System.Object,IDRSNET.IDRS_BARCODE_SESSION_PARAMETER,System.UInt32)">
            <summary>
            SessionSetParameters sets a session parameter
            </summary>
            <param name="hBarcodeHandle">Barcode session handle</param>
            <param name="evParameter">Parameter identifier</param>
            <param name="uiValue">Parameter type</param>
            <returns>IDRS_SUCCESS if the session parameter could be set. Error code otherwise</returns>
        </member>
        <member name="M:IDRSNET.IBarcodeEngine.ProcessImage(System.Object,IDRSNET.CImage,IDRSNET.CBarcodeContext,IDRSNET.CBarcodeResultSet)">
            <summary>
            ProcessImage runs barcode recognition on the supplied image
            The image data is guaranteed to be valid until the function ends. If the engine does not change the input image, then it can safely reference the pixels from the provided image.
            In case the image needs to be modified, the engine should make a copy of the provided image.
            The barcode results are expected to be added to argBarcodeResults as individual CBarcodeResult objects.
            </summary>
            <param name="hBarcodeEngineHandle">Barcode session handle</param>
            <param name="argInputImage">Input image</param>
            <param name="argBarcodeContext">Barcode context</param>
            <param name="argBarcodeResults">Object where all barcode results are expected to be stored.</param>
            <returns>IDRS_SUCCESS if the barcode recognition was executed without any error. Error code otherwise</returns>
        </member>
        <member name="T:IDRSNET.IBarcodeEnginePostprocess">
            <summary>
            CBarcodeEnginePostprocess class represents the base class for barcode results post-processing
            The purpose of barcode results post-processing is to allow modification of barcode results returned by an engine
            before it is actually mixed with the results obtained from other barcode engines
            </summary>
        </member>
        <member name="M:IDRSNET.IBarcodeEnginePostprocess.Postprocess(IDRSNET.CBarcodeResultSet,System.UInt32)">
            <summary>
            Postprocess executes postprocessing on the supplied barcode results
            </summary>
            <param name="argResults">Barcode results</param>
            <param name="uiSourceEngine">Engine that generated the results</param>
            <returns>IDRS_SUUCESS if everything is OK, error code otherwise</returns>
        </member>
        <member name="T:IDRSNET.IBarcodeEnginePreprocess">
            <summary>
            CBarcodeEnginePreprocess represents the base class for image preprocessing options
            The purpose of image preprocessing options is to enhance the image before it will be processed by the barcode recognition engine
            </summary>
        </member>
        <member name="M:IDRSNET.IBarcodeEnginePreprocess.Preprocess(IDRSNET.CImage)">
            <summary>
            Preprocess runs the image preprocessing on the image provided as argument.
            The image be modified by this method
            </summary>
            <param name="argImage">Image to modify.</param>
            <returns>IDRS_SUUCESS if everything is OK, error code otherwise</returns>
        </member>
        <member name="T:IDRSNET.IBaseImagePlugin">
            <summary>
            The CBaseImagePlugin class represents the base class for all imaging plugins.
            \ingroup module_core
            An image plugin is a class that is able to load and/or save a specific type of image.
            Each plugin needs to announce it's internal capabilities through CImagePluginCapabilities.
            Each plugin needs to support all options from the used CImageOptionsXXX class.
            iDRS SDK will invoke function CanLoadFile whenever a file needs to be loaded.
            The plugin's responsibility is to detect whether the supplied file can be loaded using it's own code.
            </summary>
        </member>
        <member name="M:IDRSNET.IBaseImagePlugin.SaveImage(IDRSNET.CImage,System.String,IDRSNET.CImageFileFormat.FileFormat,IDRSNET.CImageOptions)">
            <summary>
            SaveImage saves a CImage object to a file on disk, using the file format parameters provided
            </summary>
            <param name="argImage">CImage object to save</param>
            <param name="strFilePath">Path to the file where to store the image data</param>
            <param name="fFFileFormat">Image file format used for saving</param>
            <param name="argImageOptions">Image file format options</param>
            <see cref="T:IDRSNET.CImage"/> 
            <see cref="T:IDRSNET.CImageFileFormat.FileFormat"/> 
            <see cref="T:IDRSNET.CImageOptions"/> 
            <returns>IDRS_TRUE if the image was successfully saved, IDRS_FALSE otherwise</returns>
        </member>
        <member name="M:IDRSNET.IBaseImagePlugin.SaveImage(IDRSNET.CImage,System.String,IDRSNET.CImageFileFormat.FileFormat)">
            <summary>
            SaveImage saves a CImage object to a file on disk, using the file format parameters provided
            For this format the default parameters will be used
            </summary>
            <param name="argImage">CImage object to save</param>
            <param name="strFilePath">Path to the file where to store the image data</param>
            <param name="fFFileFormat">Image file format used for saving</param>
            <see cref="T:IDRSNET.CImage"/> 
            <see cref="T:IDRSNET.CImageFileFormat.FileFormat"/> 
            <see cref="T:IDRSNET.CImageOptions"/> 
            <returns>IDRS_TRUE if the image was successfully saved, IDRS_FALSE otherwise</returns>
        </member>
        <member name="M:IDRSNET.IBaseImagePlugin.SaveImage(IDRSNET.CImage,System.IO.Stream,IDRSNET.CImageFileFormat.FileFormat,IDRSNET.CImageOptions)">
            <summary>
            SaveImage saves a CImage object to a Stream object, using the file format parameters provided
            </summary>
            <param name="argImage">CImage object to save</param>
            <param name="argStream">Stream where to store the image data</param>
            <param name="fFFileFormat">Image file format used for saving</param>
            <param name="argImageOptions">Image file format options</param>
            <see cref="T:IDRSNET.CImage"/> 
            <see cref="T:IDRSNET.CImageFileFormat.FileFormat"/> 
            <see cref="T:IDRSNET.CImageOptions"/> 
            <returns>IDRS_TRUE if the image was successfully saved, IDRS_FALSE otherwise</returns>
        </member>
        <member name="M:IDRSNET.IBaseImagePlugin.SaveImage(IDRSNET.CImage,System.IO.Stream,IDRSNET.CImageFileFormat.FileFormat)">
            <summary>
            SaveImage saves a CImage object to a Stream object, using the file format parameters provided
            For this format the default parameters will be used
            </summary>
            <param name="argImage">CImage object to save</param>
            <param name="argStream">Stream where to store the image data</param>
            <param name="fFFileFormat">Image file format used for saving</param>
            <see cref="T:IDRSNET.CImage"/> 
            <see cref="T:IDRSNET.CImageFileFormat.FileFormat"/> 
            <see cref="T:IDRSNET.CImageOptions"/> 
            <returns>IDRS_TRUE if the image was successfully saved, IDRS_FALSE otherwise</returns>
        </member>
        <member name="M:IDRSNET.IBaseImagePlugin.SaveImage(IDRSNET.CImage,IDRSNET.CMemoryBuffer,IDRSNET.CImageFileFormat.FileFormat,IDRSNET.CImageOptions)">
            <summary>
            SaveImage saves a CImage object to a memory buffer, using the file format parameters provided
            CMemoryBuffer is a class inheriting from Stream but an overload is added for speed constraints
            </summary>
            <param name="argImage">CImage object to save</param>
            <param name="argMemoryBuffer">Memory buffer where to store the image data</param>
            <param name="fFFileFormat">Image file format used for saving</param>
            <param name="argImageOptions">Image file format options</param>
            <see cref="T:IDRSNET.CImage"/> 
            <see cref="T:IDRSNET.CImageFileFormat.FileFormat"/> 
            <see cref="T:IDRSNET.CImageOptions"/> 
            <returns>IDRS_TRUE if the image was successfully saved, IDRS_FALSE otherwise</returns>
        </member>
        <member name="M:IDRSNET.IBaseImagePlugin.SaveImage(IDRSNET.CImage,IDRSNET.CMemoryBuffer,IDRSNET.CImageFileFormat.FileFormat)">
            <summary>
            SaveImage saves a CImage object to a memory buffer, using the file format parameters provided
            For this format the default parameters will be used
            CMemoryBuffer is a class inheriting from Stream but an overload is added for speed constraints
            </summary>
            <param name="argImage">CImage object to save</param>
            <param name="argMemoryBuffer">Memory buffer where to store the image data</param>
            <param name="fFFileFormat">Image file format used for saving</param>
            <see cref="T:IDRSNET.CImage"/> 
            <see cref="T:IDRSNET.CImageFileFormat.FileFormat"/> 
            <see cref="T:IDRSNET.CImageOptions"/> 
            <returns>IDRS_TRUE if the image was successfully saved, IDRS_FALSE otherwise</returns>
        </member>
        <member name="M:IDRSNET.IBaseImagePlugin.LoadImage(IDRSNET.CImage,System.String,System.UInt32)">
            <summary>
            Loads a file from disk into the specified CImage object
            </summary>
            <param name="argImage">Reference to the CImage object that will contain the data read from the disk</param>
            <param name="strFilePath">Path to the file that will be loaded</param>
            <param name="uiPageNumber">Number of page inside the image. This parameter is useful only for multi-page images</param>
            <returns>IDRS_TRUE if the load operation is successful, IDRS_FALSE otherwise</returns>
            <see cref="T:IDRSNET.CImage"/> 
        </member>
        <member name="M:IDRSNET.IBaseImagePlugin.LoadImage(IDRSNET.CImage,System.IO.Stream,System.UInt32)">
            <summary>
            Loads a file from disk into the specified CImage object
            </summary>
            <param name="argImage">Reference to the CImage object that will contain the data read from the disk</param>
            <param name="argInputStream">a stream containing the image to be loaded</param>
            <param name="uiPageNumber">Number of page inside the image. This parameter is useful only for multi-page images</param>
            <returns>IDRS_TRUE if the load operation is successful, IDRS_FALSE otherwise</returns>
            <see cref="T:IDRSNET.CImage"/> 
        </member>
        <member name="M:IDRSNET.IBaseImagePlugin.LoadImage(IDRSNET.CImage,System.String,IDRSNET.CImageLoadOptions)">
            <summary>
            Loads a file from disk into the specified CImage object
            </summary>
            <param name="argImage">Reference to the CImage object that will contain the data read from the disk</param>
            <param name="strFilePath">Path to the file that will be loaded</param>
            <param name="argLoadOptions">Reference to a CImageLoadOptions class containing options for loading</param>
            <returns>IDRS_TRUE if the load operation is successful, IDRS_FALSE otherwise</returns>
            <see cref="T:IDRSNET.CImage"/> 
        </member>
        <member name="M:IDRSNET.IBaseImagePlugin.LoadImage(IDRSNET.CImage,System.IO.Stream,IDRSNET.CImageLoadOptions)">
            <summary>
            Loads a file or memory stream into the specified CImage object
            </summary>
            <param name="argImage">Reference to the CImage object that will contain the data read from the disk</param>
            <param name="argInputStream">the input stream</param>
            <param name="argLoadOptions">Reference to a CImageLoadOptions class containing options for loading</param>
            <returns>IDRS_TRUE if the load operation is successful, IDRS_FALSE otherwise</returns>
            <see cref="T:IDRSNET.CImage"/> 
        </member>
        <member name="M:IDRSNET.IBaseImagePlugin.CanLoadFile(System.String)">
            <summary>
            CanLoadFile is the function that allows the plugin to signal whether it recognizes a certain file and that it can load it.
            The plugin can choose any algorithm for detecting the file type:
            - based on file extension
            - based on magic bytes inside the image header
            </summary>
            <param name="strFilePath">Path to the file</param>
            <returns>IDRS_TRUE if the plugin recognizes the file type and it can load it. IDRS_FALSE otherwise</returns>
        </member>
        <member name="M:IDRSNET.IBaseImagePlugin.CanLoadFile(System.IO.Stream)">
            <summary>
            CanLoadFile is the function that allows the plugin to signal whether it recognizes a certain file and that it can load it.
            The plugin can choose any algorithm for detecting the file type:
            - based on file extension
            - based on magic bytes inside the image header
            </summary>
            <param name="argInputStream">The input stream to decode</param>
            <returns>IDRS_TRUE if the plugin recognizes the file type and it can load it. IDRS_FALSE otherwise</returns>
        </member>
        <member name="M:IDRSNET.IBaseImagePlugin.GetPageCount(System.String,IDRSNET.CImageFileFormat.FileFormat)">
            <summary>
            \ brief GetPageCount Retrieves the number of pages of the given input image
            The plugin can provide an implementation for retrieving the number of pages of the
            image used as an input
            </summary>
            <param name="strFilePath">Path to the file</param>
            <param name="fFileFormat">The file format</param>
            <returns>The input page count</returns>
        </member>
        <member name="M:IDRSNET.IBaseImagePlugin.GetPageCount(System.IO.Stream,IDRSNET.CImageFileFormat.FileFormat)">
            <summary>
            \ brief GetPageCount Retrieves the number of pages of the given input image
            The plugin can provide an implementation for retrieving the number of pages of the
            image used as an input
            </summary>
            <param name="argInputStream">The input stream</param>
            <param name="fFileFormat">The file format</param>
            <returns>The input page count</returns>
        </member>
        <member name="M:IDRSNET.IBaseImagePlugin.GetPageCount(System.String,IDRSNET.CImageFileFormat.FileFormat,IDRSNET.CImageLoadOptions)">
            <summary>
            \ brief GetPageCount Retrieves the number of pages of the given input image
            The plugin can provide an implementation for retrieving the number of pages of the
            image used as an input
            </summary>
            <param name="strFilePath">Path to the file</param>
            <param name="fFileFormat">The file format</param>
            <param name="argLoadOptions">Reference to a CImageLoadOptions class containing options for loading</param>
            <returns>The input page count</returns>
        </member>
        <member name="M:IDRSNET.IBaseImagePlugin.GetPageCount(System.IO.Stream,IDRSNET.CImageFileFormat.FileFormat,IDRSNET.CImageLoadOptions)">
            <summary>
            \ brief GetPageCount Retrieves the number of pages of the given input image
            The plugin can provide an implementation for retrieving the number of pages of the
            image used as an input
            </summary>
            <param name="argInputStream">The input stream</param>
            <param name="fFileFormat">The file format</param>
            <param name="argLoadOptions">Reference to a CImageLoadOptions class containing options for loading</param>
            <returns>The input page count</returns>
        </member>
        <member name="M:IDRSNET.IBaseImagePlugin.GetCapabilities">
            <summary>
            GetCapabilities returns the capabilities of the plugin
            The plugin can have multiple capabilities: loading and/or saving one or more type of files
            </summary>
            <returns>An object containing all the capabilities supported by the plugin</returns>
        </member>
        <member name="T:IDRSNET.IFastReaderCallback">
            <summary>
            The CFastReaderCallback class is the base class for fast reader callback classes.
            \ingroup module_core module_ocr
            A fast reader callback class:
            - provides the data to be processed to the CFastReader object
            - is called by the CFastReader object to store the results.
            By overriding the desired methods in this class, the integrator can retrieve various information from the recognized document
            </summary>
        </member>
        <member name="M:IDRSNET.IFastReaderCallback.OnNextBlackAndWhiteImage(System.UInt32@,System.UInt32@,System.UInt32@,System.Byte[]@)">
            <summary>
            OnNextBlackAndWhiteImage is called by the CFastReader object to get the next black and white image to process.
            </summary>
            <param name="uiWidth">To return the width in pixels of the image.</param>
            <param name="uiHeight">To return the height in pixels of the image.</param>
            <param name="uiResolution">To return the resolution of the image.</param>
            <param name="pbPixels">To return a pointer to the image pixels.</param>
            <returns>It must return IDRS_TRUE if there are other images to process. Otherwise, IDRS_FALSE if there are no more images to process.</returns>
        </member>
        <member name="M:IDRSNET.IFastReaderCallback.OnStartLine(IDRSNET.CIDRSRect)">
            <summary>
            OnStartLine is called when a new line begins.
            </summary>
            <param name="rcLinePosition">The coordinates of the line in the picture.</param>
        </member>
        <member name="M:IDRSNET.IFastReaderCallback.OnEndLine">
            <summary>
            OnEndLine is called at the end of the current line.
            </summary>
        </member>
        <member name="M:IDRSNET.IFastReaderCallback.OnStartWord(IDRSNET.CIDRSRect)">
            <summary>
            OnStartWord is called when a new word begins.
            </summary>
            <param name="rcWordPosition">The coordinates of the word in the picture.</param>
        </member>
        <member name="M:IDRSNET.IFastReaderCallback.OnEndWord">
            <summary>
            OnEndWord is called at the end of the current word.
            </summary>
        </member>
        <member name="M:IDRSNET.IFastReaderCallback.OnReadTextElement(System.String,System.UInt32,IDRSNET.CIDRSRect,System.UInt32)">
            <summary>
            OnReadTextElement is called by the CFastReader object to notify a new text meaning element.
            </summary>
            <param name="wstrValue">The value.</param>
            <param name="uiStatus">The "status" (confidence level) of the meaning element.</param>
            <param name="rcPosition">The position of the meaning element in the image.</param>
            <param name="ui32Attributes">The attributes of the meaning element.</param>
        </member>
        <member name="M:IDRSNET.IFastReaderCallback.OnReadAlternativeTextElement(System.String,System.UInt32)">
            <summary>
            OnReadAlternativeTextElement is called by the CFastReader object to notify a new alternative.
            </summary>
            <param name="wstrValue">The value.</param>
            <param name="uiStatus">The status of the meaning element (its confidence level).</param>
        </member>
        <member name="M:IDRSNET.IFastReaderCallback.OnReadBarcode(System.String,System.UInt32,System.UInt32,IDRSNET.CIDRSRect)">
            <summary>
            OnReadBarcode is called by the CFastReader object to notify a new barcode element.
            </summary>
            <param name="wstrValue">The value for the barcode.</param>
            <param name="uiStatus">The barcode status.</param>
            <param name="uiType">The barcode type.</param>
            <param name="rcPosition">The position of the barcode.</param>
        </member>
        <member name="T:IDRSNET.IFontDataProviderCallback">
            <summary>
            CFontDataProviderCallback provides a way for iDRS SDK integrators to supply the fonts to be used by the document output engine.
            </summary>
        </member>
        <member name="M:IDRSNET.IFontDataProviderCallback.GetFontData(System.String,System.String,System.Boolean,System.Boolean,System.IO.Stream)">
            <summary>
            GetFontData extracts the font data and writes it to the supplied memory stream
            The font data is required for PDF document creation. Currently iDRS SDK is able to work only with true type font outlines.
            The following font tables are required:
            - glyf
            - head
            - hhea
            - loca
            - maxp
            - cvt
            - prep
            - hmtx
            - fpgm
            </summary>
            <param name="strFontPostScriptName">Font Postscript name</param>
            <param name="strFontFamilyName">Font family name</param>
            <param name="bBold">Boolean flag indicating that bold modifier is applied to the font</param>
            <param name="bItalic">Boolean flag indicating that italic modifier is applied to the font</param>
            <param name="argOutputStream">Stream object when the font data should be written</param>
            <returns>IDRS_TRUE is the font has been found and the expected data has been extracted, IDRS_FALSE otherwise</returns>
        </member>
        <member name="T:IDRSNET.ILineReader">
            <summary>
            The CLineReader class is the base class to write line reader classes.
            \ingroup module_core
            A line reader object is used to provide image buffers inside iDRS.
            A common usage for this class is to provide the image raw data for image file format that iDRS SDK is not currently supported or for custom image file formats
            <see cref="T:IDRSNET.CStdLineReader"/> contains a default implementation for this class that works with memory buffers
            </summary>
        </member>
        <member name="M:IDRSNET.ILineReader.GetLine(System.IntPtr,System.UInt32,System.UInt32)">
            <summary>
            GetLine retrieves the data for the requested line.
            The integrator has to override this method to provide the data for the requested line.
            </summary>
            <param name="pvLine">The buffer where to write the pixels of the line.</param>
            <param name="ui32Line">The 0 based index of the line to retrieve.</param>
            <param name="ui32Bytes">The byte width for the line.</param>
        </member>
        <member name="T:IDRSNET.ILogger">
            <summary>
            The ILogger abstract class describes an interface which can be used
            by a custom class to provide a global logging system
            The global logging system can be used to provide to an IDRS SDK integrator
            information and feedback about meaningfuls event
            The interface contains information about the level of severity of the events that are going to be logged.
            </summary>
        </member>
        <member name="T:IDRSNET.ILogger.eSeverityLevel">
            <summary>
            The eSeverityLevel defines the severity level of the meaningful events
            that are logged, to give more information to iDRS SDK integrators about the severity
            of the received event
            </summary>
        </member>
        <member name="F:IDRSNET.ILogger.eSeverityLevel.SeverityLevelInfo">
            <summary>
            This level describes events that will be logged from iDRS as info messages,
            giving information to user about the progress and the status of an operation
            </summary>
        </member>
        <member name="F:IDRSNET.ILogger.eSeverityLevel.SeverityLevelWarning">
            <summary>
            This level describes events that will be logged from iDRS as warning messages,
            giving more information to user when a warning occurs during an operation
            </summary>
        </member>
        <member name="F:IDRSNET.ILogger.eSeverityLevel.SeverityLevelError">
            <summary>
            This level describes events that will be logged from iDRS as error messages,
            giving more information to user when an error occurs during an operation
            </summary>
        </member>
        <member name="M:IDRSNET.ILogger.OnReceivedMessage(IDRSNET.ILogger.eSeverityLevel,System.String)">
            <summary>
            OnReceivedMessage is a method which will be called on reception of meaningful events
            to provide information about the status and the type of the event. Function will provide information
            only to events that occur with a severity level equal or higher than the critical severity level provided by user
            </summary>
            <param name="evSeverityLevel">The severity level of the events that will be logged</param>
            <param name="strMessage">A message providing more information about the occurred event</param>
        </member>
        <member name="T:IDRSNET.IOutputProgress">
            <summary>
            The COutputProgress class represents the base class for document output monitor classes.
            \ingroup module_document_output
            <see cref="T:IDRSNET.CIDRS"/> 
            </summary>
        </member>
        <member name="M:IDRSNET.IOutputProgress.BeginPageProcess(System.UInt32)">
            <summary>
            BeginPageProcess is called whenever iDRS DocumentOutput engine starts the conversion of the page with the provided index
            </summary>
            <param name="uiPageIndex">The index of the page that is to be processed</param>
        </member>
        <member name="M:IDRSNET.IOutputProgress.GetAbortFlag">
            <summary>
            GetAbortFlag can be overridden so the current process will be stopped when the method returns IDRS_TRUE.
            </summary>
            <returns>IDRS_TRUE to abort current process, IDRS_FALSE to continue</returns>
        </member>
        <member name="T:IDRSNET.IPageQueue">
            <summary>
            The IPageQueue interface defines the needed method that a container must implement to be used by
            the document output engine.
            \ingroup module_core module_ocr module_barcode module_document_output
            The class is expected to provide the pages of the document in reading order.
            </summary>
        </member>
        <member name="M:IDRSNET.IPageQueue.PopFront">
            <summary>
            Removes and return the page currently at the front of the queue.
            This method is expected to behave as a combination of front() and pop_front() in their standard meaning.
            </summary>
            <returns>The page to provide to the document output engine. If there is no more pages in the document, this</returns>
            <remarks>method must return NULL.</remarks>
        </member>
        <member name="T:IDRSNET.IPageResultsParser">
            <summary>
            The CPageResultsParser class is the base class to write IDRS_DOC_PAGE structure parser classes.
            \ingroup module_core module_ocr module_barcode
            The class contains virtual methods for various events that occur when performing document recognition: start/end page, start/end zone, character found, etc
            The integrator can use this class as base class and choose to override the methods of interest.
            <see cref="T:IDRSNET.CPageResults"/> 
            </summary>
        </member>
        <member name="M:IDRSNET.IPageResultsParser.BeginPage(IDRSNET.CIDRSDocPage)">
            <summary>
            Callback method invoked when the page parsing begins
            </summary>
            <param name="argPage">reference to the IDRS_DOC_PAGE object that is parsed</param>
        </member>
        <member name="M:IDRSNET.IPageResultsParser.EndPage">
            <summary>
            Callback method invoked when the page parsing is complete
            </summary>
        </member>
        <member name="M:IDRSNET.IPageResultsParser.BeginSection(IDRSNET.CIDRSDocSection)">
            <summary>
            Callback method invoked when a section parsing is starting
            </summary>
            <param name="argSection">reference to the IDRS_DOC_SECTION object that is parsed</param>
            <remarks>this method is invoked only if the recognition results contain page layout information</remarks>
        </member>
        <member name="M:IDRSNET.IPageResultsParser.EndSection">
            <summary>
            Callback method invoked when section parsing in complete
            </summary>
            <remarks>this method is invoked only if the recognition results contain page layout information</remarks>
        </member>
        <member name="M:IDRSNET.IPageResultsParser.BeginZone(IDRSNET.CIDRSDocZone)">
            <summary>
            Callback method invoked when a zone parsing is starting
            </summary>
            <param name="argZone">reference to the IDRS_DOC_ZONE object that is parsed</param>
        </member>
        <member name="M:IDRSNET.IPageResultsParser.EndZone">
            <summary>
            Callback method invoked when zone parsing in complete
            </summary>
        </member>
        <member name="M:IDRSNET.IPageResultsParser.BeginFlowingParagraph(IDRSNET.CIDRSDocFlowingParagraphFormat)">
            <summary>
            Callback method invoked when a flowing paragraph parsing is starting
            </summary>
            <param name="argFlowingParagraph">reference to the IDRS_DOC_FLOWING_PARAGRAPH_FORMAT object that is parsed</param>
            <remarks>this method is invoked only if the recognition results contain page layout information</remarks>
        </member>
        <member name="M:IDRSNET.IPageResultsParser.EndFlowingParagraph">
            <summary>
            Callback method invoked when flowing paragrapgh parsing in complete
            </summary>
        </member>
        <member name="M:IDRSNET.IPageResultsParser.BeginCell(IDRSNET.CIDRSDocCell)">
            <summary>
            Callback method invoked when a call parsing is starting
            </summary>
            <param name="argCell">reference to the IDRS_DOC_CELL object that is parsed</param>
        </member>
        <member name="M:IDRSNET.IPageResultsParser.EndCell">
            <summary>
            Callback method invoked when cell parsing in complete
            </summary>
        </member>
        <member name="M:IDRSNET.IPageResultsParser.BeginParagraph(IDRSNET.CIDRSDocParagraph)">
            <summary>
            Callback method invoked when a paragraph parsing is starting
            </summary>
            <param name="argParagraph">reference to the IDRS_DOC_PARAGRAPH object that is parsed</param>
            <remarks>this method is invoked only if the recognition results contain page layout information</remarks>
        </member>
        <member name="M:IDRSNET.IPageResultsParser.EndParagraph">
            <summary>
            Callback method invoked when paragraph parsing in complete
            </summary>
        </member>
        <member name="M:IDRSNET.IPageResultsParser.BeginLine(IDRSNET.CIDRSDocLine)">
            <summary>
            Callback method invoked when a line parsing is starting
            </summary>
            <param name="argLine">reference to the IDRS_DOC_LINE object that is parsed</param>
        </member>
        <member name="M:IDRSNET.IPageResultsParser.EndLine">
            <summary>
            Callback method invoked when line parsing in complete
            </summary>
        </member>
        <member name="M:IDRSNET.IPageResultsParser.BeginWord(IDRSNET.CIDRSDocWord)">
            <summary>
            Callback method invoked when a word parsing is starting
            </summary>
            <param name="argWord">reference to the IDRS_DOC_WORD object that is parsed</param>
        </member>
        <member name="M:IDRSNET.IPageResultsParser.EndWord">
            <summary>
            Callback method invoked when word parsing in complete
            </summary>
        </member>
        <member name="M:IDRSNET.IPageResultsParser.AddTextElement(IDRSNET.CIDRSDocTextElement)">
            <summary>
            Callback method invoked when a text element is found
            </summary>
            <param name="argTextElement">reference to the IDRS_DOC_TEXT_ELEMENT object that is parsed</param>
        </member>
        <member name="M:IDRSNET.IPageResultsParser.AddBarcodeElement(IDRSNET.CIDRSDocBarcodeData)">
            <summary>
            Callback method invoked when a barcode element is found
            </summary>
            <param name="argBarcodeData">reference to the IDRS_DOC_BARCODE_DATA object that is parsed</param>
        </member>
        <member name="T:IDRSNET.IPageSet">
            <summary>
            The CPageSet class represents the base class for the classes that contains the pages to be used by document output engine
            \ingroup module_core module_ocr module_barcode module_document_output
            Document output engine can use either in-memory data or files present on disk
            The class is expected to contain an internal iterator that iterates over a set of images (in memory or on disk)
            </summary>
        </member>
        <member name="M:IDRSNET.IPageSet.GetPageCount">
            <summary>
            GetPageCount returns the number of pages in the current CPageSet.
            </summary>
            <returns>The number of pages in the page set</returns>
        </member>
        <member name="M:IDRSNET.IPageSet.Seek(System.Int32,IDRSNET.IDRS_SEEK_POSITION)">
            <summary>
            Changes the page index in the page set
            This change affects the return of GetNextPage function
            </summary>
            <param name="iOffset">The number of pages to move the page index</param>
            <param name="spSeekPosition">The position relative to which the page index will be changed</param>
            <returns>The new index</returns>
        </member>
        <member name="M:IDRSNET.IPageSet.GetNextPage">
            <summary>
            GetNextPage returns the next page to be processed by the document output engine.
            Getting the next page also has the effect of advancing the internal cursor.
            </summary>
            <returns>The page to be used by the document output engine. If there is no page to return, this function returns NULL</returns>
        </member>
        <member name="T:IDRSNET.IDRS_PROCESS_PHASE">
            <summary>
            IDRS_PROCESS_PHASE identifies the process phases for monitoring purposes.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_PROCESS_PHASE.IDRS_PROCESS_PHASE_UNK">
            <summary>
            Unknown process phase.
            It appears that some process phases are considered as "generic" and not clearly identified.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_PROCESS_PHASE.IDRS_PROCESS_PHASE_DRS_STARTS">
            <summary>
            The character recognition engine starts its processing.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_PROCESS_PHASE.IDRS_PROCESS_PHASE_DRS_SEGMENTATION">
            <summary>
            The character recognition engine performs the OCR segmentation step.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_PROCESS_PHASE.IDRS_PROCESS_PHASE_DRS_DECISION">
            <summary>
            The character recognition engine performs the OCR decision step.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_PROCESS_PHASE.IDRS_PROCESS_PHASE_DRS_END">
            <summary>
            The character recognition engine completes its processing.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_PROCESS_PHASE.IDRS_PROCESS_PHASE_LOADING_IMAGE">
            <summary>
            Image file loading.
            iDRS is currently reading an image in a stream.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_PROCESS_PHASE.IDRS_PROCESS_PHASE_SAVING_IMAGE">
            <summary>
            Image file saving.
            iDRS is currently saving an image to a stream.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_PROCESS_PHASE.IDRS_PROCESS_PHASE_IMAGE_ROTATION">
            <summary>
            Image rotation.
            iDRS rotates an image.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_PROCESS_PHASE.IDRS_PROCESS_PHASE_SKEW_DETECTION">
            <summary>
            Skew detection
            iDRS computes the skew angle in an image.
            </summary>
        </member>
        <member name="F:IDRSNET.IDRS_PROCESS_PHASE.IDRS_PROCESS_PHASE_BINARIZATION">
            <summary>
            Binarization.
            iDRS computes a the black and white version of a color/greyscale image.
            </summary>
        </member>
        <member name="T:IDRSNET.IProgress">
            <summary>
            The CProgress class represents the base class for all recognition monitor classes.
            \ingroup module_core
            To monitor the progress, the integrator can:
            - use a iDRS standard progress monitor class
            - develop a custom progress monitor class.
            To develop a specific progress monitor class, just write a class inheriting from CProgress and set it in iDRS.
            <see cref="T:IDRSNET.CIDRS"/> 
            </summary>
        </member>
        <member name="M:IDRSNET.IProgress.BeginPhase(IDRSNET.IDRS_PROCESS_PHASE)">
            <summary>
            BeginPhase is called when beginning a new phase of the process.
            </summary>
            <param name="thePhase">The identifier for the phase.</param>
            <see cref="T:IDRSNET.IDRS_PROCESS_PHASE"/> for all possible processing phases
        </member>
        <member name="M:IDRSNET.IProgress.EndPhase(IDRSNET.IDRS_PROCESS_PHASE)">
            <summary>
            EndPhase is called when a phase of the process ends
            </summary>
            <param name="thePhase">The identifier for the phase.</param>
            <see cref="T:IDRSNET.IDRS_PROCESS_PHASE"/> for all possible processing phases
        </member>
        <member name="M:IDRSNET.IProgress.ReportPercent(System.UInt32)">
            <summary>
            ReportPercent must be overridden to monitor the progress of the current phase.
            </summary>
            <param name="uiComplete">the progress value. Each time the function is called, the value is incremented.</param>
            <remarks>The progress maximum value is 100.</remarks>
        </member>
        <member name="M:IDRSNET.IProgress.GetAbortFlag">
            <summary>
            GetAbortFlag can be overridden so the current process will be stop if it returns IDRS_TRUE.
            </summary>
        </member>
        <member name="T:IDRSNET.IStreamFactory">
            <summary>
            IStreamFactory represents an interface used for output stream creation
            This interface can be used to create new streams for the output documents.
            Currently it is used for document split feature
            Currently the sequence of calls is always CreateStream then CloseStream.
            However, integrators code should not reply on this assumption. There might be several CreateStream called before CloseStream
            </summary>
        </member>
        <member name="M:IDRSNET.IStreamFactory.CreateStream">
            <summary>
            CreateStream is instantiating a new stream that should be opened for write/read
            The output stream can be a file stream (CFileStream), a memory stream (CMemoryStream) or a custom defined stream
            The method is expected to return a pointer to the created stream. The class inheriting IStreamFactory should
            take the necessary precautions to keep the pointer valid until <see cref="M:IDRSNET.IStreamFactory.CloseStream(System.IO.Stream)"/> is called
            </summary>
            <returns>Pointer to the created Stream object</returns>
        </member>
        <member name="M:IDRSNET.IStreamFactory.CloseStream(System.IO.Stream)">
            <summary>
            CloseStream is closing an output stream
            This method is called automatically when closing a stream created using <see cref="M:IDRSNET.IStreamFactory.CreateStream"/> 
            </summary>
            <param name="pStream">Stream to close</param>
        </member>
    </members>
</doc>
